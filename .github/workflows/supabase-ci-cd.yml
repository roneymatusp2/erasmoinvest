name: Supabase CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  SUPABASE_PROJECT_ID: gjvtncdjcslnkfctqnfy
  SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Validate SQL migrations
        run: |
          find supabase/migrations -name "*.sql" -exec echo "Validating {}" \; -exec pg_format --check {} \;
      
      - name: Validate TypeScript functions
        run: |
          cd supabase/functions
          for dir in */; do
            if [ -f "$dir/index.ts" ]; then
              echo "Checking TypeScript in $dir"
              deno check "$dir/index.ts"
            fi
          done

  test:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Start Supabase local
        run: |
          supabase init
          supabase start
      
      - name: Run migrations locally
        run: |
          supabase db push --local
      
      - name: Test Edge Functions
        run: |
          # Test master-router
          curl -i --location --request POST \
            'http://localhost:54321/functions/v1/master-router' \
            --header 'Authorization: Bearer $SUPABASE_ANON_KEY' \
            --header 'Content-Type: application/json' \
            --data '{"command": "test command", "userId": "test-user"}'
      
      - name: Stop Supabase
        if: always()
        run: supabase stop

  deploy-staging:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Link to project
        run: |
          supabase link --project-ref $SUPABASE_PROJECT_ID
      
      - name: Create/switch to staging branch
        run: |
          supabase branches create staging --project-ref $SUPABASE_PROJECT_ID || true
          supabase branches switch staging --project-ref $SUPABASE_PROJECT_ID
      
      - name: Push database changes
        run: |
          supabase db push --project-ref $SUPABASE_PROJECT_ID
      
      - name: Deploy Edge Functions
        run: |
          for func in master-router cognitive-core sentinel-agent-cron governor-agent resilience-wrapper; do
            echo "Deploying $func..."
            supabase functions deploy $func --project-ref $SUPABASE_PROJECT_ID
          done
      
      - name: Run health checks
        run: |
          echo "Running health checks on staging..."
          # Add health check scripts here

  deploy-production:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Link to project
        run: |
          supabase link --project-ref $SUPABASE_PROJECT_ID
      
      - name: Deploy to production
        run: |
          # Apply migrations
          supabase db push --project-ref $SUPABASE_PROJECT_ID
          
          # Deploy functions with versioning
          DEPLOY_VERSION=$(git rev-parse --short HEAD)
          
          for func in master-router cognitive-core sentinel-agent-cron governor-agent resilience-wrapper; do
            echo "Deploying $func version $DEPLOY_VERSION..."
            supabase functions deploy $func \
              --project-ref $SUPABASE_PROJECT_ID \
              --no-verify-jwt
          done
      
      - name: Tag deployment
        run: |
          git tag -a "deploy-$(date +%Y%m%d-%H%M%S)" -m "Production deployment"
          git push origin --tags
      
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: 'ErasmoInvest deployment to production: ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: deploy-production
    steps:
      - name: Rollback notification
        run: |
          echo "Deployment failed. Manual rollback may be required."
          # Add rollback logic here