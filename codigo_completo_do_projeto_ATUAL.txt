
# ==============================================================================
# ARQUIVO: src\components\AddInvestmentModal.tsx
# ==============================================================================

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  X,
  Plus,
  DollarSign,
  Calendar,
  Tag,
  ChevronDown,
  TrendingUp,
  TrendingDown,
  Gift,
  Percent,
  Hash,
  CheckCircle,
  AlertCircle,
  Loader2
} from 'lucide-react';
import { investmentService } from '../services/supabaseService';
import toast from 'react-hot-toast';
import { Portfolio } from '../types/investment';

interface AddInvestmentModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
  portfolios: Portfolio[];
}

type OperationType = 'COMPRA' | 'VENDA' | 'DIVIDENDO' | 'JUROS' | 'DESDOBRAMENTO';

const operationTypes = [
  { value: 'COMPRA', label: 'Compra', icon: TrendingUp, color: 'text-green-400', bgColor: 'bg-green-600/20' },
  { value: 'VENDA', label: 'Venda', icon: TrendingDown, color: 'text-red-400', bgColor: 'bg-red-600/20' },
  { value: 'DIVIDENDO', label: 'Dividendo', icon: DollarSign, color: 'text-blue-400', bgColor: 'bg-blue-600/20' },
  { value: 'JUROS', label: 'Juros (JCP)', icon: Percent, color: 'text-yellow-400', bgColor: 'bg-yellow-600/20' },
  { value: 'DESDOBRAMENTO', label: 'Desdobramento', icon: Gift, color: 'text-purple-400', bgColor: 'bg-purple-600/20' }
];

const AddInvestmentModal: React.FC<AddInvestmentModalProps> = ({
                                                                 isOpen,
                                                                 onClose,
                                                                 onSuccess,
                                                                 portfolios
                                                               }) => {
  const [formData, setFormData] = useState({
    ticker: '',
    date: new Date().toISOString().split('T')[0],
    tipo: 'COMPRA' as OperationType,
    quantidade: 0,
    valor_unitario: 0,
    valor_total_provento: 0,
    observacoes: ''
  });

  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});

  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden';
      if (portfolios.length > 0 && !formData.ticker) {
        setFormData(prev => ({ ...prev, ticker: portfolios[0].ticker }));
      }
    } else {
      document.body.style.overflow = 'auto';
    }
    return () => { document.body.style.overflow = 'auto'; };
  }, [isOpen, portfolios]);

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!formData.ticker) {
      newErrors.ticker = 'Selecione um ativo';
    }

    if (formData.tipo === 'COMPRA' || formData.tipo === 'VENDA' || formData.tipo === 'DESDOBRAMENTO') {
      if (formData.quantidade <= 0) {
        newErrors.quantidade = 'Quantidade deve ser maior que zero';
      }
      if ((formData.tipo === 'COMPRA' || formData.tipo === 'VENDA') && formData.valor_unitario <= 0) {
        newErrors.valor_unitario = 'Valor unitário deve ser maior que zero';
      }
    }

    if ((formData.tipo === 'DIVIDENDO' || formData.tipo === 'JUROS') && formData.valor_total_provento <= 0) {
      newErrors.valor_total_provento = 'Valor deve ser maior que zero';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    const isNumber = ['quantidade', 'valor_unitario', 'valor_total_provento'].includes(name);
    setFormData(prev => ({ ...prev, [name]: isNumber ? parseFloat(value) || 0 : value }));

    // Limpar erro do campo quando o usuário começar a digitar
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }));
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) {
      toast.error('Por favor, corrija os erros no formulário');
      return;
    }

    setLoading(true);

    try {
      const payload = {
        ticker: formData.ticker.toUpperCase(),
        date: formData.date,
        compra: formData.tipo === 'COMPRA' || formData.tipo === 'DESDOBRAMENTO' ? formData.quantidade : 0,
        venda: formData.tipo === 'VENDA' ? formData.quantidade : 0,
        valor_unitario: formData.tipo === 'COMPRA' || formData.tipo === 'VENDA' ? formData.valor_unitario : 0,
        dividendos: formData.tipo === 'DIVIDENDO' ? formData.valor_total_provento : 0,
        juros: formData.tipo === 'JUROS' ? formData.valor_total_provento : 0,
        observacoes: formData.observacoes,
        impostos: 0
      };

      await investmentService.create(payload);
      onSuccess();
      resetFormAndClose();
      toast.success('Operação adicionada com sucesso!');
    } catch (error) {
      console.error('Erro ao adicionar operação:', error);
      toast.error('Erro ao adicionar operação. Verifique os dados.');
    } finally {
      setLoading(false);
    }
  };

  const resetFormAndClose = () => {
    setFormData({
      ticker: '',
      date: new Date().toISOString().split('T')[0],
      tipo: 'COMPRA',
      quantidade: 0,
      valor_unitario: 0,
      valor_total_provento: 0,
      observacoes: ''
    });
    setErrors({});
    onClose();
  };

  const getCurrentOperation = () => {
    return operationTypes.find(op => op.value === formData.tipo);
  };

  const currentOp = getCurrentOperation();

  if (!isOpen) return null;

  return (
      <div className="fixed inset-0 bg-slate-900/80 backdrop-blur-sm flex items-center justify-center z-50 p-4">
        <motion.div
            initial={{ opacity: 0, scale: 0.95, y: 20 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.95, y: 20 }}
            className="bg-gradient-to-br from-slate-800 to-slate-900 rounded-2xl max-w-lg w-full border border-slate-700/50 shadow-2xl backdrop-blur-xl"
        >
          {/* Header Aprimorado */}
          <div className="flex items-center justify-between p-6 border-b border-slate-700/50">
            <div className="flex items-center space-x-3">
              <div className={`p-3 rounded-xl ${currentOp?.bgColor || 'bg-blue-600/20'}`}>
                {React.createElement(currentOp?.icon || Plus, {
                  className: `h-6 w-6 ${currentOp?.color || 'text-blue-400'}`
                })}
              </div>
              <div>
                <h2 className="text-xl font-bold text-white">Nova Operação</h2>
                <p className="text-sm text-slate-400">Adicione uma nova transação ao seu portfólio</p>
              </div>
            </div>
            <button
                onClick={resetFormAndClose}
                className="text-slate-400 hover:text-white transition-colors p-2 hover:bg-slate-700/50 rounded-lg"
            >
              <X className="h-5 w-5" />
            </button>
          </div>

          {/* Formulário Melhorado */}
          <form onSubmit={handleSubmit} className="p-6 space-y-6">
            {/* Seletores Principais */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {/* Seletor de Ativo */}
              <div className="space-y-2">
                <label className="text-sm font-medium text-slate-300 flex items-center gap-2">
                  <Tag className="h-4 w-4 text-slate-400" />
                  Ativo
                </label>
                <div className="relative">
                  <select
                      name="ticker"
                      value={formData.ticker}
                      onChange={handleInputChange}
                      className={`w-full bg-slate-700/50 border rounded-xl px-4 py-3 text-white focus:outline-none focus:ring-2 transition-all appearance-none pr-10 ${
                          errors.ticker ? 'border-red-500 focus:ring-red-500' : 'border-slate-600 focus:border-blue-500 focus:ring-blue-500'
                      }`}
                      required
                  >
                    <option value="" disabled>Selecione um ativo</option>
                    {portfolios.map(p => (
                        <option key={p.ticker} value={p.ticker}>
                          {p.ticker} - {p.metadata?.nome?.substring(0, 30) || 'Nome não disponível'}
                        </option>
                    ))}
                  </select>
                  <ChevronDown className="absolute right-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-slate-400 pointer-events-none" />
                </div>
                {errors.ticker && (
                    <motion.p
                        initial={{ opacity: 0, y: -10 }}
                        animate={{ opacity: 1, y: 0 }}
                        className="text-red-400 text-xs flex items-center gap-1"
                    >
                      <AlertCircle className="h-3 w-3" />
                      {errors.ticker}
                    </motion.p>
                )}
              </div>

              {/* Seletor de Tipo */}
              <div className="space-y-2">
                <label className="text-sm font-medium text-slate-300 flex items-center gap-2">
                  <Hash className="h-4 w-4 text-slate-400" />
                  Tipo de Operação
                </label>
                <div className="relative">
                  <select
                      name="tipo"
                      value={formData.tipo}
                      onChange={handleInputChange}
                      className="w-full bg-slate-700/50 border border-slate-600 rounded-xl px-4 py-3 text-white focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500 transition-all appearance-none pr-10"
                  >
                    {operationTypes.map(op => (
                        <option key={op.value} value={op.value}>{op.label}</option>
                    ))}
                  </select>
                  <ChevronDown className="absolute right-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-slate-400 pointer-events-none" />
                </div>
              </div>
            </div>

            {/* Campos Condicionais com Animação */}
            <AnimatePresence mode="wait">
              {(formData.tipo === 'COMPRA' || formData.tipo === 'VENDA' || formData.tipo === 'DESDOBRAMENTO') && (
                  <motion.div
                      key="quantity-fields"
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: 'auto' }}
                      exit={{ opacity: 0, height: 0 }}
                      transition={{ duration: 0.3 }}
                      className="overflow-hidden"
                  >
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <label className="text-sm font-medium text-slate-300 flex items-center gap-2">
                          <Hash className="h-4 w-4 text-slate-400" />
                          Quantidade
                        </label>
                        <input
                            type="number"
                            name="quantidade"
                            value={formData.quantidade || ''}
                            onChange={handleInputChange}
                            min="0"
                            step="any"
                            placeholder="0"
                            className={`w-full bg-slate-700/50 border rounded-xl px-4 py-3 text-white focus:outline-none focus:ring-2 transition-all ${
                                errors.quantidade ? 'border-red-500 focus:ring-red-500' : 'border-slate-600 focus:border-blue-500 focus:ring-blue-500'
                            }`}
                        />
                        {errors.quantidade && (
                            <motion.p
                                initial={{ opacity: 0, y: -10 }}
                                animate={{ opacity: 1, y: 0 }}
                                className="text-red-400 text-xs flex items-center gap-1"
                            >
                              <AlertCircle className="h-3 w-3" />
                              {errors.quantidade}
                            </motion.p>
                        )}
                      </div>

                      {formData.tipo !== 'DESDOBRAMENTO' && (
                          <div className="space-y-2">
                            <label className="text-sm font-medium text-slate-300 flex items-center gap-2">
                              <DollarSign className="h-4 w-4 text-slate-400" />
                              Valor Unitário (R$)
                            </label>
                            <input
                                type="number"
                                name="valor_unitario"
                                value={formData.valor_unitario || ''}
                                onChange={handleInputChange}
                                min="0"
                                step="0.01"
                                placeholder="0,00"
                                className={`w-full bg-slate-700/50 border rounded-xl px-4 py-3 text-white focus:outline-none focus:ring-2 transition-all ${
                                    errors.valor_unitario ? 'border-red-500 focus:ring-red-500' : 'border-slate-600 focus:border-blue-500 focus:ring-blue-500'
                                }`}
                            />
                            {errors.valor_unitario && (
                                <motion.p
                                    initial={{ opacity: 0, y: -10 }}
                                    animate={{ opacity: 1, y: 0 }}
                                    className="text-red-400 text-xs flex items-center gap-1"
                                >
                                  <AlertCircle className="h-3 w-3" />
                                  {errors.valor_unitario}
                                </motion.p>
                            )}
                          </div>
                      )}
                    </div>
                  </motion.div>
              )}

              {(formData.tipo === 'DIVIDENDO' || formData.tipo === 'JUROS') && (
                  <motion.div
                      key="dividend-fields"
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: 'auto' }}
                      exit={{ opacity: 0, height: 0 }}
                      transition={{ duration: 0.3 }}
                      className="overflow-hidden"
                  >
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-slate-300 flex items-center gap-2">
                        <DollarSign className="h-4 w-4 text-slate-400" />
                        Valor Total Recebido (R$)
                      </label>
                      <input
                          type="number"
                          name="valor_total_provento"
                          value={formData.valor_total_provento || ''}
                          onChange={handleInputChange}
                          min="0"
                          step="0.01"
                          placeholder="0,00"
                          className={`w-full bg-slate-700/50 border rounded-xl px-4 py-3 text-white focus:outline-none focus:ring-2 transition-all ${
                              errors.valor_total_provento ? 'border-red-500 focus:ring-red-500' : 'border-slate-600 focus:border-blue-500 focus:ring-blue-500'
                          }`}
                      />
                      {errors.valor_total_provento && (
                          <motion.p
                              initial={{ opacity: 0, y: -10 }}
                              animate={{ opacity: 1, y: 0 }}
                              className="text-red-400 text-xs flex items-center gap-1"
                          >
                            <AlertCircle className="h-3 w-3" />
                            {errors.valor_total_provento}
                          </motion.p>
                      )}
                    </div>
                  </motion.div>
              )}
            </AnimatePresence>

            {/* Data */}
            <div className="space-y-2">
              <label className="text-sm font-medium text-slate-300 flex items-center gap-2">
                <Calendar className="h-4 w-4 text-slate-400" />
                Data da Operação
              </label>
              <input
                  type="date"
                  name="date"
                  value={formData.date}
                  onChange={handleInputChange}
                  className="w-full bg-slate-700/50 border border-slate-600 rounded-xl px-4 py-3 text-white focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500 transition-all"
                  required
              />
            </div>

            {/* Observações */}
            <div className="space-y-2">
              <label className="text-sm font-medium text-slate-300 flex items-center gap-2">
                <Tag className="h-4 w-4 text-slate-400" />
                Observações
              </label>
              <input
                  type="text"
                  name="observacoes"
                  value={formData.observacoes}
                  onChange={handleInputChange}
                  placeholder="Informações adicionais sobre a operação..."
                  className="w-full bg-slate-700/50 border border-slate-600 rounded-xl px-4 py-3 text-white focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500 transition-all"
              />
            </div>

            {/* Preview do Valor Total */}
            {((formData.tipo === 'COMPRA' || formData.tipo === 'VENDA') && formData.quantidade > 0 && formData.valor_unitario > 0) && (
                <motion.div
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="bg-slate-700/30 rounded-xl p-4 border border-slate-600/50"
                >
                  <div className="flex items-center justify-between">
                    <span className="text-slate-300 text-sm">Valor Total da Operação:</span>
                    <span className="text-white font-bold text-lg">
                  R$ {(formData.quantidade * formData.valor_unitario).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
                </span>
                  </div>
                </motion.div>
            )}

            {/* Footer com Botões Melhorados */}
            <div className="flex space-x-4 pt-4">
              <button
                  type="button"
                  onClick={resetFormAndClose}
                  className="flex-1 bg-slate-700 hover:bg-slate-600 text-white py-3 px-6 rounded-xl transition-all duration-200 font-medium"
                  disabled={loading}
              >
                Cancelar
              </button>
              <button
                  type="submit"
                  disabled={loading}
                  className="flex-1 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white py-3 px-6 rounded-xl transition-all duration-200 font-medium disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
              >
                {loading ? (
                    <>
                      <Loader2 className="h-4 w-4 animate-spin" />
                      Salvando...
                    </>
                ) : (
                    <>
                      <CheckCircle className="h-4 w-4" />
                      Adicionar Operação
                    </>
                )}
              </button>
            </div>
          </form>
        </motion.div>
      </div>
  );
};

export default AddInvestmentModal;

# ==============================================================================
# ARQUIVO: src\components\AdvancedDashboard.tsx
# ==============================================================================

import React, { useMemo } from 'react';
import { motion } from 'framer-motion';
import { 
  PieChart, 
  Pie, 
  Cell,
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  ResponsiveContainer,
  Legend
} from 'recharts';
import { 
  Building2, 
  Globe, 
  TrendingUp, 
  DollarSign, 
  Target,
  Shield,
  Activity,
  Award,
  Zap,
  PieChart as PieChartIcon
} from 'lucide-react';
import { Portfolio } from '../types/investment';

interface AdvancedDashboardProps {
  portfolios: Portfolio[];
}

const AdvancedDashboard: React.FC<AdvancedDashboardProps> = ({ portfolios }) => {
  const analysis = useMemo(() => {
    const totalInvestido = portfolios.reduce((sum, p) => sum + Math.abs(p.totalInvested), 0);
    const valorMercado = portfolios.reduce((sum, p) => sum + (p.marketValue || 0), 0);
    const totalProventos = portfolios.reduce((sum, p) => sum + p.totalDividends + p.totalJuros, 0);
    
    // Análise por tipo
    const porTipo = portfolios.reduce((acc, p) => {
      const tipo = p.metadata?.tipo || 'Outros';
      if (!acc[tipo]) {
        acc[tipo] = {
          tipo,
          valor_investido: 0, 
          percentual: 0,
          dy_medio: 0,
          renda_mensal: 0,
          ativos: []
        };
      }
      acc[tipo].valor_investido += Math.abs(p.totalInvested);
      acc[tipo].renda_mensal += (p.totalDividends + p.totalJuros) / 12;
      acc[tipo].ativos.push(p.ticker);
      return acc;
    }, {} as any);

    // Calcular percentuais e DY médio
    Object.keys(porTipo).forEach(tipo => {
      porTipo[tipo].percentual = (porTipo[tipo].valor_investido / totalInvestido) * 100;
      const ativosDoTipo = portfolios.filter(p => p.metadata?.tipo === tipo);
      porTipo[tipo].dy_medio = ativosDoTipo.length > 0 ? 
        ativosDoTipo.reduce((sum, p) => sum + p.totalYield, 0) / ativosDoTipo.length : 0;
    });

    // Análise por país
    const porPais = portfolios.reduce((acc, p) => {
      const pais = p.metadata?.pais || 'BRASIL';
      if (!acc[pais]) {
        acc[pais] = {
          pais,
          valor_investido: 0,
          percentual: 0,
          dy_medio: 0,
          moeda: p.metadata?.moeda || 'BRL',
          ativos: []
        };
      }
      acc[pais].valor_investido += Math.abs(p.totalInvested);
      acc[pais].ativos.push(p.ticker);
      return acc;
    }, {} as any);

    Object.keys(porPais).forEach(pais => {
      porPais[pais].percentual = (porPais[pais].valor_investido / totalInvestido) * 100;
      const ativosDoPais = portfolios.filter(p => (p.metadata?.pais || 'BRASIL') === pais);
      porPais[pais].dy_medio = ativosDoPais.length > 0 ? 
        ativosDoPais.reduce((sum, p) => sum + p.totalYield, 0) / ativosDoPais.length : 0;
    });

    // Análise por setor
    const porSetor = portfolios.reduce((acc, p) => {
      const setor = p.metadata?.setor || 'Outros';
      if (!acc[setor]) {
        acc[setor] = {
          setor,
          valor_investido: 0,
          percentual: 0,
          dy_medio: 0,
          ativos: []
        };
      }
      acc[setor].valor_investido += Math.abs(p.totalInvested);
      acc[setor].ativos.push(p.ticker);
      return acc;
    }, {} as any);

    Object.keys(porSetor).forEach(setor => {
      porSetor[setor].percentual = (porSetor[setor].valor_investido / totalInvestido) * 100;
      const ativosDoSetor = portfolios.filter(p => (p.metadata?.setor || 'Outros') === setor);
      porSetor[setor].dy_medio = ativosDoSetor.length > 0 ? 
        ativosDoSetor.reduce((sum, p) => sum + p.totalYield, 0) / ativosDoSetor.length : 0;
    });

    // Top performers
    const topPerformers = {
      maior_dy: [...portfolios].sort((a, b) => b.totalYield - a.totalYield).slice(0, 5),
      maior_rentabilidade: [...portfolios].sort((a, b) => (b.profitPercent || 0) - (a.profitPercent || 0)).slice(0, 5),
      maior_renda_mensal: [...portfolios].sort((a, b) => (b.totalDividends + b.totalJuros) - (a.totalDividends + a.totalJuros)).slice(0, 5),
      maior_crescimento: [...portfolios].sort((a, b) => (b.profit || 0) - (a.profit || 0)).slice(0, 5)
    };

    return {
      resumo_geral: {
        total_investido: totalInvestido,
        valor_mercado: valorMercado,
        lucro_prejuizo: valorMercado - totalInvestido,
        rentabilidade_total: totalInvestido > 0 ? ((valorMercado - totalInvestido) / totalInvestido) * 100 : 0,
        dy_medio: portfolios.reduce((sum, p) => sum + p.totalYield, 0) / portfolios.length,
        renda_mensal: totalProventos / 12,
        num_ativos: portfolios.length
      },
      por_tipo: porTipo,
      por_pais: porPais,
      por_setor: porSetor,
      top_performers: topPerformers
    };
  }, [portfolios]);

  const pieColors = [
    '#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', 
    '#06b6d4', '#84cc16', '#f97316', '#ec4899', '#6366f1'
  ];

  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(value);
  };

  const pieDataTipo = Object.values(analysis.por_tipo).map((item: any, index) => ({
    name: item.tipo,
    value: item.valor_investido,
    percentage: item.percentual,
    color: pieColors[index % pieColors.length]
  }));

  const pieDataPais = Object.values(analysis.por_pais).map((item: any, index) => ({
    name: item.pais,
    value: item.valor_investido,
    percentage: item.percentual,
    color: pieColors[index % pieColors.length]
  }));

  const barDataSetor = Object.values(analysis.por_setor).map((item: any) => ({
    name: item.setor,
    valor: item.valor_investido,
    dy: item.dy_medio,
    percentage: item.percentual
  }));

  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      return (
        <div className="bg-black/80 backdrop-blur-sm border border-white/20 rounded-xl p-4 shadow-2xl">
          <p className="text-white font-medium">{`${label}`}</p>
          {payload.map((entry: any, index: number) => (
            <p key={index} className="text-sm" style={{ color: entry.color }}>
              {`${entry.name}: ${entry.name === 'valor' ? formatCurrency(entry.value) : `${entry.value.toFixed(2)}%`}`}
            </p>
          ))}
        </div>
      );
    }
    return null;
  };

  const renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, value, name }: any) => {
    const RADIAN = Math.PI / 180;
    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;
    const x = cx + (radius + 30) * Math.cos(-midAngle * RADIAN);
    const y = cy + (radius + 15) * Math.sin(-midAngle * RADIAN);

    return (
      <text 
        x={x} 
        y={y} 
        fill="white" 
        textAnchor={x > cx ? 'start' : 'end'} 
        dominantBaseline="central"
        className="text-sm font-medium fill-white"
        style={{ filter: 'drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.5))' }}
      >
        {`${name.substring(0, 10)}${name.length > 10 ? '...' : ''} ${value > 0 ? ((value / analysis.resumo_geral.total_investido) * 100).toFixed(0) : 0}%`}
      </text>
    );
  };

  return (
    <div className="space-y-8">
      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        {[
          {
            title: 'Total Investido',
            value: formatCurrency(analysis.resumo_geral.total_investido),
            icon: DollarSign,
            gradient: 'from-blue-500 to-blue-600',
            change: '+12.5%',
            changeType: 'positive'
          },
          {
            title: 'Rentabilidade',
            value: `${analysis.resumo_geral.rentabilidade_total.toFixed(2)}%`,
            icon: TrendingUp,
            gradient: 'from-green-500 to-green-600',
            change: '+8.3%',
            changeType: 'positive'
          },
          {
            title: 'DY Médio',
            value: `${analysis.resumo_geral.dy_medio.toFixed(2)}%`,
            icon: Target,
            gradient: 'from-purple-500 to-purple-600',
            change: '+2.1%',
            changeType: 'positive'
          },
          {
            title: 'Renda Mensal',
            value: formatCurrency(analysis.resumo_geral.renda_mensal),
            icon: Activity,
            gradient: 'from-orange-500 to-orange-600',
            change: '+15.7%',
            changeType: 'positive'
          }
        ].map((metric, index) => (
          <motion.div
            key={metric.title}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: index * 0.1 }}
            className="group relative overflow-hidden rounded-2xl"
          >
            <div className={`absolute inset-0 bg-gradient-to-br ${metric.gradient} opacity-10 group-hover:opacity-20 transition-all duration-500`} />
            
            <div className="relative glass border border-white/10 group-hover:border-white/20 rounded-2xl p-6 transition-all duration-500">
              <div className="flex items-center justify-between mb-4">
                <div className={`p-3 rounded-xl bg-gradient-to-br ${metric.gradient} opacity-20`}>
                  <metric.icon className="w-6 h-6 text-white" />
                </div>
                <div className={`text-xs px-2 py-1 rounded-full ${
                  metric.changeType === 'positive' 
                    ? 'bg-green-500/20 text-green-400' 
                    : 'bg-red-500/20 text-red-400'
                }`}>
                  {metric.change}
                </div>
              </div>
              
              <div className="text-sm text-neutral-400 mb-1">{metric.title}</div>
              <div className="text-2xl font-bold text-white">{metric.value}</div>
            </div>
          </motion.div>
        ))}
      </div>

      {/* Charts Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Distribuição por Tipo */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.4 }}
          className="group relative overflow-hidden rounded-2xl"
        >
          <div className="absolute inset-0 bg-gradient-to-br from-blue-500/10 to-purple-500/10" />
          
          <div className="relative glass border border-white/10 group-hover:border-white/20 rounded-2xl p-6 transition-all duration-500">
            <div className="flex items-center space-x-3 mb-6">
              <div className="p-2 rounded-lg bg-blue-500/20">
                <PieChartIcon className="w-5 h-5 text-blue-400" />
              </div>
              <h3 className="text-xl font-semibold text-white">Distribuição por Tipo</h3>
            </div>
            
            <div className="h-80">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={pieDataTipo}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    label={renderCustomizedLabel}
                    outerRadius={100}
                    fill="#8884d8"
                    dataKey="value"
                  >
                    {pieDataTipo.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip content={<CustomTooltip />} />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </div>
        </motion.div>

        {/* Distribuição por País */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.5 }}
          className="group relative overflow-hidden rounded-2xl"
        >
          <div className="absolute inset-0 bg-gradient-to-br from-green-500/10 to-blue-500/10" />
          
          <div className="relative glass border border-white/10 group-hover:border-white/20 rounded-2xl p-6 transition-all duration-500">
            <div className="flex items-center space-x-3 mb-6">
              <div className="p-2 rounded-lg bg-green-500/20">
                <Globe className="w-5 h-5 text-green-400" />
              </div>
              <h3 className="text-xl font-semibold text-white">Distribuição por País</h3>
            </div>
            
            <div className="h-80">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={pieDataPais}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    label={renderCustomizedLabel}
                    outerRadius={100}
                    fill="#8884d8"
                    dataKey="value"
                  >
                    {pieDataPais.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip content={<CustomTooltip />} />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </div>
        </motion.div>
      </div>

      {/* Análise por Setor */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.6 }}
        className="group relative overflow-hidden rounded-2xl"
      >
        <div className="absolute inset-0 bg-gradient-to-br from-purple-500/10 to-orange-500/10" />
        
        <div className="relative glass border border-white/10 group-hover:border-white/20 rounded-2xl p-6 transition-all duration-500">
          <div className="flex items-center space-x-3 mb-6">
            <div className="p-2 rounded-lg bg-purple-500/20">
              <Shield className="w-5 h-5 text-purple-400" />
            </div>
            <h3 className="text-xl font-semibold text-white">Análise por Setor</h3>
          </div>
          
          <div className="h-96">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={barDataSetor}>
                <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                <XAxis 
                  dataKey="name" 
                  stroke="#9ca3af"
                  fontSize={12}
                  tick={{ fill: '#9ca3af' }}
                />
                <YAxis 
                  stroke="#9ca3af"
                  fontSize={12}
                  tick={{ fill: '#9ca3af' }}
                />
                <Tooltip content={<CustomTooltip />} />
                <Bar 
                  dataKey="valor" 
                  fill="#3b82f6"
                  radius={[4, 4, 0, 0]}
                />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>
      </motion.div>

      {/* Top Performers */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.7 }}
          className="group relative overflow-hidden rounded-2xl"
        >
          <div className="absolute inset-0 bg-gradient-to-br from-yellow-500/10 to-orange-500/10" />
          
          <div className="relative glass border border-white/10 group-hover:border-white/20 rounded-2xl p-6 transition-all duration-500">
            <div className="flex items-center space-x-3 mb-6">
              <div className="p-2 rounded-lg bg-yellow-500/20">
                <Award className="w-5 h-5 text-yellow-400" />
              </div>
              <h3 className="text-xl font-semibold text-white">Top 5 - Dividend Yield</h3>
            </div>
            
            <div className="space-y-4">
              {analysis.top_performers.maior_dy.map((portfolio, index) => (
                <div key={portfolio.ticker} className="flex items-center justify-between p-4 bg-white/5 rounded-xl hover:bg-white/10 transition-all duration-300">
                  <div className="flex items-center space-x-3">
                    <div className="text-yellow-400 font-bold text-lg">#{index + 1}</div>
                    <div>
                      <div className="font-semibold text-white">{portfolio.ticker}</div>
                      <div className="text-sm text-neutral-400 truncate max-w-[200px]">{portfolio.metadata?.nome || portfolio.ticker}</div>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="font-bold text-green-400 text-lg">{portfolio.totalYield.toFixed(2)}%</div>
                    <div className="text-sm text-neutral-400">{formatCurrency(Math.abs(portfolio.totalInvested))}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.8 }}
          className="group relative overflow-hidden rounded-2xl"
        >
          <div className="absolute inset-0 bg-gradient-to-br from-green-500/10 to-blue-500/10" />
          
          <div className="relative glass border border-white/10 group-hover:border-white/20 rounded-2xl p-6 transition-all duration-500">
            <div className="flex items-center space-x-3 mb-6">
              <div className="p-2 rounded-lg bg-green-500/20">
                <TrendingUp className="w-5 h-5 text-green-400" />
              </div>
              <h3 className="text-xl font-semibold text-white">Top 5 - Rentabilidade</h3>
            </div>
            
            <div className="space-y-4">
              {analysis.top_performers.maior_rentabilidade.map((portfolio, index) => (
                <div key={portfolio.ticker} className="flex items-center justify-between p-4 bg-white/5 rounded-xl hover:bg-white/10 transition-all duration-300">
                  <div className="flex items-center space-x-3">
                    <div className="text-green-400 font-bold text-lg">#{index + 1}</div>
                    <div>
                      <div className="font-semibold text-white">{portfolio.ticker}</div>
                      <div className="text-sm text-neutral-400 truncate max-w-[200px]">{portfolio.metadata?.nome || portfolio.ticker}</div>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className={`font-bold text-lg ${(portfolio.profitPercent || 0) >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                      {(portfolio.profitPercent || 0).toFixed(2)}%
                    </div>
                    <div className="text-sm text-neutral-400">{formatCurrency(portfolio.profit || 0)}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </motion.div>
      </div>
    </div>
  );
};

export default AdvancedDashboard;

# ==============================================================================
# ARQUIVO: src\components\AdvancedPieChart.tsx
# ==============================================================================

import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { 
  PieChart, Pie, Cell, Sector, 
  ResponsiveContainer, Tooltip, 
  Legend, LabelList
} from 'recharts';
import { PieChartData, ChartTooltipProps } from '../types/investment';

interface AdvancedPieChartProps {
  data: PieChartData[];
  title: string;
  icon: React.ReactNode;
  formatValue?: (value: number) => string;
  height?: number;
  animate?: boolean;
  exploded?: boolean;
  gradients?: boolean;
  is3d?: boolean;
}

const RADIAN = Math.PI / 180;

const AdvancedPieChart: React.FC<AdvancedPieChartProps> = ({ 
  data, 
  title, 
  icon, 
  formatValue = (value) => `R$ ${value.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`, 
  height = 400,
  animate = true,
  exploded = true,
  gradients = true,
  is3d = true
}) => {
  const [activeIndex, setActiveIndex] = useState(-1);
  const [hoverDelayTimeout, setHoverDelayTimeout] = useState<NodeJS.Timeout | null>(null); 
  const [animationComplete, setAnimationComplete] = useState(false);

  useEffect(() => {
    // After initial animation, set flag to true
    const timer = setTimeout(() => {
      setAnimationComplete(true);
    }, 1500); // Match with animation duration
    
    return () => clearTimeout(timer);
  }, []);

  const onPieEnter = (_: any, index: number) => {
    if (hoverDelayTimeout) {
      clearTimeout(hoverDelayTimeout);
    }
    
    // Small delay to prevent flickering on hover
    const timeout = setTimeout(() => {
      setActiveIndex(index);
    }, 50);
    
    setHoverDelayTimeout(timeout);
  };
  
  const onPieLeave = () => {
    if (hoverDelayTimeout) {
      clearTimeout(hoverDelayTimeout);
    }
    
    const timeout = setTimeout(() => {
      setActiveIndex(-1);
    }, 50);
    
    setHoverDelayTimeout(timeout);
  };

  const renderActiveShape = (props: any) => {
    const { 
      cx, cy, innerRadius, outerRadius, startAngle, endAngle, 
      fill, payload, value, percentage
    } = props;

    // Only apply explode effect if requested and animation is complete
    const explosion = exploded && animationComplete ? 10 : 0;
    
    return (
      <g>
        <Sector
          cx={cx}
          cy={cy}
          innerRadius={innerRadius}
          outerRadius={outerRadius + explosion}
          startAngle={startAngle}
          endAngle={endAngle}
          fill={fill}
          stroke={fill}
          strokeWidth={1}
          style={{ filter: is3d ? 'drop-shadow(0px 3px 3px rgba(0, 0, 0, 0.3))' : 'none' }}
        />
        {/* Outer arc for active segment */}
        {animationComplete && (
          <Sector
            cx={cx}
            cy={cy}
            startAngle={startAngle}
            endAngle={endAngle}
            innerRadius={outerRadius + explosion + 2}
            outerRadius={outerRadius + explosion + 4}
            fill={fill}
            opacity={0.4}
          />
        )}

        {/* Label for active segment */}
        <text 
          x={cx} 
          y={cy - 10} 
          textAnchor="middle" 
          fill="#ffffff" 
          fontSize={16}
          fontWeight="bold"
        >
          {payload.name}
        </text>
        <text 
          x={cx} 
          y={cy + 10} 
          textAnchor="middle" 
          fill="#94a3b8"
          fontSize={14} 
        >
          {percentage.toFixed(1)}%
        </text>
        <text 
          x={cx} 
          y={cy + 30} 
          textAnchor="middle" 
          fill="#64748b"
          fontSize={12}
        >
          {formatValue(value)}
        </text>
      </g>
    );
  };

  const CustomTooltip = ({ active, payload }: ChartTooltipProps) => {
    if (active && payload && payload.length) {
      const data = payload[0]?.payload || {};
      return (
        <div className="bg-slate-800/95 backdrop-blur-lg border border-slate-600/50 rounded-xl p-4 shadow-2xl">
          <div className="flex items-center space-x-2 mb-2">
            <div 
              className="w-3 h-3 rounded-full"
              style={{ backgroundColor: data?.color || '#3b82f6' }}
            />
            <span className="text-white font-semibold">{data?.name || 'N/A'}</span>
          </div>
          <div className="space-y-1 text-sm">
            <div className="text-slate-300">Valor: <span className="text-white">{formatValue(data?.value || 0)}</span></div>
            <div className="text-slate-300">Percentual: <span className="text-white">{(data?.percentage || 0).toFixed(1)}%</span></div>
          </div>
        </div>
      );
    }
    return null;
  };

  const CustomLegend = (props: any) => {
    const { payload } = props;
    return (
      <div className="flex flex-wrap justify-center gap-2 mt-4">
        {payload.map((entry: any, index: number) => (
          <motion.div
            key={`legend-${entry.value}`}
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.05 + 0.3 }}
            className={`flex items-center space-x-1.5 px-3 py-2 rounded-full 
              ${activeIndex === index ? 'bg-slate-700 ring-2 ring-slate-500' : 'bg-slate-800'} 
              hover:bg-slate-700 transition-all cursor-pointer`}
            onMouseEnter={() => onPieEnter(null, index)}
            onMouseLeave={onPieLeave}
          >
            <div 
              className="w-2.5 h-2.5 rounded-full"
              style={{ 
                backgroundColor: entry.color,
                boxShadow: activeIndex === index ? `0 0 8px ${entry.color}` : 'none' 
              }}
            />
            <span className="text-sm text-slate-300">{entry?.value || ''}</span>
            <span className="text-sm text-slate-400">{data[index]?.percentage?.toFixed(0) || 0}%</span>
          </motion.div>
        ))}
      </div>
    );
  };

  // No data state
  if (!data || data.length === 0) {
    return (
      <div className="bg-slate-800/40 backdrop-blur-sm rounded-xl p-6 border border-slate-700/50 shadow-lg h-[400px] flex items-center justify-center animate-pulse">
        <div className="text-center">
          <div className="text-slate-400 mb-2">Sem dados disponíveis</div>
          <div className="text-slate-500 text-sm">Não há informações suficientes para exibir este gráfico</div>
        </div>
      </div>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.6 }}
      className="bg-slate-800/70 backdrop-blur-sm rounded-xl p-6 border border-slate-700/50 shadow-xl hover:border-slate-600/70 transition-colors"
    >
      <div className="flex items-center space-x-3 mb-6">
        <div className="p-2 rounded-lg bg-blue-600/20 backdrop-blur-sm">
          {icon}
        </div>
        <h3 className="text-xl font-semibold text-white">{title}</h3>
      </div>
      
      <div style={{ height: height }}>
        <ResponsiveContainer width="100%" height="100%">
          <PieChart margin={{ top: 10, right: 30, left: 30, bottom: 10 }}>
            {gradients && (
              <defs>
                {data.map((entry, index) => (
                  <linearGradient key={`gradient-${index}`} id={`gradient-${index}`} x1="0" y1="0" x2="0" y2="1">
                    <stop offset="0%" stopColor={`${entry.color}`} stopOpacity={1} />
                    <stop offset="100%" stopColor={`${entry.color}`} stopOpacity={0.7} />
                  </linearGradient>
                ))}
                
                <filter id="glow" x="-20%" y="-20%" width="140%" height="140%">
                  <feGaussianBlur stdDeviation="3" result="blur" />
                  <feComposite in="SourceGraphic" in2="blur" operator="over" />
                </filter>
              </defs>
            )}
            
            <Pie
              data={data}
              cx="50%"
              cy="50%"
              labelLine={false}
              activeIndex={activeIndex}
              activeShape={renderActiveShape}
              innerRadius={is3d ? 60 : 0}
              outerRadius={120}
              paddingAngle={2}
              dataKey="value"
              onMouseEnter={onPieEnter}
              onMouseLeave={onPieLeave}
              animationDuration={1500}
              animationBegin={0}
              animationEasing="ease-out"
              isAnimationActive={animate}
            >
              {data.map((entry, index) => (
                <Cell 
                  key={`cell-${index}`}
                  fill={gradients ? `url(#gradient-${index})` : entry.color} 
                  stroke={entry.color}
                  strokeWidth={1}
                  style={{ filter: activeIndex === index ? 'url(#glow)' : 'none' }}
                />
              ))}
              
              {/* Display percentages on the chart */}
              <LabelList 
                dataKey="percentage" 
                position="inside" 
                fill="#ffffff"
                stroke="none"
                fontSize={14}
                fontWeight="bold"
                formatter={(value: number) => value ? `${value.toFixed(0)}%` : ''}
              />
            </Pie>
            
            <Tooltip content={<CustomTooltip />} />
            <Legend content={<CustomLegend />} />
          </PieChart>
        </ResponsiveContainer>
      </div>
      
      {/* Data display as fallback */}
      <div className="mt-4 grid grid-cols-2 md:grid-cols-3 gap-2 hidden md:grid">
        {data.slice(0, 6).map((entry, index) => (
          <motion.div 
            key={`data-${index}`}
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4 + (index * 0.1) }}
            className="bg-slate-900/50 rounded-lg p-2 text-sm border border-slate-800"
          >
            <div className="flex items-center gap-2">
              <div 
                className="w-3 h-3 rounded-full" 
                style={{ backgroundColor: entry.color }}
              />
              <div className="font-medium text-white">{entry.name}</div>
            </div>
            <div className="mt-1 flex justify-between">
              <span className="text-slate-400">{formatValue(entry.value)}</span>
              <span className="text-slate-300">{entry.percentage.toFixed(1)}%</span>
            </div>
          </motion.div>
        ))}
      </div>
    </motion.div>
  );
};

export default AdvancedPieChart;

# ==============================================================================
# ARQUIVO: src\components\AssetCard.tsx
# ==============================================================================

import React from 'react';
import { motion } from 'framer-motion';
import { TrendingUp, TrendingDown } from 'lucide-react';
import { Portfolio } from '../types/investment';

interface AssetCardProps {
  portfolio: Portfolio;
  onClick: () => void;
  isActive: boolean;
  index: number;
}

const AssetCard: React.FC<AssetCardProps> = ({ portfolio, onClick, isActive, index }) => {
  const {
    ticker, metadata, totalInvested, marketValue,
    profit, profitPercent, totalYield, currentPrice, priceChangePercent, moeda
  } = portfolio;

  const formatCurrency = (value: number | null | undefined) => {
    if (value === null || typeof value === 'undefined') return '--';
    // Todos os valores já estão em BRL após conversão no supabaseService
    return value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
  };

  const formatPercent = (value: number | null | undefined) => {
    if (value === null || typeof value === 'undefined') return '--%';
    return `${value >= 0 ? '+' : ''}${value.toFixed(2)}%`;
  };

  const getProfitColor = (value: number | null | undefined) => {
    if (value === null || typeof value === 'undefined') return 'text-slate-400';
    return value >= 0 ? 'text-green-400' : 'text-red-400';
  };

  const ProfitIcon = profit >= 0 ? TrendingUp : TrendingDown;

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3, delay: index * 0.05 }}
      whileHover={{ scale: 1.03, y: -5 }}
      onClick={onClick}
      className={`relative p-5 rounded-2xl border transition-all duration-300 cursor-pointer group ${
        isActive 
          ? 'bg-blue-600/20 border-blue-500' 
          : 'bg-slate-800/50 border-slate-700 hover:border-slate-600'
      }`}
    >
      <div className="flex items-start justify-between mb-4">
        <div>
          <div className="flex items-center space-x-3">
            <span className="text-xl font-bold text-blue-400">{ticker}</span>
            <span className="text-xs px-2 py-1 rounded-full bg-slate-700">
              {metadata?.pais === 'EUA' ? '🇺🇸' : '🇧🇷'}
            </span>
          </div>
          <h3 className="text-lg font-semibold text-white mt-1 truncate max-w-[180px]">
            {metadata?.nome || ticker}
          </h3>
        </div>
        <div className="text-right">
          <p className="text-xl font-mono font-bold text-white">
            {formatCurrency(currentPrice)}
          </p>
          <div className={`flex items-center justify-end space-x-1 text-sm ${getProfitColor(priceChangePercent)}`}>
            {priceChangePercent != null && (
              priceChangePercent >= 0 ? <TrendingUp size={14} /> : <TrendingDown size={14} />
            )}
            <span>{formatPercent(priceChangePercent)}</span>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-2 gap-4 mb-4 text-sm">
        <div>
          <div className="text-xs text-slate-400">Investido</div>
          <p className="font-semibold text-white">{formatCurrency(totalInvested)}</p>
        </div>
        <div>
          <div className="text-xs text-slate-400">Valor Atual</div>
          <p className="font-semibold text-white">{formatCurrency(marketValue)}</p>
        </div>
        <div>
          <div className="text-xs text-slate-400">Proventos</div>
          <p className="font-semibold text-white">
            {formatCurrency(portfolio.totalDividends + portfolio.totalJuros)}
          </p>
        </div>
        <div>
          <div className="text-xs text-slate-400">DY Acum.</div>
          <p className="font-semibold text-blue-400">{totalYield.toFixed(2)}%</p>
        </div>
      </div>

      <div className="border-t border-slate-700 pt-4">
        <div className="flex items-center justify-between">
          <span className="text-xs text-slate-400">Rentabilidade</span>
          <div className={`flex items-center space-x-2 ${getProfitColor(profit)}`}>
            <ProfitIcon className="h-4 w-4" />
            <div className="text-right">
              <p className="text-sm font-semibold">{formatPercent(profitPercent)}</p>
              <p className="text-xs">{formatCurrency(profit)}</p>
            </div>
          </div>
        </div>
      </div>

      {isActive && (
        <div className="absolute top-2 right-2 w-3 h-3 bg-blue-500 rounded-full animate-pulse"></div>
      )}
    </motion.div>
  );
};

export default AssetCard;


# ==============================================================================
# ARQUIVO: src\components\AssetDetails.tsx
# ==============================================================================

import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { 
  Building2, 
  Globe, 
  TrendingUp, 
  TrendingDown,
  Users, 
  DollarSign, 
  Target, 
  Info,
  ExternalLink,
  Activity,
  Eye,
  Calculator
} from 'lucide-react';
import { AssetMetadata } from '../types/investment';
import { marketApiService } from '../services/marketApi';

interface AssetDetailsProps {
  metadata: AssetMetadata;
  totalInvested: number;
  totalYield: number;
  currentPosition: number;
}

const AssetDetails: React.FC<AssetDetailsProps> = ({ 
  metadata, 
  totalInvested, 
  totalYield, 
  currentPosition 
}) => {
  const [marketData, setMarketData] = useState<any>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchMarketData = async () => {
      try {
        setLoading(true);
        const data = await marketApiService.getMarketData(metadata.ticker);
        setMarketData(data);
      } catch (error) {
        console.error('Erro ao buscar dados de mercado:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchMarketData();
    
    // Atualizar a cada 30 segundos
    const interval = setInterval(fetchMarketData, 30000);
    return () => clearInterval(interval);
  }, [metadata.ticker]);

  // 💰 CALCULAR VALORES REAIS
  const currentMarketValue = marketData ? currentPosition * marketData.price : 0;
  const totalProfit = currentMarketValue - totalInvested;
  const profitPercent = totalInvested > 0 ? (totalProfit / totalInvested) * 100 : 0;
  const isProfit = totalProfit >= 0;

  const formatCurrency = (value: number, currency = 'BRL') => {
    const symbol = currency === 'USD' ? '$' : 'R$';
    return `${symbol} ${Math.abs(value).toLocaleString('pt-BR', { 
      minimumFractionDigits: 2, 
      maximumFractionDigits: 2 
    })}`;
  };

  const formatPercent = (value: number) => {
    const sign = value >= 0 ? '+' : '';
    return `${sign}${value.toFixed(2)}%`;
  };

  const formatLargeNumber = (value: number) => {
    if (value >= 1000000000) {
      return `${(value / 1000000000).toFixed(1)}B`;
    } else if (value >= 1000000) {
      return `${(value / 1000000).toFixed(1)}M`;
    } else if (value >= 1000) {
      return `${(value / 1000).toFixed(1)}K`;
    }
    return value.toString();
  };

  const getTypeIcon = () => {
    switch (metadata.tipo) {
      case 'FII':
        return <Building2 className="w-5 h-5" />;
      case 'ACAO':
        return <TrendingUp className="w-5 h-5" />;
      case 'ETF':
      case 'REIT':
        return <Globe className="w-5 h-5" />;
      case 'STOCK':
        return <DollarSign className="w-5 h-5" />;
      default:
        return <Info className="w-5 h-5" />;
    }
  };

  const getCountryFlag = () => {
    switch (metadata.pais) {
      case 'BRASIL':
        return '🇧🇷';
      case 'EUA':
        return '🇺🇸';
      case 'GLOBAL':
        return '🌍';
      default:
        return '🏁';
    }
  };

  return (
    <div className="space-y-6">
      {/* 🎯 HEADER PRINCIPAL MELHORADO */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-gradient-to-r from-slate-800 to-slate-900 rounded-xl p-6 border border-slate-700"
      >
        {/* Linha 1: Ticker + Classificação + Preço Atual */}
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center space-x-4">
            <h1 className="text-3xl font-bold text-white">
              {metadata.ticker}
            </h1>
            <div className="flex items-center space-x-2">
              <span className="text-sm px-3 py-1 rounded-full bg-blue-600/20 text-blue-300 border border-blue-500/30">
                {getCountryFlag()} {metadata.pais}
              </span>
              <span className="text-sm px-3 py-1 rounded-full bg-purple-600/20 text-purple-300 border border-purple-500/30 flex items-center space-x-1">
                {getTypeIcon()}
                <span>{metadata.tipo}</span>
              </span>
              <span className="text-sm px-3 py-1 rounded-full bg-green-600/20 text-green-300 border border-green-500/30">
                {metadata.moeda}
              </span>
            </div>
          </div>

          {/* PREÇO ATUAL - GRANDE E DESTACADO */}
          <div className="text-right">
            {loading ? (
              <div className="flex items-center space-x-2">
                <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-400"></div>
                <span className="text-lg text-slate-400">Carregando...</span>
              </div>
            ) : marketData ? (
              <div>
                <div className="text-3xl font-bold text-white mb-1">
                  {formatCurrency(marketData.price, marketData.currency)}
                </div>
                <div className={`flex items-center justify-end space-x-1 text-sm ${
                  marketData.changePercent >= 0 ? 'text-green-400' : 'text-red-400'
                }`}>
                  {marketData.changePercent >= 0 ? (
                    <TrendingUp className="h-4 w-4" />
                  ) : (
                    <TrendingDown className="h-4 w-4" />
                  )}
                  <span>{formatPercent(marketData.changePercent)}</span>
                  <span>({formatCurrency(Math.abs(marketData.change), marketData.currency)})</span>
                </div>
              </div>
            ) : (
              <div className="text-xl text-slate-400">Preço indisponível</div>
            )}
          </div>
        </div>

        {/* Linha 2: Nome da Empresa */}
        <div className="mb-4">
          <h2 className="text-xl text-slate-300 font-medium">
            {metadata.nome}
          </h2>
          <p className="text-sm text-slate-400 mt-1">
            {metadata.setor} {metadata.subsetor && `• ${metadata.subsetor}`}
          </p>
        </div>

        {/* 💰 LINHA 3: ANÁLISE FINANCEIRA DETALHADA */}
        <div className="grid grid-cols-4 gap-6 pt-4 border-t border-slate-700">
          {/* Posição Atual */}
          <div className="text-center">
            <div className="flex items-center justify-center mb-2">
              <Eye className="h-5 w-5 text-blue-400 mr-2" />
              <span className="text-sm text-slate-400">Posição Atual</span>
            </div>
            <div className="text-lg font-bold text-white">
              {currentPosition.toLocaleString('pt-BR')} cotas
            </div>
            <div className="text-xs text-slate-500">
              Valor investido: {formatCurrency(totalInvested)}
            </div>
          </div>

          {/* Valor Total Atual */}
          <div className="text-center">
            <div className="flex items-center justify-center mb-2">
              <Calculator className="h-5 w-5 text-green-400 mr-2" />
              <span className="text-sm text-slate-400">Valor se Vender Tudo</span>
            </div>
            <div className="text-lg font-bold text-white">
              {formatCurrency(currentMarketValue, marketData?.currency)}
            </div>
            <div className="text-xs text-slate-500">
              {marketData ? `${currentPosition.toLocaleString('pt-BR')} × ${formatCurrency(marketData.price, marketData.currency)}` : 'Calculando...'}
            </div>
          </div>

          {/* Lucro/Prejuízo */}
          <div className="text-center">
            <div className="flex items-center justify-center mb-2">
              {isProfit ? (
                <TrendingUp className="h-5 w-5 text-green-400 mr-2" />
              ) : (
                <TrendingDown className="h-5 w-5 text-red-400 mr-2" />
              )}
              <span className="text-sm text-slate-400">
                {isProfit ? 'Lucro' : 'Prejuízo'}
              </span>
            </div>
            <div className={`text-lg font-bold ${isProfit ? 'text-green-400' : 'text-red-400'}`}>
              {isProfit ? '+' : '-'}{formatCurrency(Math.abs(totalProfit), marketData?.currency)}
            </div>
            <div className={`text-xs ${isProfit ? 'text-green-500' : 'text-red-500'}`}>
              {formatPercent(profitPercent)}
            </div>
          </div>

          {/* Dividend Yield */}
          <div className="text-center">
            <div className="flex items-center justify-center mb-2">
              <Target className="h-5 w-5 text-yellow-400 mr-2" />
              <span className="text-sm text-slate-400">DY Acumulado</span>
            </div>
            <div className="text-lg font-bold text-yellow-400">
              {totalYield.toFixed(2)}%
            </div>
            <div className="text-xs text-slate-500">
              Proventos recebidos
            </div>
          </div>
        </div>
      </motion.div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
        <div className="space-y-3">
          <h4 className="font-semibold text-white flex items-center gap-2">
            <Building2 className="w-4 h-4 text-blue-400" />
            Informações Básicas
          </h4>
          <div className="space-y-2 text-sm">
            <div className="flex justify-between">
              <span className="text-slate-400">Setor:</span>
              <span className="text-white">{metadata.setor}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-slate-400">Subsetor:</span>
              <span className="text-white">{metadata.subsetor}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-slate-400">Segmento:</span>
              <span className="text-white">{metadata.segmento}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-slate-400">Liquidez:</span>
              <span className={`${
                metadata.liquidez === 'ALTA' ? 'text-green-400' : 
                metadata.liquidez === 'MEDIA' ? 'text-yellow-400' : 'text-red-400'
              }`}>
                {metadata.liquidez}
              </span>
            </div>
          </div>
        </div>

        <div className="space-y-3">
          <h4 className="font-semibold text-white flex items-center gap-2">
            <Target className="w-4 h-4 text-green-400" />
            Dados de Mercado
          </h4>
          <div className="space-y-2 text-sm">
            <div className="flex justify-between">
              <span className="text-slate-400">Benchmark:</span>
              <span className="text-white">{metadata.benchmark}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-slate-400">ISIN:</span>
              <span className="text-white font-mono text-xs">{metadata.isin}</span>
            </div>
            {metadata.cnpj && (
              <div className="flex justify-between">
                <span className="text-slate-400">CNPJ:</span>
                <span className="text-white font-mono text-xs">{metadata.cnpj}</span>
              </div>
            )}
            {metadata.gestora && (
              <div className="flex justify-between">
                <span className="text-slate-400">Gestora:</span>
                <span className="text-white">{metadata.gestora}</span>
              </div>
            )}
          </div>
        </div>

        <div className="space-y-3">
          <h4 className="font-semibold text-white flex items-center gap-2">
            <Activity className="w-4 h-4 text-purple-400" />
            Sua Posição
          </h4>
          <div className="space-y-2 text-sm">
            <div className="flex justify-between">
              <span className="text-slate-400">Investido:</span>
              <span className="text-white font-semibold">{formatCurrency(Math.abs(totalInvested))}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-slate-400">DY Atual:</span>
              <span className={`font-semibold ${
                totalYield >= 8 ? 'text-green-400' : 
                totalYield >= 5 ? 'text-yellow-400' : 'text-red-400'
              }`}>
                {totalYield.toFixed(2)}%
              </span>
            </div>
          </div>
        </div>
      </div>

      {/* Informações Específicas por Tipo */}
      {metadata.fundo_imobiliario && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.2 }}
          className="bg-slate-700 rounded-lg p-4"
        >
          <h4 className="font-semibold text-white mb-3 flex items-center gap-2">
            <Building2 className="w-4 h-4 text-blue-400" />
            Informações do FII
          </h4>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 text-sm">
            <div>
              <span className="text-slate-400">Tipo FII:</span>
              <div className="text-white font-semibold">{metadata.fundo_imobiliario.tipo_fii}</div>
            </div>
            <div>
              <span className="text-slate-400">Patrimônio:</span>
              <div className="text-white font-semibold">
                {formatCurrency(metadata.fundo_imobiliario.patrimonio_liquido)}
              </div>
            </div>
            <div>
              <span className="text-slate-400">Cotistas:</span>
              <div className="text-white font-semibold">
                {formatLargeNumber(metadata.fundo_imobiliario.num_cotistas)}
              </div>
            </div>
            <div>
              <span className="text-slate-400">P/VP:</span>
              <div className="text-white font-semibold">
                {metadata.fundo_imobiliario.p_vp.toFixed(2)}
              </div>
            </div>
          </div>
        </motion.div>
      )}

      {metadata.acao && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.2 }}
          className="bg-slate-700 rounded-lg p-4"
        >
          <h4 className="font-semibold text-white mb-3 flex items-center gap-2">
            <TrendingUp className="w-4 h-4 text-green-400" />
            Indicadores Fundamentais
          </h4>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
            <div>
              <span className="text-slate-400">P/L:</span>
              <div className="text-white font-semibold">{metadata.acao.p_l.toFixed(2)}</div>
            </div>
            <div>
              <span className="text-slate-400">P/VP:</span>
              <div className="text-white font-semibold">{metadata.acao.p_vp.toFixed(2)}</div>
            </div>
            <div>
              <span className="text-slate-400">ROE:</span>
              <div className="text-white font-semibold">{metadata.acao.roe.toFixed(2)}%</div>
            </div>
            <div>
              <span className="text-slate-400">ROIC:</span>
              <div className="text-white font-semibold">{metadata.acao.roic.toFixed(2)}%</div>
            </div>
          </div>
        </motion.div>
      )}

      {metadata.etf && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.2 }}
          className="bg-slate-700 rounded-lg p-4"
        >
          <h4 className="font-semibold text-white mb-3 flex items-center gap-2">
            <Globe className="w-4 h-4 text-purple-400" />
            Informações do ETF
          </h4>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 text-sm">
            <div>
              <span className="text-slate-400">Taxa de Admin:</span>
              <div className="text-white font-semibold">{metadata.etf.expense_ratio.toFixed(2)}%</div>
            </div>
            <div>
              <span className="text-slate-400">Patrimônio:</span>
              <div className="text-white font-semibold">
                {formatCurrency(metadata.etf.aum)}
              </div>
            </div>
            <div>
              <span className="text-slate-400">Tracking Error:</span>
              <div className="text-white font-semibold">{metadata.etf.tracking_error.toFixed(2)}%</div>
            </div>
            <div>
              <span className="text-slate-400">Início:</span>
              <div className="text-white font-semibold">{metadata.etf.inception_date}</div>
            </div>
          </div>
        </motion.div>
      )}
    </div>
  );
};

export default AssetDetails;

# ==============================================================================
# ARQUIVO: src\components\DashboardTab.tsx
# ==============================================================================

import React from 'react';
import { motion } from 'framer-motion';
import AdvancedDashboard from './AdvancedDashboard';
import PortfolioSummary from './PortfolioSummary';
import { Portfolio } from '../types/investment';

interface DashboardTabProps {
  portfolios: Portfolio[];
}

const DashboardTab: React.FC<DashboardTabProps> = ({ portfolios }) => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="space-y-8"
    >
      {/* 🎯 HEADER */}
      <div className="text-center mb-8">
        <h1 className="text-4xl font-bold bg-gradient-to-r from-green-400 to-blue-400 bg-clip-text text-transparent mb-4">
          Dashboard Avançado
        </h1>
        <p className="text-slate-400 text-lg">
          Análises detalhadas e gráficos interativos do seu portfólio
        </p>
      </div>

      {/* 📊 Advanced Dashboard */}
      <AdvancedDashboard portfolios={portfolios} />
      
      {/* 📋 Portfolio Summary */}
      <PortfolioSummary portfolios={portfolios} />
    </motion.div>
  );
};

export default DashboardTab; 

# ==============================================================================
# ARQUIVO: src\components\EditInvestmentModal.tsx
# ==============================================================================

import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { X, Save, DollarSign, Calendar, Tag } from 'lucide-react';
import { Investment, investmentService, AssetMetadata } from '../services/supabaseService';
import toast from 'react-hot-toast';

interface EditInvestmentModalProps {
  isOpen: boolean;
  onClose: () => void;
  investment: Investment | null;
  metadata: AssetMetadata | null;
  onSuccess: () => void;
}

const EditInvestmentModal: React.FC<EditInvestmentModalProps> = ({
  isOpen,
  onClose,
  investment,
  metadata,
  onSuccess
}) => {
  const [formData, setFormData] = useState({
    data: '',
    quantidade_compra: 0,
    quantidade_venda: 0,
    valor_unitario: 0,
    dividendos: 0,
    juros: 0,
    impostos: 0,
    observacoes: ''
  });
  const [loading, setLoading] = useState(false);
  
  useEffect(() => {
    if (isOpen && investment) {
      setFormData({
        data: investment.data,
        quantidade_compra: investment.tipo === 'COMPRA' ? investment.quantidade || 0 : 0,
        quantidade_venda: investment.tipo === 'VENDA' ? investment.quantidade || 0 : 0,
        valor_unitario: investment.valor_unitario || 0,
        dividendos: investment.dividendos || 0,
        juros: investment.juros || 0,
        impostos: investment.impostos || 0,
        observacoes: investment.observacoes || ''
      });
    }
    
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'auto';
    }
    
    return () => {
      document.body.style.overflow = 'auto';
    };
  }, [isOpen, investment]);
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!investment?.id) {
      toast.error('Dados inválidos para edição');
      return;
    }
    
    setLoading(true);

    try {
      const quantidade = formData.quantidade_compra || formData.quantidade_venda;
      const tipo = formData.quantidade_compra > 0 ? 'COMPRA' : 
                   formData.quantidade_venda > 0 ? 'VENDA' : 
                   formData.dividendos > 0 ? 'DIVIDENDO' :
                   formData.juros > 0 ? 'JUROS' : investment.tipo;

      await investmentService.update(investment.id, {
        data: formData.data,
        tipo: tipo,
        quantidade: quantidade,
        valor_unitario: formData.valor_unitario,
        dividendos: formData.dividendos,
        juros: formData.juros,
        impostos: formData.impostos,
        observacoes: formData.observacoes
      });

      onSuccess();
      onClose();
      toast.success('Operação atualizada com sucesso!');
    } catch (error) {
      console.error('Erro ao atualizar operação:', error);
      toast.error('Erro ao atualizar operação');
    } finally {
      setLoading(false);
    }
  };
  
  if (!isOpen || !investment) return null;
  
  return (
    <div className="fixed inset-0 bg-slate-900/80 backdrop-blur-sm flex items-center justify-center z-50 p-4">
      <motion.div
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        exit={{ opacity: 0, scale: 0.95 }}
        className="bg-slate-800 rounded-xl max-w-md w-full border border-slate-700 shadow-2xl"
      >
        {/* Header */}
        <div className="flex items-center justify-between p-5 border-b border-slate-700">
          <div className="flex items-center space-x-3">
            <div className="bg-blue-600/20 p-2 rounded-lg">
              <Save className="h-5 w-5 text-blue-400" />
            </div>
            <h2 className="text-lg font-semibold text-white">
              Editar Operação - {metadata?.ticker}
            </h2>
          </div>
          <button
            onClick={onClose}
            className="text-slate-400 hover:text-white transition-colors"
          >
            <X className="h-5 w-5" />
          </button>
        </div>
        
        {/* Form */}
        <form onSubmit={handleSubmit} className="p-5 space-y-5">
          <div className="space-y-1">
            <label className="text-sm text-slate-300 flex items-center">
              <Calendar className="h-4 w-4 mr-1 text-slate-400" />
              Data
            </label>
            <input
              type="date"
              value={formData.data}
              onChange={(e) => setFormData({ ...formData, data: e.target.value })}
              className="w-full bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
              required
            />
          </div>
          
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-1">
              <label className="text-sm text-slate-300">Quantidade Compra</label>
              <input
                type="number"
                min="0"
                step="any"
                value={formData.quantidade_compra || ''}
                onChange={(e) => setFormData({ ...formData, quantidade_compra: parseFloat(e.target.value) || 0, quantidade_venda: 0 })}
                className="w-full bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
              />
            </div>
            <div className="space-y-1">
              <label className="text-sm text-slate-300">Quantidade Venda</label>
              <input
                type="number"
                min="0"
                step="any"
                value={formData.quantidade_venda || ''}
                onChange={(e) => setFormData({ ...formData, quantidade_venda: parseFloat(e.target.value) || 0, quantidade_compra: 0 })}
                className="w-full bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
              />
            </div>
          </div>
          
          <div className="space-y-1">
            <label className="text-sm text-slate-300 flex items-center">
              <DollarSign className="h-4 w-4 mr-1 text-slate-400" />
              Valor Unitário ({metadata?.moeda || 'BRL'})
            </label>
            <input
              type="number"
              step="0.01"
              min="0"
              value={formData.valor_unitario || ''}
              onChange={(e) => setFormData({ ...formData, valor_unitario: parseFloat(e.target.value) || 0 })}
              className="w-full bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
            />
          </div>
          
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-1">
              <label className="text-sm text-slate-300">Dividendos</label>
              <input
                type="number"
                step="0.01"
                min="0"
                value={formData.dividendos || ''}
                onChange={(e) => setFormData({ ...formData, dividendos: parseFloat(e.target.value) || 0 })}
                className="w-full bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
              />
            </div>
            <div className="space-y-1">
              <label className="text-sm text-slate-300">Juros</label>
              <input
                type="number"
                step="0.01"
                min="0"
                value={formData.juros || ''}
                onChange={(e) => setFormData({ ...formData, juros: parseFloat(e.target.value) || 0 })}
                className="w-full bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
              />
            </div>
          </div>
          
          <div className="space-y-1">
            <label className="text-sm text-slate-300 flex items-center">
              <Tag className="h-4 w-4 mr-1 text-slate-400" />
              Observações
            </label>
            <input
              type="text"
              value={formData.observacoes}
              onChange={(e) => setFormData({ ...formData, observacoes: e.target.value })}
              className="w-full bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
            />
          </div>
          
          {/* Footer */}
          <div className="flex space-x-4 pt-2">
            <button
              type="button"
              onClick={onClose}
              className="flex-1 bg-slate-700 hover:bg-slate-600 text-white py-2 px-4 rounded-lg transition-colors"
            >
              Cancelar
            </button>
            <button
              type="submit"
              disabled={loading}
              className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg transition-colors disabled:opacity-50 flex items-center justify-center"
            >
              {loading ? (
                <svg className="animate-spin h-5 w-5 mr-2" viewBox="0 0 24 24">
                  <circle 
                    className="opacity-25" 
                    cx="12" cy="12" r="10" 
                    stroke="currentColor" 
                    strokeWidth="4"
                    fill="none" 
                  />
                  <path 
                    className="opacity-75" 
                    fill="currentColor" 
                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                  />
                </svg>
              ) : (
                <Save className="h-5 w-5 mr-2" />
              )}
              <span>Salvar</span>
            </button>
          </div>
        </form>
      </motion.div>
    </div>
  );
};

export default EditInvestmentModal;

# ==============================================================================
# ARQUIVO: src\components\FilterControls.tsx
# ==============================================================================

import React from 'react';
import { motion } from 'framer-motion';
import { Search, Calendar } from 'lucide-react';

interface FilterControlsProps {
  searchTerm: string;
  onSearchChange: (term: string) => void;
  dateFilter: string;
  onDateFilterChange: (date: string) => void;
}

const FilterControls: React.FC<FilterControlsProps> = ({
  searchTerm,
  onSearchChange,
  dateFilter,
  onDateFilterChange
}) => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="flex flex-col sm:flex-row gap-4 mb-6"
    >
      <div className="relative flex-1">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4" />
        <input
          type="text"
          placeholder="Filtrar por ticker..."
          value={searchTerm}
          onChange={(e) => onSearchChange(e.target.value)}
          className="w-full pl-10 pr-4 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:border-blue-500"
        />
      </div>
      <div className="relative">
        <Calendar className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4" />
        <input
          type="date"
          value={dateFilter}
          onChange={(e) => onDateFilterChange(e.target.value)}
          className="pl-10 pr-4 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white focus:outline-none focus:border-blue-500"
        />
      </div>
    </motion.div>
  );
};

export default FilterControls;

# ==============================================================================
# ARQUIVO: src\components\Header.tsx
# ==============================================================================

import React from 'react';
import { Trophy, TrendingUp, PieChart, Settings } from 'lucide-react';
import VoiceCommandButton from './VoiceCommandButton';

interface HeaderProps {
  currentTab: string;
  onTabChange: (tab: string) => void;
}

const Header: React.FC<HeaderProps> = ({ currentTab, onTabChange }) => {
  const tabs = [
    { id: 'overview', label: 'Visão Geral', icon: PieChart },
    { id: 'dashboard', label: 'Dashboard', icon: TrendingUp },
    { id: 'portfolio', label: 'Portfólio', icon: Trophy },
    { id: 'settings', label: 'Configurações', icon: Settings },
  ];

  return (
    <header className="bg-gradient-to-r from-blue-900 via-blue-800 to-indigo-900 text-white shadow-xl">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center py-4">
          {/* Lado Esquerdo: Logo e Título */}
          <div className="flex items-center space-x-3">
            <div className="bg-gradient-to-br from-yellow-400 to-yellow-600 p-2 rounded-lg shadow-lg">
              <Trophy className="h-8 w-8 text-blue-900" />
            </div>
            <div>
              <h1 className="text-2xl font-bold bg-gradient-to-r from-yellow-300 to-yellow-100 bg-clip-text text-transparent">
                Erasmo Invest
              </h1>
              <p className="text-blue-200 text-sm">Sistema de Gestão de Investimentos</p>
            </div>
          </div>

          {/* Lado Direito: Botão de Comando de Voz */}
          <div className="flex items-center">
            <VoiceCommandButton />
          </div>
        </div>
        
        <nav className="flex space-x-1 pb-4">
          {tabs.map((tab) => {
            const Icon = tab.icon;
            return (
              <button
                key={tab.id}
                onClick={() => onTabChange(tab.id)}
                className={`flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-all duration-200 ${
                  currentTab === tab.id
                    ? 'bg-white bg-opacity-20 text-white shadow-lg'
                    : 'text-blue-200 hover:bg-white hover:bg-opacity-10 hover:text-white'
                }`}
              >
                <Icon className="h-4 w-4" />
                <span>{tab.label}</span>
              </button>
            );
          })}
        </nav>
      </div>
    </header>
  );
};

export default Header;

# ==============================================================================
# ARQUIVO: src\components\InvestmentTable.tsx
# ==============================================================================

import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Edit, Trash2, Save, X, Info } from 'lucide-react';
import toast from 'react-hot-toast';
import { investmentService } from '../services/supabaseService';
import AssetDetails from './AssetDetails';

interface InvestmentTableProps {
  activeTab: string;
  portfolio?: any;
  investments: any[];
  metadata: any;
  onDataChange: () => void;
  onEditInvestment?: (investment: any) => void;
  readOnly?: boolean;
}

const InvestmentTable: React.FC<InvestmentTableProps> = ({ 
  activeTab, 
  portfolio,
  investments, 
  metadata, 
  onDataChange,
  onEditInvestment,
  readOnly = false
}) => {
  const [editingIndex, setEditingIndex] = useState<number | null>(null);
  const [editData, setEditData] = useState<any>(null);

  const formatNumber = (num: number, decimals = 2) => {
    if (num === 0 || num === null || num === undefined) return '';
    return num.toFixed(decimals).replace('.', ',');
  };

  const formatDate = (dateStr: string) => {
    if (!dateStr) return '';
    const date = new Date(dateStr);
    return date.toLocaleDateString('pt-BR');
  };

  const calculateHistoricalDY = (data: any[], index: number): number => {
    const row = data[index];
    const totalDividends = row.dividendos + row.juros;
    
    if (totalDividends === 0) return 0;
    
    let accumulatedInvestment = 0;
    for (let i = 0; i <= index; i++) {
      const r = data[i];
      const valorTotal = r.tipo === 'COMPRA' ? r.valor_total : 
                        r.tipo === 'VENDA' ? -r.valor_total : 0;
      accumulatedInvestment += valorTotal;
    }
    
    if (accumulatedInvestment <= 0) return 0;
    
    return (totalDividends / Math.abs(accumulatedInvestment)) * 100;
  };

  const getDYClass = (value: number) => {
    if (value < 1) return 'text-green-400 bg-green-500/20';
    if (value < 2) return 'text-yellow-400 bg-yellow-500/20';
    return 'text-red-400 bg-red-500/20';
  };

  const handleEdit = (index: number) => {
    if (onEditInvestment) {
      onEditInvestment(investments[index]);
    } else {
      setEditData({ ...investments[index] });
      setEditingIndex(index);
    }
  };

  const handleSave = async () => {
    // Implementar lógica de salvamento real aqui se necessário
    toast.success('Alteração salva!');
    setEditingIndex(null);
    setEditData(null);
    onDataChange();
  };

  const handleCancel = () => {
    setEditingIndex(null);
    setEditData(null);
  };

  const handleDelete = async (index: number) => {
    const investment = investments[index];
    if (!investment?.id) {
      toast.error('ID do investimento não encontrado');
      return;
    }

    if (window.confirm(`Tem certeza que deseja deletar esta operação?\n\nTicker: ${investment.ticker}\nData: ${investment.data}\nTipo: ${investment.tipo}\nQuantidade: ${investment.quantidade}`)) {
      try {
        console.log('🗑️ Tentando deletar investimento:', investment.id);
        await investmentService.delete(investment.id);
        toast.success('✅ Operação deletada com sucesso!');
        onDataChange(); // Recarrega os dados
      } catch (error) {
        console.error('❌ Erro ao deletar:', error);
        toast.error('❌ Erro ao deletar operação: ' + (error as Error).message);
      }
    }
  };

  // 💰 CÁLCULOS 100% CORRETOS - CORRIGIDO
  const calculateTotals = () => {
    let totalInvestido = 0;
    let currentPosition = 0;
    let totalDividendos = 0;
    let totalJuros = 0;
    let totalImpostos = 0;
    
    investments.forEach(investment => {
      switch (investment.tipo) {
        case 'COMPRA':
          totalInvestido += investment.valor_total; // Soma o valor gasto
          currentPosition += investment.quantidade; // Soma as cotas
          break;
        case 'VENDA':
          // ✅ CORREÇÃO: Não diminuir totalInvestido (é valor GASTO, não recebido)
          currentPosition -= investment.quantidade; // Só remove as cotas vendidas
          break;
        case 'DIVIDENDO':
          totalDividendos += investment.dividendos;
          break;
        case 'JUROS':
          totalJuros += investment.juros;
          break;
        case 'DESDOBRAMENTO':
          currentPosition += investment.quantidade; // Adiciona cotas do desdobramento
          break;
      }
    });
    
    const totalProventos = totalDividendos + totalJuros;
    const precoMedio = currentPosition > 0 ? totalInvestido / currentPosition : 0;
    const dyGeral = totalInvestido > 0 ? (totalProventos / totalInvestido) * 100 : 0;
    
    return {
      totalInvestido,
      currentPosition,
      totalDividendos,
      totalJuros,
      totalImpostos,
      totalProventos,
      precoMedio,
      dyGeral,
      moeda: metadata?.moeda || 'BRL'
    };
  };

  const formatCurrency = (value: number, moeda: string) => {
    if (moeda === 'USD') {
      return `$${formatNumber(value)}`;
    } else {
      return `R$ ${formatNumber(value)}`;
    }
  };

  const data = investments;
  const totals = calculateTotals();
  const moeda = metadata?.moeda || 'BRL';

  // 🔍 DEBUG: Verificar cálculos corretos
  React.useEffect(() => {
    if (activeTab === 'BBAS3' && investments.length > 0) {
      console.log('🧮 === VERIFICAÇÃO CÁLCULOS BBAS3 ===');
      console.log('📊 Total registros:', investments.length);
      console.log('💰 Total Investido calculado:', totals.totalInvestido.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }));
      console.log('📈 Posição Atual:', totals.currentPosition.toLocaleString('pt-BR'), 'cotas');
      console.log('💎 Total Dividendos:', totals.totalDividendos.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }));
      console.log('💰 Total Juros:', totals.totalJuros.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }));
      console.log('📈 DY Geral:', totals.dyGeral.toFixed(2) + '%');
      console.log('💵 Preço Médio:', totals.precoMedio.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }));
    }
  }, [activeTab, investments, totals]);

  const renderHeader = () => {
    return (
      <div className="bg-slate-800 p-4 rounded-t-lg border-b border-slate-700 flex justify-between items-center">
        <div className="flex items-center space-x-3">
          <h2 className="text-xl font-bold text-white">{activeTab}</h2>
          <div className="flex items-center space-x-2">
            <span className="text-xl">
              {metadata?.pais === 'BRASIL' ? '🇧🇷' : metadata?.pais === 'EUA' ? '🇺🇸' : '🌍'}
            </span>
            <span className="px-2 py-1 rounded-full text-xs font-medium bg-blue-600/30 text-blue-300 border border-blue-500/30">
              {metadata?.tipo || 'ATIVO'}
            </span>
            <span className="px-2 py-1 rounded-full text-xs font-medium bg-purple-600/30 text-purple-300 border border-purple-500/30">
              {metadata?.moeda || 'BRL'}
            </span>

          </div>
        </div>
        <div className="flex flex-col text-right">
          <div className="text-sm text-slate-400">Posição Atual</div>
          <div className="text-lg font-semibold text-white">
            {totals.currentPosition} cotas
          </div>
        </div>
      </div>
    );
  };

  if (!investments || investments.length === 0) {
    return (
      <div className="bg-slate-900 rounded-lg shadow-xl border border-slate-800 mb-8 p-8 text-center">
        <p className="text-slate-400">Nenhum investimento encontrado para {activeTab}</p>
      </div>
    );
  }

  return (
    <motion.div 
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      className="space-y-6"
    >
      {/* 🎯 HEADER PREMIUM IGUAL AO SUMMARY */}
      {portfolio && (
        <AssetDetails 
          metadata={portfolio.metadata}
          totalInvested={portfolio.totalInvested}
          totalYield={portfolio.totalYield}
          currentPosition={portfolio.currentPosition}
        />
      )}
      
      {/* Tabela de Transações */}
      <div className="bg-slate-900 rounded-lg shadow-xl border border-slate-800 overflow-hidden">
      
      <motion.div 
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.2 }}
        className="overflow-x-auto scrollbar-thin"
      >
        <table className="w-full min-w-max">
          <thead>
            <tr className="bg-slate-800/60 text-slate-300 text-left">
              <th className="px-4 py-4 font-semibold">Data</th>
              <th className="px-4 py-4 font-semibold">Tipo</th>
              <th className="px-4 py-4 font-semibold">Compra</th>
              <th className="px-4 py-4 font-semibold">Venda</th>
              <th className="px-4 py-4 font-semibold">Valor Unit.</th>
              <th className="px-4 py-4 font-semibold">Valor Total</th>
              <th className="px-4 py-4 font-semibold">Dividendos</th>
              <th className="px-4 py-4 font-semibold">Juros</th>
              {moeda === 'USD' && (
                <th className="px-4 py-4 font-semibold">Impostos</th>
              )}
              <th className="px-4 py-4 font-semibold">DY(%)</th>
              <th className="px-4 py-4 font-semibold max-w-xs truncate">Observações</th>
              <th className="px-4 py-4 font-semibold text-center w-20">Ações</th>
            </tr>
          </thead>
          <tbody className="divide-y divide-slate-700/50">
            {data.map((row, index) => {
              const isEditing = editingIndex === index;
              const dy = calculateHistoricalDY(data, index);
              const valorTotal = row.valor_total;

              return (
                <motion.tr
                  key={index}
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: index * 0.01 }}
                  className={`hover:bg-slate-800/50 border-b border-slate-800/30 ${isEditing ? 'bg-slate-800/70' : ''}`}
                >
                  <td className="px-4 py-2">
                    {isEditing ? (
                      <input
                        type="date"
                        value={editData?.data || ''}
                        onChange={(e) => setEditData({ ...editData!, data: e.target.value })}
                        className="bg-slate-700 border border-slate-600 rounded px-2 py-1 text-white text-sm w-full"
                      />
                    ) : (
                      formatDate(row.data)
                    )}
                  </td>
                  <td className="px-4 py-2">
                    <span className={`px-2 py-1 rounded text-xs ${
                      row.tipo === 'COMPRA' ? 'bg-green-500/20 text-green-400' :
                      row.tipo === 'VENDA' ? 'bg-red-500/20 text-red-400' :
                      row.tipo === 'DIVIDENDO' ? 'bg-blue-500/20 text-blue-400' :
                      row.tipo === 'JUROS' ? 'bg-yellow-500/20 text-yellow-400' :
                      'bg-gray-500/20 text-gray-400'
                    }`}>
                      {row.tipo}
                    </span>
                  </td>
                  <td className="px-4 py-2">
                    {isEditing ? (
                      <input
                        type="number"
                        step="any"
                        value={editData?.quantidade || 0}
                        onChange={(e) => setEditData({ ...editData!, quantidade: parseFloat(e.target.value) || 0 })}
                        className="bg-slate-700 border border-slate-600 rounded px-2 py-1 text-white text-sm w-full"
                      />
                    ) : (
                      row.tipo === 'COMPRA' ? row.quantidade : ''
                    )}
                  </td>
                  <td className="px-4 py-2 text-red-400">
                    {isEditing && row.tipo === 'VENDA' ? (
                      <input
                        type="number"
                        step="any"
                        value={editData?.quantidade || 0}
                        onChange={(e) => setEditData({ ...editData!, quantidade: parseFloat(e.target.value) || 0 })}
                        className="bg-slate-700 border border-slate-600 rounded px-2 py-1 text-white text-sm w-full"
                      />
                    ) : (
                      row.tipo === 'VENDA' ? row.quantidade : ''
                    )}
                  </td>
                  <td className="px-4 py-2">
                    {isEditing ? (
                      <input
                        type="number"
                        step="0.01"
                        value={editData?.valor_unitario || 0}
                        onChange={(e) => setEditData({ ...editData!, valor_unitario: parseFloat(e.target.value) || 0 })}
                        className="bg-slate-700 border border-slate-600 rounded px-2 py-1 text-white text-sm w-full"
                      />
                    ) : (
                      row.valor_unitario ? `${formatCurrency(row.valor_unitario, moeda)}` : ''
                    )}
                  </td>
                  <td className="px-4 py-2 font-medium">
                    {valorTotal && (row.tipo === 'COMPRA' || row.tipo === 'VENDA') ? 
                      `${formatCurrency(valorTotal, moeda)}` : ''}
                  </td>
                  <td className="px-4 py-2 text-green-400">
                    {isEditing ? (
                      <input
                        type="number"
                        step="0.01"
                        value={editData?.dividendos || 0}
                        onChange={(e) => setEditData({ ...editData!, dividendos: parseFloat(e.target.value) || 0 })}
                        className="bg-slate-700 border border-slate-600 rounded px-2 py-1 text-white text-sm w-full"
                      />
                    ) : (
                      row.dividendos ? `${formatCurrency(row.dividendos, moeda)}` : ''
                    )}
                  </td>
                  <td className="px-4 py-2 text-blue-400">
                    {isEditing ? (
                      <input
                        type="number"
                        step="0.01"
                        value={editData?.juros || 0}
                        onChange={(e) => setEditData({ ...editData!, juros: parseFloat(e.target.value) || 0 })}
                        className="bg-slate-700 border border-slate-600 rounded px-2 py-1 text-white text-sm w-full"
                      />
                    ) : (
                      row.juros ? `${formatCurrency(row.juros, moeda)}` : ''
                    )}
                  </td>
                  {moeda === 'USD' && (
                    <td className="px-4 py-2 text-yellow-400">
                      {isEditing ? (
                        <input
                          type="number"
                          step="0.01"
                          value={editData?.impostos || 0}
                          onChange={(e) => setEditData({ ...editData!, impostos: parseFloat(e.target.value) || 0 })}
                          className="bg-slate-700 border border-slate-600 rounded px-2 py-1 text-white text-sm w-full"
                        />
                      ) : (
                        row.impostos ? `${formatCurrency(row.impostos, moeda)}` : ''
                      )}
                    </td>
                  )}
                  <td className="px-4 py-2">
                    {dy > 0 && (
                      <span className={`px-2 py-1 rounded ${getDYClass(dy)}`}>
                        {formatNumber(dy)}%
                      </span>
                    )}
                  </td>
                  <td className="px-4 py-2 max-w-xs truncate">
                    {isEditing ? (
                      <input
                        type="text"
                        value={editData?.observacoes || ''}
                        onChange={(e) => setEditData({ ...editData!, observacoes: e.target.value })}
                        className="bg-slate-700 border border-slate-600 rounded px-2 py-1 text-white text-sm w-full"
                      />
                    ) : (
                      row.observacoes
                    )}
                  </td>
                  <td className="px-4 py-2">
                    <div className="flex justify-center space-x-2">
                      {isEditing ? (
                        <>
                          <button
                            onClick={handleSave}
                            className="text-green-400 hover:text-green-300 transition-colors"
                          >
                            <Save className="w-4 h-4" />
                          </button>
                          <button
                            onClick={handleCancel}
                            className="text-red-400 hover:text-red-300 transition-colors"
                          >
                            <X className="w-4 h-4" />
                          </button>
                        </>
                      ) : (
                        <>
                          <button
                            onClick={() => handleEdit(index)}
                            className="text-blue-400 hover:text-blue-300 transition-colors"
                          >
                            <Edit className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => handleDelete(index)}
                            className="text-red-400 hover:text-red-300 transition-colors"
                          >
                            <Trash2 className="w-4 h-4" />
                          </button>
                        </>
                      )}
                    </div>
                  </td>
                </motion.tr>
              );
            })}
          </tbody>
          <tfoot>
            <tr className="bg-slate-800 text-white font-semibold border-t-2 border-slate-700 hover:bg-slate-800">
              <td className="px-4 py-4 font-bold">TOTAIS</td>
              <td className="px-4 py-4 font-bold">-</td>
              <td className="px-4 py-4 font-bold">{totals.currentPosition}</td>
              <td className="px-4 py-4 text-red-400 font-bold">-</td>
              <td className="px-4 py-4 font-bold">
                <span className="bg-blue-900/40 px-2 py-1 rounded">P.M: {formatCurrency(totals.precoMedio, moeda)}</span>
              </td>
              <td className="px-4 py-4 font-bold">
                <span className="bg-slate-700/40 px-2 py-1 rounded">{formatCurrency(totals.totalInvestido, moeda)}</span>
              </td>
              <td className="px-4 py-4 text-green-400 font-bold">
                <span className="bg-green-900/20 px-2 py-1 rounded">{formatCurrency(totals.totalDividendos, moeda)}</span>
              </td>
              <td className="px-4 py-4 text-blue-400 font-bold">
                <span className="bg-blue-900/20 px-2 py-1 rounded">{formatCurrency(totals.totalJuros, moeda)}</span>
              </td>
              {moeda === 'USD' && (
                <td className="px-4 py-3 text-yellow-400">
                  {formatCurrency(totals.totalImpostos, moeda)}
                </td>
              )}
              <td className="px-4 py-4 font-bold">
                <span className={`px-2 py-1 rounded text-lg ${getDYClass(totals.dyGeral)}`}>
                  {formatNumber(totals.dyGeral)}%
                </span>
              </td>
              <td className="px-4 py-4 font-bold" colSpan={2}>
                <span className="bg-purple-900/20 px-2 py-1 rounded text-purple-300">SALDO: {totals.currentPosition} cotas</span>
              </td>
            </tr>
          </tfoot>
        </table>
      </motion.div>
      
      <motion.div 
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.3 }}
        className="bg-slate-800 p-6 rounded-b-lg border-t border-slate-700 flex flex-col md:flex-row md:justify-between md:items-center"
      >
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4 md:mb-0 w-full">
          <div className="text-center p-4 bg-slate-900/60 rounded-lg border border-slate-700 hover:border-blue-500/50 transition-colors shadow-lg">
            <div className="text-sm text-slate-400 mb-1">Total Investido</div>
            <div className="text-xl font-bold text-white">{formatCurrency(totals.totalInvestido, moeda)}</div>
          </div>
          <div className="text-center p-4 bg-slate-900/60 rounded-lg border border-slate-700 hover:border-green-500/50 transition-colors shadow-lg">
            <div className="text-sm text-slate-400 mb-1">Total Proventos</div>
            <div className="text-xl font-bold text-green-400">{formatCurrency(totals.totalProventos, moeda)}</div>
          </div>
          <div className="text-center p-4 bg-slate-900/60 rounded-lg border border-slate-700 hover:border-blue-500/50 transition-colors shadow-lg">
            <div className="text-sm text-slate-400 mb-1">Yield Total</div>
            <div className="text-xl font-bold text-blue-400">{formatNumber(totals.dyGeral)}%</div>
          </div>
          <div className="text-center p-4 bg-slate-900/60 rounded-lg border border-slate-700 hover:border-purple-500/50 transition-colors shadow-lg">
            <div className="text-sm text-slate-400 mb-1">Posição Atual</div>
            <div className="text-xl font-bold text-purple-400">{totals.currentPosition} cotas</div>
          </div>
        </div>
      </motion.div>
      </div>
    </motion.div>
  );
};

export default InvestmentTable;

# ==============================================================================
# ARQUIVO: src\components\Login.tsx
# ==============================================================================

import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Lock, LogIn, Eye, EyeOff } from 'lucide-react';
import toast from 'react-hot-toast';

interface LoginProps {
  onLogin: () => void;
}

const Login: React.FC<LoginProps> = ({ onLogin }) => {
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);

  const CORRECT_PASSWORD = 'ErasmoInvest12!@';

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      // Verificar senha simples
      if (password === CORRECT_PASSWORD) {
        toast.success('Login realizado com sucesso!');
        localStorage.setItem('erasmoInvestAuth', 'true');
        onLogin();
      } else {
        toast.error('Senha incorreta!');
      }
    } catch (error) {
      console.error('Erro no login:', error);
      toast.error('Erro ao fazer login');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center p-4">
      <div className="w-full max-w-md">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="glass border border-white/10 rounded-3xl p-8 text-center"
        >
          {/* Logo */}
          <motion.div
            initial={{ scale: 0 }}
            animate={{ scale: 1 }}
            transition={{ delay: 0.2, type: "spring", stiffness: 200 }}
            className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-600 rounded-2xl mb-6 shadow-2xl"
          >
            <Lock className="w-8 h-8 text-white" />
          </motion.div>

          <motion.h1
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.3 }}
            className="text-3xl font-bold text-white mb-2"
          >
            ERASMO INVEST
          </motion.h1>

          <motion.p
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.4 }}
            className="text-slate-400 mb-8"
          >
            Acesse sua conta
          </motion.p>

          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Campo de Senha */}
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.5 }}
              className="relative"
            >
              <label className="block text-sm font-medium text-slate-300 mb-2 text-left">
                Senha
              </label>
              <div className="relative">
                <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400" />
                <input
                  type={showPassword ? 'text' : 'password'}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  placeholder="••••••••"
                  className="w-full bg-slate-800/50 border border-slate-600 rounded-xl py-3 pl-12 pr-12 text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                  required
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400 hover:text-white transition-colors"
                >
                  {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                </button>
              </div>
            </motion.div>

            {/* Botão de Login */}
            <motion.button
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.6 }}
              type="submit"
              disabled={isLoading}
              className="w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white font-semibold py-3 rounded-xl transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2"
            >
              {isLoading ? (
                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
              ) : (
                <>
                  <LogIn className="w-5 h-5" />
                  <span>Entrar</span>
                </>
              )}
            </motion.button>
          </form>

          {/* Informação do Sistema */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.8 }}
            className="mt-6 p-3 bg-blue-500/10 border border-blue-500/20 rounded-lg"
          >
            <p className="text-xs text-blue-300">
              🔒 Sistema de gestão de investimentos profissional
            </p>
          </motion.div>
        </motion.div>
      </div>
    </div>
  );
};

export default Login;

# ==============================================================================
# ARQUIVO: src\components\NewAssetModal.tsx
# ==============================================================================

import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, Search, Plus, TrendingUp, DollarSign, Globe, Building } from 'lucide-react';
import { marketApiService, SearchResult } from '../services/marketApi';
import { searchMappings, TickerMapping } from '../data/tickerMapping';
import { investmentService } from '../services/supabaseService';
import toast from 'react-hot-toast';

interface NewAssetModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
}

const NewAssetModal: React.FC<NewAssetModalProps> = ({
  isOpen,
  onClose,
  onSuccess
}) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState<SearchResult[]>([]);
  const [mappingResults, setMappingResults] = useState<TickerMapping[]>([]);
  const [loading, setLoading] = useState(false);
  const [selectedAsset, setSelectedAsset] = useState<SearchResult | TickerMapping | null>(null);
  const [step, setStep] = useState<'search' | 'confirm'>('search');
  const searchTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  // Buscar ativos quando a query muda
  useEffect(() => {
    if (searchQuery.length < 2) {
      setSearchResults([]);
      setMappingResults([]);
      return;
    }

    // Cancelar busca anterior
    if (searchTimeoutRef.current) {
      clearTimeout(searchTimeoutRef.current);
    }

    // Buscar nos mapeamentos locais primeiro (instantâneo)
    const mappings = searchMappings(searchQuery);
    setMappingResults(mappings);

    // Buscar nas APIs com delay para evitar muitas requisições
    searchTimeoutRef.current = setTimeout(async () => {
      setLoading(true);
      try {
        const results = await marketApiService.searchTickers(searchQuery);
        setSearchResults(results);
      } catch (error) {
        console.error('Erro na busca:', error);
        toast.error('Erro ao buscar ativos');
      } finally {
        setLoading(false);
      }
    }, 500);

    return () => {
      if (searchTimeoutRef.current) {
        clearTimeout(searchTimeoutRef.current);
      }
    };
  }, [searchQuery]);

  const handleSelectAsset = (asset: SearchResult | TickerMapping) => {
    setSelectedAsset(asset);
    setStep('confirm');
  };

  // Type guards
  const isTickerMapping = (asset: SearchResult | TickerMapping): asset is TickerMapping => {
    return 'officialTicker' in asset;
  };

  const handleAddAsset = async () => {
    if (!selectedAsset) return;

    try {
      setLoading(true);
      
      // Determinar o ticker oficial
      const ticker = isTickerMapping(selectedAsset) 
        ? selectedAsset.officialTicker 
        : selectedAsset.symbol;

      // Buscar dados detalhados do ativo
      const details = await marketApiService.getTickerDetails(ticker);
      
      // Criar metadata do ativo
      const metadata = {
        ticker: ticker,
        nome: isTickerMapping(selectedAsset) ? selectedAsset.friendlyName : selectedAsset.name,
        setor: isTickerMapping(selectedAsset) ? selectedAsset.sector : selectedAsset.type,
        tipo: isTickerMapping(selectedAsset) ? selectedAsset.sector : selectedAsset.type,
        moeda: isTickerMapping(selectedAsset) ? 'BRL' : selectedAsset.currency,
        mercado: isTickerMapping(selectedAsset) ? selectedAsset.market : selectedAsset.market,
        logo_url: isTickerMapping(selectedAsset) ? null : selectedAsset.logo || null,
        preco_atual: details?.data?.regularMarketPrice || details?.data?.['05. price'] || 0,
        variacao_dia: details?.data?.regularMarketChange || 0,
        variacao_percentual: details?.data?.regularMarketChangePercent || 0,
        volume: details?.data?.regularMarketVolume || 0,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      // Por enquanto, só mostrar sucesso já que a estrutura está criada
      toast.success(`${metadata.nome} será adicionado em breve! (Funcionalidade em desenvolvimento)`);
      onSuccess();
      onClose();
    } catch (error) {
      console.error('Erro ao adicionar ativo:', error);
      toast.error('Erro ao adicionar ativo. Tente novamente.');
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setSearchQuery('');
    setSearchResults([]);
    setMappingResults([]);
    setSelectedAsset(null);
    setStep('search');
    onClose();
  };

  const getAssetIcon = (type: string) => {
    switch (type.toLowerCase()) {
      case 'fii':
      case 'reit':
        return <Building className="h-5 w-5" />;
      case 'etf':
        return <TrendingUp className="h-5 w-5" />;
      default:
        return <DollarSign className="h-5 w-5" />;
    }
  };

  const getMarketFlag = (market: string) => {
    if (market.includes('Brasil') || market.includes('B3')) {
      return '🇧🇷';
    }
    if (market.includes('United States') || market.includes('NASDAQ') || market.includes('NYSE')) {
      return '🇺🇸';
    }
    return '🌍';
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4">
      <motion.div
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        exit={{ opacity: 0, scale: 0.95 }}
        className="bg-slate-800 rounded-2xl p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto"
      >
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-green-600/20 rounded-lg">
              <Plus className="h-6 w-6 text-green-400" />
            </div>
            <div>
              <h2 className="text-2xl font-bold text-white">Novo Investimento</h2>
              <p className="text-slate-400">
                {step === 'search' ? 'Busque ações, FIIs e ETFs brasileiros e americanos' : 'Confirme os dados do ativo'}
              </p>
            </div>
          </div>
          <button
            onClick={handleClose}
            className="p-2 hover:bg-slate-700 rounded-lg transition-colors"
          >
            <X className="h-6 w-6 text-slate-400" />
          </button>
        </div>

        {step === 'search' ? (
          <>
            {/* Campo de Busca */}
            <div className="relative mb-6">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <Search className="h-5 w-5 text-slate-400" />
              </div>
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="Digite o nome ou ticker (ex: Petrobras, PETR4, Apple, AAPL...)"
                className="w-full pl-10 pr-4 py-3 bg-slate-700 border border-slate-600 rounded-xl text-white placeholder-slate-400 focus:ring-2 focus:ring-green-500 focus:border-transparent"
                autoFocus
              />
            </div>

            {/* Resultados dos Mapeamentos Locais */}
            {mappingResults.length > 0 && (
              <div className="mb-6">
                <h3 className="text-lg font-semibold text-white mb-3 flex items-center">
                  <span className="mr-2">⭐</span> Ativos Populares
                </h3>
                <div className="grid gap-3">
                  {mappingResults.slice(0, 5).map((mapping) => (
                    <motion.div
                      key={mapping.officialTicker}
                      whileHover={{ scale: 1.02 }}
                      onClick={() => handleSelectAsset(mapping)}
                      className="p-4 bg-slate-700/50 rounded-xl border border-slate-600 cursor-pointer hover:border-green-500/50 transition-all"
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <div className="p-2 bg-green-600/20 rounded-lg">
                            {getAssetIcon(mapping.sector)}
                          </div>
                          <div>
                            <div className="flex items-center space-x-2">
                              <span className="text-white font-medium">{mapping.friendlyName}</span>
                              <span className="text-slate-400">({mapping.officialTicker})</span>
                              <span className="text-lg">{getMarketFlag(mapping.market)}</span>
                            </div>
                            <p className="text-slate-400 text-sm">{mapping.sector} • {mapping.market}</p>
                          </div>
                        </div>
                        <Plus className="h-5 w-5 text-green-400" />
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>
            )}

            {/* Resultados da API */}
            {searchResults.length > 0 && (
              <div className="mb-6">
                <h3 className="text-lg font-semibold text-white mb-3 flex items-center">
                  <Globe className="h-5 w-5 mr-2" />
                  Resultados da Busca
                </h3>
                <div className="grid gap-3">
                  {searchResults.map((result, index) => (
                    <motion.div
                      key={`${result.symbol}-${index}`}
                      whileHover={{ scale: 1.02 }}
                      onClick={() => handleSelectAsset(result)}
                      className="p-4 bg-slate-700/50 rounded-xl border border-slate-600 cursor-pointer hover:border-blue-500/50 transition-all"
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          {result.logo ? (
                            <img 
                              src={result.logo} 
                              alt={result.name}
                              className="w-10 h-10 rounded-lg object-cover"
                              onError={(e) => {
                                e.currentTarget.style.display = 'none';
                              }}
                            />
                          ) : (
                            <div className="p-2 bg-blue-600/20 rounded-lg">
                              {getAssetIcon(result.type)}
                            </div>
                          )}
                          <div>
                            <div className="flex items-center space-x-2">
                              <span className="text-white font-medium">{result.name}</span>
                              <span className="text-slate-400">({result.symbol})</span>
                              <span className="text-lg">{getMarketFlag(result.market)}</span>
                            </div>
                            <p className="text-slate-400 text-sm">{result.type} • {result.currency} • {result.market}</p>
                            {result.matchScore && (
                              <p className="text-xs text-green-400">
                                Relevância: {Math.round(result.matchScore * 100)}%
                              </p>
                            )}
                          </div>
                        </div>
                        <Plus className="h-5 w-5 text-blue-400" />
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>
            )}

            {/* Estado de Loading */}
            {loading && (
              <div className="flex items-center justify-center py-8">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-400"></div>
                <span className="ml-3 text-slate-400">Buscando ativos...</span>
              </div>
            )}

            {/* Mensagem quando não há resultados */}
            {searchQuery.length >= 2 && !loading && searchResults.length === 0 && mappingResults.length === 0 && (
              <div className="text-center py-8">
                <div className="p-4 bg-slate-700/50 rounded-xl">
                  <Search className="h-12 w-12 text-slate-400 mx-auto mb-3" />
                  <h3 className="text-lg font-medium text-white mb-2">Nenhum ativo encontrado</h3>
                  <p className="text-slate-400">
                    Tente buscar por outro nome ou ticker. 
                    <br />
                    Exemplos: "Petrobras", "PETR4", "Apple", "AAPL"
                  </p>
                </div>
              </div>
            )}
          </>
        ) : (
          /* Tela de Confirmação */
          selectedAsset && (
            <div className="space-y-6">
              <div className="p-6 bg-slate-700/50 rounded-xl border border-slate-600">
                <div className="flex items-center space-x-4 mb-4">
                  {(!isTickerMapping(selectedAsset) && selectedAsset.logo) ? (
                    <img 
                      src={selectedAsset.logo} 
                      alt={selectedAsset.name}
                      className="w-16 h-16 rounded-lg object-cover"
                    />
                  ) : (
                    <div className="p-4 bg-green-600/20 rounded-lg">
                      {getAssetIcon(isTickerMapping(selectedAsset) ? selectedAsset.sector : selectedAsset.type)}
                    </div>
                  )}
                   <div>
                     <h3 className="text-2xl font-bold text-white">
                       {isTickerMapping(selectedAsset) ? selectedAsset.friendlyName : selectedAsset.name}
                     </h3>
                     <p className="text-slate-400">
                       {isTickerMapping(selectedAsset) ? selectedAsset.officialTicker : selectedAsset.symbol}
                     </p>
                   </div>
                 </div>
                 
                 <div className="grid grid-cols-2 gap-4 text-sm">
                   <div>
                     <span className="text-slate-400">Tipo:</span>
                     <p className="text-white font-medium">{isTickerMapping(selectedAsset) ? selectedAsset.sector : selectedAsset.type}</p>
                   </div>
                   <div>
                     <span className="text-slate-400">Mercado:</span>
                     <p className="text-white font-medium">
                       {selectedAsset.market}
                     </p>
                   </div>
                   <div>
                     <span className="text-slate-400">Moeda:</span>
                     <p className="text-white font-medium">{isTickerMapping(selectedAsset) ? 'BRL' : selectedAsset.currency}</p>
                   </div>
                   {!isTickerMapping(selectedAsset) && selectedAsset.matchScore && (
                    <div>
                      <span className="text-slate-400">Relevância:</span>
                      <p className="text-white font-medium">{Math.round(selectedAsset.matchScore * 100)}%</p>
                    </div>
                  )}
                </div>
              </div>

              <div className="flex space-x-4">
                <button
                  onClick={() => setStep('search')}
                  className="flex-1 px-6 py-3 bg-slate-700 hover:bg-slate-600 text-white rounded-xl transition-colors"
                >
                  Voltar
                </button>
                <button
                  onClick={handleAddAsset}
                  disabled={loading}
                  className="flex-1 px-6 py-3 bg-green-600 hover:bg-green-700 disabled:bg-green-600/50 text-white rounded-xl transition-colors flex items-center justify-center space-x-2"
                >
                  {loading ? (
                    <>
                      <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                      <span>Adicionando...</span>
                    </>
                  ) : (
                    <>
                      <Plus className="h-5 w-5" />
                      <span>Adicionar Investimento</span>
                    </>
                  )}
                </button>
              </div>
            </div>
          )
        )}
      </motion.div>
    </div>
  );
};

export default NewAssetModal; 

# ==============================================================================
# ARQUIVO: src\components\OverviewTab.tsx
# ==============================================================================

import React, { useMemo } from 'react';
import { motion } from 'framer-motion';
import { TrendingUp, TrendingDown, DollarSign, Target, Eye } from 'lucide-react';
import { Portfolio } from '../types/investment';

interface OverviewTabProps {
  portfolios: Portfolio[];
}

const OverviewTab: React.FC<OverviewTabProps> = ({ portfolios }) => {

  const summary = useMemo(() => {
    if (!portfolios || portfolios.length === 0) {
      return { 
        totalInvested: 0, 
        totalCurrentValue: 0, 
        totalDividends: 0, 
        totalProfit: 0, 
        activeAssets: 0 
      };
    }
    return portfolios.reduce((acc, p) => {
        acc.totalInvested += p.totalInvested;
        acc.totalCurrentValue += p.marketValue || 0;
        acc.totalDividends += p.totalDividends + p.totalJuros;
        acc.totalProfit += p.profit || 0;
        if (p.currentPosition > 0) acc.activeAssets++;
        return acc;
    }, { 
      totalInvested: 0, 
      totalCurrentValue: 0, 
      totalDividends: 0, 
      totalProfit: 0, 
      activeAssets: 0 
    });
  }, [portfolios]);
  
  const totalProfitPercent = summary.totalInvested > 0 ? (summary.totalProfit / summary.totalInvested) * 100 : 0;
  const totalYield = summary.totalInvested > 0 ? (summary.totalDividends / summary.totalInvested) * 100 : 0;

  const formatCurrency = (value: number) => 
    new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(value);
  
  const formatPercent = (value: number) => 
    `${value >= 0 ? '+' : ''}${value.toFixed(2)}%`;

  return (
    <div className="space-y-8">
      <motion.div 
        initial={{ opacity: 0, y: 20 }} 
        animate={{ opacity: 1, y: 0 }} 
        className="bg-gradient-to-br from-blue-900/30 to-indigo-900/30 rounded-3xl p-8 border border-white/10"
      >
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-4xl font-bold text-white">Visão Geral do Portfólio</h1>
            <p className="text-slate-400 mt-2">
              Atualizado: {new Date().toLocaleString('pt-BR')}
            </p>
          </div>
          <div className="text-right">
            <div className="text-2xl font-bold text-white">{summary.activeAssets} Ativos</div>
            <div className="text-slate-400">em carteira</div>
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <MetricCard 
            title="Total Investido" 
            value={formatCurrency(summary.totalInvested)} 
            icon={DollarSign} 
            color="blue" 
          />
          <MetricCard 
            title="Valor Atual" 
            value={formatCurrency(summary.totalCurrentValue)} 
            icon={Eye} 
            color="green" 
          />
          <MetricCard 
            title="Lucro/Prejuízo" 
            value={formatCurrency(summary.totalProfit)} 
            icon={summary.totalProfit >= 0 ? TrendingUp : TrendingDown} 
            color={summary.totalProfit >= 0 ? "emerald" : "red"} 
            change={formatPercent(totalProfitPercent)} 
          />
          <MetricCard 
            title="Rendimento (Yield)" 
            value={formatPercent(totalYield)} 
            icon={Target} 
            color="purple" 
            change={formatCurrency(summary.totalDividends)} 
          />
        </div>
      </motion.div>
    </div>
  );
};

interface MetricCardProps {
  title: string;
  value: string;
  icon: React.ComponentType<any>;
  color: 'blue' | 'green' | 'emerald' | 'red' | 'purple';
  change?: string;
}

const MetricCard: React.FC<MetricCardProps> = ({ title, value, icon: Icon, color, change }) => {
  const colorClasses = {
    blue: 'bg-blue-500/10 border-blue-500/20 text-blue-400',
    green: 'bg-green-500/10 border-green-500/20 text-green-400',
    emerald: 'bg-emerald-500/10 border-emerald-500/20 text-emerald-400',
    red: 'bg-red-500/10 border-red-500/20 text-red-400',
    purple: 'bg-purple-500/10 border-purple-500/20 text-purple-400',
  };

  return (
    <motion.div 
      initial={{ opacity: 0, scale: 0.9 }} 
      animate={{ opacity: 1, scale: 1 }} 
      className={`${colorClasses[color]} rounded-xl p-6 border`}
    >
      <div className="flex items-center justify-between mb-2">
        <h3 className="text-sm font-medium text-slate-400">{title}</h3>
        <Icon className="h-5 w-5" />
      </div>
      <p className={`text-2xl font-bold ${color === 'blue' ? 'text-blue-400' : 
                                         color === 'green' ? 'text-green-400' :
                                         color === 'emerald' ? 'text-emerald-400' :
                                         color === 'red' ? 'text-red-400' :
                                         'text-purple-400'}`}>
        {value}
      </p>
      {change && (
        <p className={`text-sm ${color === 'blue' ? 'text-blue-400' : 
                                 color === 'green' ? 'text-green-400' :
                                 color === 'emerald' ? 'text-emerald-400' :
                                 color === 'red' ? 'text-red-400' :
                                 'text-purple-400'}`}>
          {change}
        </p>
      )}
    </motion.div>
  );
};

export default OverviewTab;


# ==============================================================================
# ARQUIVO: src\components\PortfolioOverview.tsx
# ==============================================================================

import React from 'react';
import { motion } from 'framer-motion';
import { portfolioData } from '../data/portfolioData';
import { Building2, TrendingUp, Globe, DollarSign, Target } from 'lucide-react';

interface PortfolioOverviewProps {
  activeTab: string;
  onTabChange: (tab: string) => void;
}

const PortfolioOverview: React.FC<PortfolioOverviewProps> = ({ activeTab, onTabChange }) => {
  const calculatePortfolioSummary = () => {
    const summary = [];
    
    // Ordenar tickers alfabeticamente
    Object.keys(portfolioData).sort((a, b) => a.localeCompare(b)).forEach(ticker => {
      const data = portfolioData[ticker];
      let position = 0;
      let totalInvested = 0;
      let totalProventos = 0;
      
      data.forEach(row => {
        position += (row.compra - row.venda);
        totalInvested += (row.compra - row.venda) * row.valorUnit;
        totalProventos += (row.dividendos || 0) + (row.juros || 0);
      });
      
      if (position > 0) {
        const yield_ = totalInvested > 0 ? (totalProventos / Math.abs(totalInvested)) * 100 : 0;
        summary.push({
          ticker: ticker,
          position: position,
          invested: Math.abs(totalInvested),
          proventos: totalProventos,
          yield: yield_,
          type: getAssetType(ticker)
        });
      }
    });
    
    return summary.sort((a, b) => b.invested - a.invested);
  };

  const getAssetType = (ticker: string) => {
    if (ticker.includes('11')) return 'FII';
    if (ticker.includes('3')) return 'AÇÃO';
    if (['VNQ', 'VOO', 'DVN', 'EVEX', 'O'].includes(ticker)) return 'US';
    return 'OUTRO';
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'FII':
        return <Building2 className="w-5 h-5 text-blue-400" />;
      case 'AÇÃO':
        return <TrendingUp className="w-5 h-5 text-green-400" />;
      case 'US':
        return <Globe className="w-5 h-5 text-purple-400" />;
      default:
        return <DollarSign className="w-5 h-5 text-gray-400" />;
    }
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'FII':
        return 'from-blue-500 to-blue-600';
      case 'AÇÃO':
        return 'from-green-500 to-green-600';
      case 'US':
        return 'from-purple-500 to-purple-600';
      default:
        return 'from-gray-500 to-gray-600';
    }
  };

  const formatNumber = (num: number) => {
    return num.toFixed(2).replace('.', ',');
  };

  const portfolioSummary = calculatePortfolioSummary();

  return (
    <div className="bg-slate-800/50 backdrop-blur-xl rounded-3xl p-8 border border-white/10 shadow-2xl mb-8">
      <div className="flex items-center space-x-3 mb-6">
        <div className="p-3 bg-gradient-to-r from-blue-500/20 to-purple-500/20 rounded-xl">
          <Target className="w-6 h-6 text-blue-400" />
        </div>
        <h3 className="text-2xl font-bold text-white">Composição do Portfólio</h3>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
        {portfolioSummary.map((item, index) => (
          <motion.div
            key={item.ticker}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.05 }}
            onClick={() => onTabChange(item.ticker)}
            className={`relative group cursor-pointer transition-all duration-300 ${
              activeTab === item.ticker
                ? 'ring-2 ring-blue-500 ring-opacity-50 scale-105'
                : 'hover:scale-105'
            }`}
          >
            <div className={`bg-gradient-to-br ${getTypeColor(item.type)} opacity-10 absolute inset-0 rounded-xl`} />
            
            <div className="relative bg-slate-700/50 backdrop-blur-sm rounded-xl p-4 border border-white/10 hover:border-white/20 transition-all duration-300">
              <div className="flex items-center justify-between mb-3">
                <div className="flex items-center space-x-2">
                  {getTypeIcon(item.type)}
                  <span className="font-bold text-white">{item.ticker}</span>
                </div>
                <span className={`text-xs px-2 py-1 rounded-full bg-gradient-to-r ${getTypeColor(item.type)} text-white`}>
                  {item.type}
                </span>
              </div>

              <div className="space-y-2">
                <div className="flex justify-between items-center">
                  <span className="text-sm text-slate-400">Posição</span>
                  <span className="text-sm font-semibold text-white">{item.position} cotas</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-slate-400">Investido</span>
                  <span className="text-sm font-semibold text-green-400">R$ {formatNumber(item.invested)}</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-slate-400">Yield</span>
                  <span className={`text-sm font-semibold ${
                    item.yield >= 8 ? 'text-green-400' : 
                    item.yield >= 5 ? 'text-yellow-400' : 'text-red-400'
                  }`}>
                    {formatNumber(item.yield)}%
                  </span>
                </div>
              </div>

              {/* Hover effect overlay */}
              <div className="absolute inset-0 bg-gradient-to-r from-blue-500/0 via-blue-500/5 to-purple-500/0 opacity-0 group-hover:opacity-100 transition-all duration-300 rounded-xl" />
            </div>
          </motion.div>
        ))}
      </div>
    </div>
  );
};

export default PortfolioOverview;

# ==============================================================================
# ARQUIVO: src\components\PortfolioSummary.tsx
# ==============================================================================

import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { TrendingUp, TrendingDown, DollarSign, Target, Gift, Calculator, ArrowUpDown } from 'lucide-react';
import { Portfolio } from '../types/investment';
import { marketApiService, MarketData } from '../services/marketApi';

interface PortfolioSummaryProps {
  portfolios: Portfolio[];
}

const PortfolioSummary: React.FC<PortfolioSummaryProps> = ({ portfolios }) => {
  const [marketDataMap, setMarketDataMap] = useState<Map<string, MarketData>>(new Map());
  const [loading, setLoading] = useState(true);

  // Buscar dados de mercado para todos os ativos
  useEffect(() => {
    const fetchAllMarketData = async () => {
      if (portfolios.length === 0) return;

      try {
        setLoading(true);
        const marketData = await marketApiService.getMultipleMarketData(portfolios);
        setMarketDataMap(marketData);
      } catch (error) {
        console.error('Erro ao buscar dados de mercado:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchAllMarketData();
    
    // Atualizar a cada 1 minuto
    const interval = setInterval(fetchAllMarketData, 60000);
    return () => clearInterval(interval);
  }, [portfolios]);

  const formatCurrency = (value: number, currency = 'BRL') => {
    if (currency === 'USD') {
      return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 2
      }).format(value);
    }
    
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL',
      minimumFractionDigits: 2
    }).format(value);
  };

  const formatPercent = (value: number) => {
    return `${value >= 0 ? '+' : ''}${value.toFixed(2)}%`;
  };

  // Calcular totais baseados nos preços atualizados
  const totals = portfolios.reduce((acc, portfolio) => {
    const marketData = marketDataMap.get(portfolio.ticker);
    
    // Usar valores já convertidos para BRL do portfolio
    const valueInBRL = portfolio.marketValue || 0;
    const investedInBRL = portfolio.totalInvested || 0;

    acc.totalInvested += investedInBRL;
    acc.totalCurrentValue += valueInBRL;
    acc.totalDividends += (portfolio.totalDividends || 0) + (portfolio.totalJuros || 0);
    
    return acc;
  }, {
    totalInvested: 0,
    totalCurrentValue: 0,
    totalDividends: 0
  });

  const totalProfit = totals.totalCurrentValue - totals.totalInvested;
  const totalProfitPercent = totals.totalInvested > 0 ? 
    (totalProfit / totals.totalInvested) * 100 : 0;

  const getProfitColor = (value: number) => {
    if (value > 0) return 'text-green-400';
    if (value < 0) return 'text-red-400';
    return 'text-slate-400';
  };

  const getProfitIcon = (value: number) => {
    if (value > 0) return <TrendingUp className="h-6 w-6" />;
    if (value < 0) return <TrendingDown className="h-6 w-6" />;
    return <ArrowUpDown className="h-6 w-6" />;
  };

  const getBackgroundGradient = (value: number) => {
    if (value > 0) return 'from-green-600/20 to-green-700/20 border-green-500/30';
    if (value < 0) return 'from-red-600/20 to-red-700/20 border-red-500/30';
    return 'from-slate-600/20 to-slate-700/20 border-slate-500/30';
  };

  if (portfolios.length === 0) {
    return null;
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className={`
        relative p-6 rounded-2xl border bg-gradient-to-br transition-all duration-300
        ${getBackgroundGradient(totalProfitPercent)}
      `}
    >
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-3">
          <div className="p-3 bg-slate-800 rounded-xl">
            <Calculator className="h-6 w-6 text-blue-400" />
          </div>
          <div>
            <h2 className="text-xl font-bold text-white">Resumo Total da Carteira</h2>
            <p className="text-sm text-slate-400">
              {loading ? 'Atualizando preços...' : 'Preços atualizados em tempo real'}
            </p>
          </div>
        </div>
        
        {loading && (
          <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-400"></div>
        )}
      </div>

      {/* Métricas Principais */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
        <div className="space-y-2">
          <div className="flex items-center space-x-2">
            <DollarSign className="h-5 w-5 text-slate-400" />
            <span className="text-sm text-slate-400">Total Investido</span>
          </div>
          <p className="text-2xl font-bold text-white">
            {formatCurrency(totals.totalInvested)}
          </p>
        </div>

        <div className="space-y-2">
          <div className="flex items-center space-x-2">
            <Target className="h-5 w-5 text-slate-400" />
            <span className="text-sm text-slate-400">Valor Atual</span>
          </div>
          <p className="text-2xl font-bold text-white">
            {formatCurrency(totals.totalCurrentValue)}
          </p>
        </div>

        <div className="space-y-2">
          <div className="flex items-center space-x-2">
            <Gift className="h-5 w-5 text-slate-400" />
            <span className="text-sm text-slate-400">Total Proventos</span>
          </div>
          <p className="text-2xl font-bold text-white">
            {formatCurrency(totals.totalDividends)}
          </p>
        </div>

        <div className="space-y-2">
          <div className="flex items-center space-x-2 text-slate-400">
            <span className="text-sm">Ativos</span>
          </div>
          <p className="text-2xl font-bold text-white">
            {portfolios.length}
          </p>
        </div>
      </div>

      {/* Retângulo Principal - Valor de Venda Total */}
      <div className={`
        p-6 rounded-xl border-2 bg-gradient-to-r transition-all duration-300
        ${getBackgroundGradient(totalProfitPercent)}
      `}>
        <div className="flex items-center justify-between">
          <div className="space-y-1">
            <h3 className="text-lg font-semibold text-slate-300">
              Valor Total se Vendesse Tudo Hoje
            </h3>
            <p className="text-3xl font-bold text-white">
              {formatCurrency(totals.totalCurrentValue)}
            </p>
            <p className="text-sm text-slate-400">
              Baseado nos preços atuais de mercado
            </p>
          </div>

          <div className="text-right">
            <div className={`flex items-center space-x-3 ${getProfitColor(totalProfitPercent)}`}>
              {getProfitIcon(totalProfitPercent)}
              <div>
                <p className="text-2xl font-bold">
                  {formatPercent(totalProfitPercent)}
                </p>
                <p className="text-lg font-semibold">
                  {formatCurrency(totalProfit)}
                </p>
              </div>
            </div>
            <p className="text-xs text-slate-500 mt-1">
              {totalProfit >= 0 ? 'Lucro' : 'Prejuízo'} total
            </p>
          </div>
        </div>

        {/* Barra de Progresso Visual */}
        <div className="mt-4">
          <div className="flex justify-between text-sm text-slate-400 mb-2">
            <span>Retorno da Carteira</span>
            <span>{Math.abs(totalProfitPercent).toFixed(2)}%</span>
          </div>
          <div className="w-full bg-slate-700 rounded-full h-2">
            <div 
              className={`h-2 rounded-full transition-all duration-1000 ${
                totalProfitPercent >= 0 ? 'bg-green-500' : 'bg-red-500'
              }`}
              style={{ 
                width: `${Math.min(Math.abs(totalProfitPercent) * 2, 100)}%` 
              }}
            />
          </div>
        </div>
      </div>

      {/* Informações Adicionais */}
      <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
        <div className="text-center p-3 bg-slate-800/50 rounded-lg">
          <p className="text-slate-400">Yield Médio</p>
          <p className="text-lg font-semibold text-blue-400">
            {portfolios.length > 0 ? 
              (portfolios.reduce((sum, p) => sum + p.totalYield, 0) / portfolios.length).toFixed(2) : 0
            }%
          </p>
        </div>
        
        <div className="text-center p-3 bg-slate-800/50 rounded-lg">
          <p className="text-slate-400">Melhor Ativo</p>
          <p className="text-lg font-semibold text-green-400">
            {portfolios.length > 0 ? 
              [...portfolios]
                .filter(p => (p.profitPercent || 0) > 0)
                .sort((a, b) => (b.profitPercent || 0) - (a.profitPercent || 0))
                [0]?.ticker || '-'
              : '-'
            }
          </p>
        </div>
        
        <div className="text-center p-3 bg-slate-800/50 rounded-lg">
          <p className="text-slate-400">Última Atualização</p>
          <p className="text-lg font-semibold text-white">
            {new Date().toLocaleTimeString('pt-BR', {
              hour: '2-digit',
              minute: '2-digit'
            })}
          </p>
        </div>
      </div>

      {/* Indicador de Status */}
      <div className="absolute top-4 right-4">
        <div className={`w-3 h-3 rounded-full animate-pulse ${
          loading ? 'bg-yellow-500' : 'bg-green-500'
        }`} />
      </div>
    </motion.div>
  );
};

export default PortfolioSummary;

# ==============================================================================
# ARQUIVO: src\components\PortfolioTab.tsx
# ==============================================================================

import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Plus, Search, Filter, Grid, List } from 'lucide-react';
import { Portfolio } from '../types/investment';
import AssetCard from './AssetCard';
import Summary from './Summary';

interface PortfolioTabProps {
  portfolios: Portfolio[];
  onAddInvestment: () => void;
  onNewAsset: () => void;
}

const PortfolioTab: React.FC<PortfolioTabProps> = ({ 
  portfolios, 
  onAddInvestment, 
  onNewAsset 
}) => {
  const [selectedAsset, setSelectedAsset] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterType, setFilterType] = useState<'ALL' | 'FII' | 'ACAO_BR' | 'EUA' | 'TESOURO_DIRETO'>('ALL');
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');

  // Filtrar portfolios
  const filteredPortfolios = portfolios.filter(portfolio => {
    const matchesSearch = portfolio.ticker.toLowerCase().includes(searchTerm.toLowerCase()) ||
      portfolio.metadata?.nome?.toLowerCase().includes(searchTerm.toLowerCase());
    
    if (!matchesSearch) return false;
    
    if (filterType === 'ALL') return true;
    
    let type = 'OUTRO';
    
    // Verificar primeiro se tem metadados
    if (portfolio.metadata?.tipo) {
      switch (portfolio.metadata.tipo) {
        case 'FII':
          type = 'FII';
          break;
        case 'ACAO':
          type = 'ACAO_BR';
          break;
        case 'STOCK':
        case 'ETF':
        case 'REIT':
          type = 'EUA';
          break;
        case 'TESOURO_DIRETO':
          type = 'TESOURO_DIRETO';
          break;
        default:
          type = 'OUTRO';
      }
    } else {
      // Fallback para lógica anterior se não tem metadados
      if (portfolio.ticker.endsWith('11')) type = 'FII';
      else if (portfolio.ticker.endsWith('3') || portfolio.ticker.endsWith('4')) type = 'ACAO_BR';
      else if (['VOO', 'VNQ', 'DVN', 'EVEX', 'O'].includes(portfolio.ticker)) type = 'EUA';
      else if (portfolio.ticker.includes('TESOURO')) type = 'TESOURO_DIRETO';
    }
    
    return type === filterType;
  });

  // Portfolios ativos (com posição > 0)
  const activePortfolios = filteredPortfolios.filter(p => p.currentPosition > 0);

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="space-y-8"
    >
      {/* 🎯 HEADER */}
      <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4">
        <div>
          <h1 className="text-4xl font-bold bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent mb-2">
            Gestão do Portfólio
          </h1>
          <p className="text-slate-400 text-lg">
            Gerencie seus {activePortfolios.length} ativos em carteira
          </p>
        </div>
        
        {/* Botões de Ação */}
        <div className="flex gap-3">
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={onNewAsset}
            className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white px-6 py-3 rounded-xl flex items-center gap-2 shadow-lg"
          >
            <Plus className="w-5 h-5" />
            Novo Ativo
          </motion.button>
          
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={onAddInvestment}
            className="bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white px-6 py-3 rounded-xl flex items-center gap-2 shadow-lg"
          >
            <Plus className="w-5 h-5" />
            Nova Operação
          </motion.button>
        </div>
      </div>

      {/* 🔍 CONTROLES DE FILTRO E BUSCA */}
      <div className="bg-slate-800/50 backdrop-blur-xl rounded-2xl p-6 border border-slate-700/50">
        <div className="flex flex-col lg:flex-row gap-4">
          {/* Busca */}
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400" />
            <input
              type="text"
              placeholder="Buscar por ticker ou nome..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full bg-slate-700/50 border border-slate-600 rounded-xl py-3 pl-10 pr-4 text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          
          {/* Filtro por Tipo */}
          <div className="flex items-center gap-2">
            <Filter className="w-5 h-5 text-slate-400" />
            <select
              value={filterType}
              onChange={(e) => setFilterType(e.target.value as 'ALL' | 'FII' | 'ACAO_BR' | 'EUA' | 'TESOURO_DIRETO')}
              className="bg-slate-700/50 border border-slate-600 rounded-xl py-3 px-4 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="ALL">Todos os Tipos</option>
              <option value="FII">FIIs</option>
              <option value="ACAO_BR">Ações Brasil</option>
              <option value="EUA">Internacional (EUA)</option>
              <option value="TESOURO_DIRETO">Tesouro Direto</option>
            </select>
          </div>
          
          {/* Modo de Visualização */}
          <div className="flex items-center gap-2 bg-slate-700/50 rounded-xl p-1">
            <button
              onClick={() => setViewMode('grid')}
              className={`p-2 rounded-lg transition-colors ${
                viewMode === 'grid' ? 'bg-blue-600 text-white' : 'text-slate-400 hover:text-white'
              }`}
            >
              <Grid className="w-5 h-5" />
            </button>
            <button
              onClick={() => setViewMode('list')}
              className={`p-2 rounded-lg transition-colors ${
                viewMode === 'list' ? 'bg-blue-600 text-white' : 'text-slate-400 hover:text-white'
              }`}
            >
              <List className="w-5 h-5" />
            </button>
          </div>
        </div>
        
        {/* Estatísticas Rápidas */}
        <div className="flex flex-wrap gap-4 mt-4 pt-4 border-t border-slate-700/50">
          <div className="text-center">
            <div className="text-2xl font-bold text-blue-400">{activePortfolios.length}</div>
            <div className="text-sm text-slate-400">Ativos Ativos</div>
          </div>
          
          <div className="text-center">
            <div className="text-2xl font-bold text-green-400">
              {filteredPortfolios.filter(p => 
                p.metadata?.tipo === 'FII' || (!p.metadata && p.ticker.endsWith('11'))
              ).length}
            </div>
            <div className="text-sm text-slate-400">FIIs</div>
          </div>
          
          <div className="text-center">
            <div className="text-2xl font-bold text-purple-400">
              {filteredPortfolios.filter(p => 
                p.metadata?.tipo === 'ACAO' || (!p.metadata && (p.ticker.endsWith('3') || p.ticker.endsWith('4')))
              ).length}
            </div>
            <div className="text-sm text-slate-400">Ações BR</div>
          </div>
          
          <div className="text-center">
            <div className="text-2xl font-bold text-orange-400">
              {filteredPortfolios.filter(p => 
                ['STOCK', 'ETF', 'REIT'].includes(p.metadata?.tipo) || 
                (!p.metadata && ['VOO', 'VNQ', 'DVN', 'EVEX', 'O'].includes(p.ticker))
              ).length}
            </div>
            <div className="text-sm text-slate-400">Internacional</div>
          </div>
          
          <div className="text-center">
            <div className="text-2xl font-bold text-emerald-400">
              {filteredPortfolios.filter(p => 
                p.metadata?.tipo === 'TESOURO_DIRETO' || (!p.metadata && p.ticker.includes('TESOURO'))
              ).length}
            </div>
            <div className="text-sm text-slate-400">Tesouro</div>
          </div>
        </div>
      </div>

      {/* 📊 PORTFOLIO GRID/LIST */}
      <AnimatePresence mode="wait">
        {viewMode === 'grid' ? (
          <motion.div
            key="grid"
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.95 }}
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6"
          >
            {activePortfolios.map((portfolio, index) => (
              <motion.div
                key={portfolio.ticker}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.05 }}
              >
                <AssetCard 
                  portfolio={portfolio}
                  onClick={() => setSelectedAsset(
                    selectedAsset === portfolio.ticker ? null : portfolio.ticker
                  )}
                  isActive={selectedAsset === portfolio.ticker}
                  index={index}
                />
              </motion.div>
            ))}
          </motion.div>
        ) : (
          <motion.div
            key="list"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="space-y-4"
          >
            {activePortfolios.map((portfolio, index) => (
              <motion.div
                key={portfolio.ticker}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: index * 0.03 }}
                className="bg-slate-800/50 backdrop-blur-xl rounded-xl p-6 border border-slate-700/50 hover:border-slate-600/50 transition-colors cursor-pointer"
                onClick={() => setSelectedAsset(
                  selectedAsset === portfolio.ticker ? null : portfolio.ticker
                )}
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-4">
                    <div className="text-2xl">
                      {portfolio.metadata?.pais === 'EUA' ? '🇺🇸' : '🇧🇷'}
                    </div>
                    <div>
                      <h3 className="text-xl font-bold text-white">{portfolio.ticker}</h3>
                      <p className="text-slate-400">{portfolio.metadata?.nome || 'N/A'}</p>
                      <p className="text-sm text-slate-500">
                        {portfolio.currentPosition} cotas
                      </p>
                    </div>
                  </div>
                  
                  <div className="text-right">
                    <div className="text-xl font-bold text-white">
                      R$ {portfolio.marketValue.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
                    </div>
                    <div className={`text-sm ${portfolio.profitPercent >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                      {portfolio.profitPercent >= 0 ? '+' : ''}{portfolio.profitPercent.toFixed(2)}%
                    </div>
                    <div className="text-sm text-slate-400">
                      DY: {portfolio.totalYield.toFixed(2)}%
                    </div>
                  </div>
                </div>
              </motion.div>
            ))}
          </motion.div>
        )}
      </AnimatePresence>

      {/* 📋 SUMMARY DO ATIVO SELECIONADO */}
      <AnimatePresence>
        {selectedAsset && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.3 }}
          >
            <Summary 
              portfolio={activePortfolios.find(p => p.ticker === selectedAsset)!}
              marketData={null}
            />
          </motion.div>
        )}
      </AnimatePresence>

      {/* 📊 MENSAGEM QUANDO NÃO HÁ RESULTADOS */}
      {activePortfolios.length === 0 && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="text-center py-12"
        >
          <div className="text-6xl mb-4">📈</div>
          <h3 className="text-xl font-bold text-white mb-2">
            Nenhum ativo encontrado
          </h3>
          <p className="text-slate-400">
            Ajuste os filtros ou adicione novos investimentos
          </p>
        </motion.div>
      )}
    </motion.div>
  );
};

export default PortfolioTab; 

# ==============================================================================
# ARQUIVO: src\components\SettingsTab.tsx
# ==============================================================================

import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { 
  Settings, 
  User, 
  Shield, 
  Database, 
  Bell, 
  Moon, 
  Sun, 
  Download,
  Upload,
  RefreshCw,
  Trash2,
  Eye,
  EyeOff,
  LogOut
} from 'lucide-react';

interface SettingsTabProps {
  onLogout: () => void;
}

const SettingsTab: React.FC<SettingsTabProps> = ({ onLogout }) => {
  const [notifications, setNotifications] = useState(true);
  const [darkMode, setDarkMode] = useState(true);
  const [showValues, setShowValues] = useState(true);
  const [autoRefresh, setAutoRefresh] = useState(true);

  const clearCache = () => {
    localStorage.removeItem('portfolioCache');
    localStorage.removeItem('marketCache');
    alert('Cache limpo com sucesso!');
  };

  const exportData = () => {
    // Simular export de dados
    alert('Funcionalidade de export em desenvolvimento');
  };

  const importData = () => {
    // Simular import de dados
    alert('Funcionalidade de import em desenvolvimento');
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="space-y-8"
    >
      {/* 🎯 HEADER */}
      <div className="text-center mb-8">
        <h1 className="text-4xl font-bold bg-gradient-to-r from-orange-400 to-red-400 bg-clip-text text-transparent mb-4">
          Configurações
        </h1>
        <p className="text-slate-400 text-lg">
          Personalize sua experiência no Erasmo Invest
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* 👤 PERFIL DO USUÁRIO */}
        <motion.div
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ delay: 0.1 }}
          className="bg-slate-800/50 backdrop-blur-xl rounded-2xl p-6 border border-slate-700/50"
        >
          <h3 className="text-xl font-bold text-white mb-6 flex items-center gap-2">
            <User className="w-5 h-5 text-blue-400" />
            Perfil do Usuário
          </h3>
          
          <div className="space-y-4">
            <div className="flex items-center gap-4">
              <div className="w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white text-2xl font-bold">
                E
              </div>
              <div>
                <h4 className="text-lg font-semibold text-white">Erasmo Russo</h4>
                <p className="text-slate-400">erasmorusso@uol.com.br</p>
                <p className="text-sm text-slate-500">Usuário desde: Janeiro 2024</p>
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-4 pt-4 border-t border-slate-700/50">
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-400">15+</div>
                <div className="text-sm text-slate-400">Ativos</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-400">2+</div>
                <div className="text-sm text-slate-400">Anos Investindo</div>
              </div>
            </div>
          </div>
        </motion.div>

        {/* 🔧 PREFERÊNCIAS */}
        <motion.div
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ delay: 0.2 }}
          className="bg-slate-800/50 backdrop-blur-xl rounded-2xl p-6 border border-slate-700/50"
        >
          <h3 className="text-xl font-bold text-white mb-6 flex items-center gap-2">
            <Settings className="w-5 h-5 text-green-400" />
            Preferências
          </h3>
          
          <div className="space-y-6">
            {/* Notificações */}
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <Bell className="w-5 h-5 text-yellow-400" />
                <div>
                  <div className="font-medium text-white">Notificações</div>
                  <div className="text-sm text-slate-400">Alertas de preços e dividendos</div>
                </div>
              </div>
              <button
                onClick={() => setNotifications(!notifications)}
                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                  notifications ? 'bg-blue-600' : 'bg-slate-600'
                }`}
              >
                <span
                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                    notifications ? 'translate-x-6' : 'translate-x-1'
                  }`}
                />
              </button>
            </div>

            {/* Modo Escuro */}
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                {darkMode ? <Moon className="w-5 h-5 text-purple-400" /> : <Sun className="w-5 h-5 text-yellow-400" />}
                <div>
                  <div className="font-medium text-white">Modo Escuro</div>
                  <div className="text-sm text-slate-400">Tema da interface</div>
                </div>
              </div>
              <button
                onClick={() => setDarkMode(!darkMode)}
                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                  darkMode ? 'bg-purple-600' : 'bg-slate-600'
                }`}
              >
                <span
                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                    darkMode ? 'translate-x-6' : 'translate-x-1'
                  }`}
                />
              </button>
            </div>

            {/* Mostrar Valores */}
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                {showValues ? <Eye className="w-5 h-5 text-green-400" /> : <EyeOff className="w-5 h-5 text-red-400" />}
                <div>
                  <div className="font-medium text-white">Mostrar Valores</div>
                  <div className="text-sm text-slate-400">Exibir valores monetários</div>
                </div>
              </div>
              <button
                onClick={() => setShowValues(!showValues)}
                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                  showValues ? 'bg-green-600' : 'bg-slate-600'
                }`}
              >
                <span
                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                    showValues ? 'translate-x-6' : 'translate-x-1'
                  }`}
                />
              </button>
            </div>

            {/* Auto Refresh */}
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <RefreshCw className="w-5 h-5 text-blue-400" />
                <div>
                  <div className="font-medium text-white">Atualização Automática</div>
                  <div className="text-sm text-slate-400">Refresh automático dos preços</div>
                </div>
              </div>
              <button
                onClick={() => setAutoRefresh(!autoRefresh)}
                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                  autoRefresh ? 'bg-blue-600' : 'bg-slate-600'
                }`}
              >
                <span
                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                    autoRefresh ? 'translate-x-6' : 'translate-x-1'
                  }`}
                />
              </button>
            </div>
          </div>
        </motion.div>

        {/* 🛡️ SEGURANÇA */}
        <motion.div
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ delay: 0.3 }}
          className="bg-slate-800/50 backdrop-blur-xl rounded-2xl p-6 border border-slate-700/50"
        >
          <h3 className="text-xl font-bold text-white mb-6 flex items-center gap-2">
            <Shield className="w-5 h-5 text-red-400" />
            Segurança
          </h3>
          
          <div className="space-y-4">
            <div className="p-4 bg-green-900/20 border border-green-500/30 rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <Shield className="w-4 h-4 text-green-400" />
                <span className="font-medium text-green-400">Sessão Segura</span>
              </div>
              <p className="text-sm text-slate-300">
                Sua sessão está protegida e os dados são criptografados.
              </p>
            </div>
            
            <div className="space-y-3">
              <button className="w-full bg-slate-700/50 hover:bg-slate-700 text-white py-3 px-4 rounded-lg transition-colors text-left">
                <div className="font-medium">Alterar Senha</div>
                <div className="text-sm text-slate-400">Atualizar sua senha de acesso</div>
              </button>
              
              <button className="w-full bg-slate-700/50 hover:bg-slate-700 text-white py-3 px-4 rounded-lg transition-colors text-left">
                <div className="font-medium">Histórico de Acessos</div>
                <div className="text-sm text-slate-400">Ver logins recentes</div>
              </button>
            </div>
          </div>
        </motion.div>

        {/* 🗄️ DADOS */}
        <motion.div
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ delay: 0.4 }}
          className="bg-slate-800/50 backdrop-blur-xl rounded-2xl p-6 border border-slate-700/50"
        >
          <h3 className="text-xl font-bold text-white mb-6 flex items-center gap-2">
            <Database className="w-5 h-5 text-purple-400" />
            Gerenciar Dados
          </h3>
          
          <div className="space-y-3">
            <button
              onClick={exportData}
              className="w-full bg-blue-600/20 hover:bg-blue-600/30 border border-blue-500/30 text-blue-300 py-3 px-4 rounded-lg transition-colors flex items-center gap-2"
            >
              <Download className="w-4 h-4" />
              Exportar Dados
            </button>
            
            <button
              onClick={importData}
              className="w-full bg-green-600/20 hover:bg-green-600/30 border border-green-500/30 text-green-300 py-3 px-4 rounded-lg transition-colors flex items-center gap-2"
            >
              <Upload className="w-4 h-4" />
              Importar Dados
            </button>
            
            <button
              onClick={clearCache}
              className="w-full bg-yellow-600/20 hover:bg-yellow-600/30 border border-yellow-500/30 text-yellow-300 py-3 px-4 rounded-lg transition-colors flex items-center gap-2"
            >
              <RefreshCw className="w-4 h-4" />
              Limpar Cache
            </button>
            
            <button className="w-full bg-red-600/20 hover:bg-red-600/30 border border-red-500/30 text-red-300 py-3 px-4 rounded-lg transition-colors flex items-center gap-2">
              <Trash2 className="w-4 h-4" />
              Limpar Todos os Dados
            </button>
          </div>
        </motion.div>
      </div>

      {/* 🚪 LOGOUT */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.5 }}
        className="bg-red-900/20 backdrop-blur-xl rounded-2xl p-6 border border-red-500/30"
      >
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-lg font-bold text-red-400 mb-2">Sair do Sistema</h3>
            <p className="text-slate-400">
              Desconectar da sua conta do Erasmo Invest
            </p>
          </div>
          <button
            onClick={onLogout}
            className="bg-red-600 hover:bg-red-700 text-white px-6 py-3 rounded-xl flex items-center gap-2 transition-colors"
          >
            <LogOut className="w-5 h-5" />
            Sair
          </button>
        </div>
      </motion.div>
    </motion.div>
  );
};

export default SettingsTab; 

# ==============================================================================
# ARQUIVO: src\components\Summary.tsx
# ==============================================================================

import React from 'react';
import { motion } from 'framer-motion';
import { TrendingUp, TrendingDown, DollarSign, Target } from 'lucide-react';
import { Portfolio } from '../types/investment';
import AssetDetails from './AssetDetails';

interface SummaryProps {
  portfolio: Portfolio;
  marketData: any;
}

const Summary: React.FC<SummaryProps> = ({ portfolio, marketData }) => {
  // 🔍 DEBUG: Log dos dados recebidos
  console.log('📊 Summary carregado para:', portfolio.ticker, {
    totalInvested: portfolio.totalInvested,
    currentPosition: portfolio.currentPosition,
    marketValue: portfolio.marketValue,
    profit: portfolio.profit,
    hasMetadata: !!portfolio.metadata,
    marketData: marketData
  });

  const formatNumber = (num: number) => {
    return num.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
  };

  const summaryCards = [
    {
      title: 'Total Investido',
      value: `R$ ${formatNumber(portfolio.totalInvested)}`,
      icon: DollarSign,
      color: 'text-blue-400',
      bgColor: 'bg-blue-500/20'
    },
    {
      title: 'Valor de Mercado',
      value: `R$ ${formatNumber(portfolio.marketValue)}`,
      icon: TrendingUp,
      color: 'text-green-400',
      bgColor: 'bg-green-500/20'
    },
    {
      title: 'Lucro/Prejuízo',
      value: `R$ ${formatNumber(portfolio.profit)}`,
      icon: portfolio.profit >= 0 ? TrendingUp : TrendingDown,
      color: portfolio.profit >= 0 ? 'text-green-400' : 'text-red-400',
      bgColor: portfolio.profit >= 0 ? 'bg-green-500/20' : 'bg-red-500/20'
    },
    {
      title: 'Rentabilidade',
      value: `${formatNumber(portfolio.profitPercent)}%`,
      icon: Target,
      color: portfolio.profitPercent >= 0 ? 'text-green-400' : 'text-red-400',
      bgColor: portfolio.profitPercent >= 0 ? 'bg-green-500/20' : 'bg-red-500/20'
    },
    {
      title: 'Total Dividendos',
      value: `R$ ${formatNumber(portfolio.totalDividends)}`,
      icon: DollarSign,
      color: 'text-purple-400',
      bgColor: 'bg-purple-500/20'
    },
    {
      title: 'Total Juros',
      value: `R$ ${formatNumber(portfolio.totalJuros)}`,
      icon: DollarSign,
      color: 'text-yellow-400',
      bgColor: 'bg-yellow-500/20'
    },
    {
      title: 'Yield Total',
      value: `${formatNumber(portfolio.totalYield)}%`,
      icon: Target,
      color: 'text-orange-400',
      bgColor: 'bg-orange-500/20'
    },
    {
      title: 'Posição Atual',
      value: `${portfolio.currentPosition} cotas`,
      icon: TrendingUp,
      color: 'text-cyan-400',
      bgColor: 'bg-cyan-500/20'
    }
  ];

  return (
    <div className="space-y-8">
      {/* 🎯 HEADER PRINCIPAL MELHORADO COM TODOS OS DADOS */}
      <AssetDetails 
        metadata={portfolio.metadata}
        totalInvested={portfolio.totalInvested}
        totalYield={portfolio.totalYield}
        currentPosition={portfolio.currentPosition}
      />
      
      {/* 📊 CARDS DE RESUMO DETALHADO */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {summaryCards.map((card, index) => (
          <motion.div
            key={card.title}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
            className="bg-slate-800 rounded-xl p-6 border border-slate-700 hover:border-slate-600 transition-all"
          >
            <div className="flex items-center justify-between mb-4">
              <div className={`p-3 rounded-lg ${card.bgColor}`}>
                <card.icon className={`w-6 h-6 ${card.color}`} />
              </div>
              {marketData && (
                <div className="text-right">
                  <div className="text-xs text-slate-400">Preço Atual</div>
                  <div className="text-sm font-semibold text-white">
                    R$ {formatNumber(marketData.price)}
                  </div>
                </div>
              )}
            </div>
            <h3 className="text-sm font-medium text-slate-400 mb-2">
              {card.title}
            </h3>
            <p className={`text-2xl font-bold ${card.color}`}>
              {card.value}
            </p>
          </motion.div>
        ))}
      </div>
    </div>
  );
};

export default Summary;

# ==============================================================================
# ARQUIVO: src\components\Tabs.tsx
# ==============================================================================

import React from 'react';
import { motion } from 'framer-motion';

interface TabsProps {
  tabs: string[];
  activeTab: string;
  onTabChange: (tab: string) => void;
}

const Tabs: React.FC<TabsProps> = ({ tabs, activeTab, onTabChange }) => {
  return (
    <div className="flex space-x-2 overflow-x-auto pb-2 mb-6 border-b border-slate-700">
      {tabs.map((tab) => (
        <motion.button
          key={tab}
          onClick={() => onTabChange(tab)}
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          className={`px-6 py-3 rounded-lg whitespace-nowrap font-medium transition-all ${
            activeTab === tab
              ? 'bg-blue-600 text-white shadow-lg shadow-blue-500/25'
              : 'bg-slate-700 text-slate-300 hover:bg-slate-600'
          }`}
        >
          {tab}
        </motion.button>
      ))}
    </div>
  );
};

export default Tabs;

# ==============================================================================
# ARQUIVO: src\components\TextCommandInput.tsx
# ==============================================================================

import React, { useState } from 'react';
import { Send, X, Clock, Lightbulb } from 'lucide-react';
import { voiceService } from '../services/voiceCommandService';
import { VoiceCommandResult } from '../services/types';

interface TextCommandInputProps {
  isVisible: boolean;
  onClose: () => void;
  onSuccess?: (result: VoiceCommandResult) => void;
}

const EXAMPLE_COMMANDS = [
  "Adicione 10 ações da Petrobras por 35 reais",
  "Como está meu portfólio?", 
  "Quantas ações da Vale eu tenho?",
  "Qual o valor total investido?",
  "Comprei 5 ações do Banco do Brasil por 25,50"
];

export const TextCommandInput: React.FC<TextCommandInputProps> = ({
  isVisible,
  onClose,
  onSuccess
}) => {
  const [command, setCommand] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!command.trim()) return;

    setIsProcessing(true);
    setError(null);

    try {
      const result = await voiceService.processTextCommand(command);
      
      if (result) {
        // Notifica o sucesso com o resultado do processamento
        onSuccess?.(result);
        
        // Limpa o comando e fecha o modal
        setCommand('');
        onClose();
      } else {
        setError('Erro ao processar comando');
      }
    } catch (error) {
      console.error('Erro no comando de texto:', error);
      setError(error instanceof Error ? error.message : 'Erro desconhecido');
    } finally {
      setIsProcessing(false);
    }
  };

  const handleExampleClick = (example: string) => {
    setCommand(example);
  };

  if (!isVisible) return null;

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
      <div className="bg-slate-800 rounded-2xl p-6 w-full max-w-2xl border border-slate-700/50 shadow-2xl">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-xl font-bold text-white">Comando de Texto</h3>
          <button
            onClick={onClose}
            className="text-slate-400 hover:text-white transition-colors"
          >
            <X className="w-5 h-5" />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="relative">
            <textarea
              value={command}
              onChange={(e) => setCommand(e.target.value)}
              placeholder="Digite seu comando aqui... (ex: Adicione 10 ações da Vale por 25 reais)"
              className="w-full p-4 bg-slate-700/50 border border-slate-600/50 rounded-xl text-white placeholder-slate-400 resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              rows={3}
              disabled={isProcessing}
            />
          </div>

          {error && (
            <div className="bg-red-900/20 border border-red-500/30 rounded-xl p-3">
              <div className="text-red-300 text-sm">
                {error}
              </div>
            </div>
          )}

          <div className="flex items-center justify-between">
            <button
              type="submit"
              disabled={!command.trim() || isProcessing}
              className="flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-blue-500 to-indigo-500 hover:from-blue-600 hover:to-indigo-600 disabled:from-gray-600 disabled:to-gray-700 text-white rounded-xl font-medium transition-all duration-300 disabled:cursor-not-allowed"
            >
              {isProcessing ? (
                <>
                  <Clock className="w-4 h-4 animate-spin" />
                  <span>Processando...</span>
                </>
              ) : (
                <>
                  <Send className="w-4 h-4" />
                  <span>Enviar Comando</span>
                </>
              )}
            </button>

            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 text-slate-400 hover:text-white transition-colors"
            >
              Cancelar
            </button>
          </div>
        </form>

        <div className="mt-6 pt-6 border-t border-slate-700/50">
          <div className="flex items-center gap-2 mb-3">
            <Lightbulb className="w-4 h-4 text-yellow-400" />
            <span className="text-sm font-medium text-slate-300">Exemplos de comandos:</span>
          </div>
          
          <div className="grid grid-cols-1 gap-2">
            {EXAMPLE_COMMANDS.map((example, index) => (
              <button
                key={index}
                onClick={() => handleExampleClick(example)}
                className="text-left p-3 bg-slate-700/30 hover:bg-slate-700/50 border border-slate-600/30 rounded-lg text-sm text-slate-300 hover:text-white transition-all duration-200"
                disabled={isProcessing}
              >
                "{example}"
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}; 

# ==============================================================================
# ARQUIVO: src\components\VoiceCommandButton.tsx
# ==============================================================================

import { useState, useEffect } from 'react';
import { Mic, MicOff, Volume2, Brain, Sparkles, HelpCircle, Type } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { voiceService } from '../services/voiceCommandService';
import { VoiceCommandResult, VoiceCommandCallbacks } from '../services/types';
import VoiceCommandHelp from './VoiceCommandHelp';
import { TextCommandInput } from './TextCommandInput';

interface VoiceCommandButtonProps {
  className?: string;
}

export default function VoiceCommandButton({ className = '' }: VoiceCommandButtonProps) {
  const [isRecording, setIsRecording] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [transcription, setTranscription] = useState('');
  const [commandResult, setCommandResult] = useState<string>('');
  const [isPlayingAudio, setIsPlayingAudio] = useState(false);
  const [isSupported, setIsSupported] = useState(true);
  const [showHelp, setShowHelp] = useState(false);
  const [showTextInput, setShowTextInput] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    // Verificar se o navegador suporta as APIs necessárias
    const checkSupport = () => {
      const hasMediaDevices = !!navigator.mediaDevices?.getUserMedia;
      const hasMediaRecorder = !!window.MediaRecorder;
      const hasFetch = !!window.fetch;
      
      setIsSupported(hasMediaDevices && hasMediaRecorder && hasFetch);
      
      if (!hasMediaDevices) {
        console.warn('MediaDevices API não suportada');
      }
      if (!hasMediaRecorder) {
        console.warn('MediaRecorder API não suportada');
      }
    };

    checkSupport();

    // Limpar ao desmontar
    return () => {
      voiceService.cleanup();
    };
  }, []);

  // Callbacks para o voice service
  const callbacks: VoiceCommandCallbacks = {
    onRecordingStart: () => {
      setIsRecording(true);
      setError(null);
      setTranscription('');
      setCommandResult('');
    },
    onRecordingStop: () => {
      setIsRecording(false);
      setIsProcessing(true);
    },
    onTranscriptionUpdate: (text) => {
      setTranscription(text);
      setIsProcessing(false);
    },
    onCommandResult: (result: VoiceCommandResult) => {
      console.log('Comando processado:', result);
      setCommandResult(result.message || result.confirmation || 'Comando processado');
      setIsProcessing(false);
    },
    onAudioStart: () => {
      setIsPlayingAudio(true);
    },
    onAudioEnd: () => {
      setIsPlayingAudio(false);
    },
    onError: (errorMessage) => {
      setError(errorMessage);
      setIsRecording(false);
      setIsProcessing(false);
    }
  };

  const handleMouseDown = async () => {
    if (!isSupported) {
      console.log('Comandos de voz não suportados neste navegador');
      return;
    }

    if (isRecording) {
      console.log('Já está gravando, ignorando...');
      return;
    }

    try {
      await voiceService.startRecording(callbacks);
    } catch (error) {
      console.error('Erro ao iniciar gravação:', error);
      setError('Erro ao iniciar gravação');
    }
  };

  const handleMouseUp = async () => {
    if (isRecording) {
      await voiceService.stopRecording();
    }
  };

  const handleMouseLeave = async () => {
    // Parar gravação se o mouse sair do botão
    if (isRecording) {
      await voiceService.stopRecording();
    }
  };

  const handleTextCommandSuccess = (result: VoiceCommandResult) => {
    console.log('Comando de texto processado:', result);
    setCommandResult(result.message || result.confirmation || 'Comando processado');
    
    // Limpar resultado após 8 segundos
    setTimeout(() => {
      setCommandResult('');
    }, 8000);
  };

  // Limpar resultado da transcrição e resposta quando necessário
  useEffect(() => {
    if (commandResult) {
      // Limpar resultado após 10 segundos
      const timer = setTimeout(() => {
        setCommandResult('');
      }, 10000);
      
      return () => clearTimeout(timer);
    }
  }, [commandResult]);

  useEffect(() => {
    if (transcription && !isProcessing) {
      // Limpar transcrição após 3 segundos quando não está processando
      const timer = setTimeout(() => {
        setTranscription('');
      }, 3000);
      
      return () => clearTimeout(timer);
    }
  }, [transcription, isProcessing]);

  // Limpar erro após 5 segundos
  useEffect(() => {
    if (error) {
      const timer = setTimeout(() => {
        setError(null);
      }, 5000);
      
      return () => clearTimeout(timer);
    }
  }, [error]);

  if (!isSupported) {
    return (
      <div className={`inline-flex items-center gap-2 px-4 py-2 bg-gray-600 text-gray-400 rounded-xl cursor-not-allowed ${className}`}>
        <MicOff className="w-5 h-5" />
        <span className="text-sm">Não suportado</span>
      </div>
    );
  }

  return (
    <>
      <div className={`relative flex items-center gap-3 ${className}`}>
        {/* Botão Principal de Voz */}
        <motion.button
          onMouseDown={handleMouseDown}
          onMouseUp={handleMouseUp}
          onMouseLeave={handleMouseLeave}
          className={`
            relative overflow-hidden
            flex items-center gap-3 px-6 py-3
            rounded-2xl font-medium text-white
            transition-all duration-300 ease-out
            ${isRecording 
              ? 'bg-gradient-to-r from-red-500 to-pink-500 shadow-xl shadow-red-500/25' 
              : isProcessing
              ? 'bg-gradient-to-r from-blue-500 to-purple-500 shadow-xl shadow-blue-500/25'
              : error
              ? 'bg-gradient-to-r from-red-600 to-red-700 shadow-xl shadow-red-500/25'
              : 'bg-gradient-to-r from-emerald-500 to-teal-500 shadow-lg shadow-emerald-500/25 hover:shadow-xl hover:shadow-emerald-500/30'
            }
            transform hover:scale-105 active:scale-95
            border border-white/10 backdrop-blur-sm
          `}
          whileTap={{ scale: 0.95 }}
          disabled={isProcessing}
        >
          {/* Fundo animado */}
          <div className="absolute inset-0 bg-gradient-to-r from-white/10 to-transparent opacity-0 hover:opacity-100 transition-opacity duration-300" />
          
          {/* Ícone */}
          <div className="relative z-10">
            <AnimatePresence mode="wait">
              {isRecording ? (
                <motion.div
                  key="recording"
                  initial={{ scale: 0, rotate: -180 }}
                  animate={{ scale: 1, rotate: 0 }}
                  exit={{ scale: 0, rotate: 180 }}
                  className="flex items-center"
                >
                  <Mic className="w-5 h-5 animate-pulse" />
                </motion.div>
              ) : isProcessing ? (
                <motion.div
                  key="processing"
                  initial={{ scale: 0, rotate: -180 }}
                  animate={{ scale: 1, rotate: 0 }}
                  exit={{ scale: 0, rotate: 180 }}
                  className="flex items-center"
                >
                  <Brain className="w-5 h-5 animate-spin" />
                </motion.div>
              ) : error ? (
                <motion.div
                  key="error"
                  initial={{ scale: 0, rotate: -180 }}
                  animate={{ scale: 1, rotate: 0 }}
                  exit={{ scale: 0, rotate: 180 }}
                  className="flex items-center"
                >
                  <MicOff className="w-5 h-5" />
                </motion.div>
              ) : (
                <motion.div
                  key="idle"
                  initial={{ scale: 0, rotate: -180 }}
                  animate={{ scale: 1, rotate: 0 }}
                  exit={{ scale: 0, rotate: 180 }}
                  className="flex items-center"
                >
                  <Volume2 className="w-5 h-5" />
                </motion.div>
              )}
            </AnimatePresence>
          </div>

          {/* Texto */}
          <div className="relative z-10">
            <AnimatePresence mode="wait">
              {isRecording ? (
                <motion.span
                  key="recording-text"
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -10 }}
                  className="text-sm font-bold"
                >
                  Gravando... (solte para parar)
                </motion.span>
              ) : isProcessing ? (
                <motion.span
                  key="processing-text"
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -10 }}
                  className="text-sm font-bold"
                >
                  Processando com IA...
                </motion.span>
              ) : error ? (
                <motion.span
                  key="error-text"
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -10 }}
                  className="text-sm font-bold"
                >
                  Erro - Tente novamente
                </motion.span>
              ) : (
                <motion.span
                  key="idle-text"
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -10 }}
                  className="text-sm font-bold"
                >
                  Comando de Voz
                </motion.span>
              )}
            </AnimatePresence>
          </div>

          {/* Sparkles para efeito visual */}
          {!isRecording && !isProcessing && !error && (
            <Sparkles className="w-4 h-4 text-white/70 relative z-10" />
          )}

          {/* Ondas de áudio animadas durante gravação */}
          {isRecording && (
            <div className="absolute inset-0 flex items-center justify-center">
              <div className="flex space-x-1">
                {[...Array(5)].map((_, i) => (
                  <motion.div
                    key={i}
                    className="w-1 bg-white/50 rounded-full"
                    animate={{
                      height: [4, 12, 4],
                    }}
                    transition={{
                      duration: 0.5,
                      repeat: Infinity,
                      delay: i * 0.1,
                    }}
                  />
                ))}
              </div>
            </div>
          )}
        </motion.button>

        {/* Botão de Comando de Texto */}
        <motion.button
          onClick={() => setShowTextInput(true)}
          className="flex items-center gap-2 px-4 py-3 bg-gradient-to-r from-blue-500 to-indigo-500 hover:from-blue-600 hover:to-indigo-600 text-white rounded-xl font-medium transition-all duration-300 hover:scale-105 transform shadow-lg shadow-blue-500/25"
          whileTap={{ scale: 0.95 }}
        >
          <Type className="w-4 h-4" />
          <span className="text-sm">Texto</span>
        </motion.button>

        {/* Botão de Ajuda */}
        <motion.button
          onClick={() => setShowHelp(true)}
          className="flex items-center gap-2 px-4 py-3 bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-500 hover:to-gray-600 text-white rounded-xl font-medium transition-all duration-300 hover:scale-105 transform shadow-lg"
          whileTap={{ scale: 0.95 }}
        >
          <HelpCircle className="w-4 h-4" />
          <span className="text-sm">Ajuda</span>
        </motion.button>

        {/* Indicador de transcrição e resposta */}
        <AnimatePresence>
          {(transcription || commandResult || error) && (
            <motion.div
              initial={{ opacity: 0, y: 10, scale: 0.9 }}
              animate={{ opacity: 1, y: 0, scale: 1 }}
              exit={{ opacity: 0, y: 10, scale: 0.9 }}
              className="absolute top-full mt-2 left-0 right-0 bg-slate-800/90 border border-slate-600/50 rounded-xl p-4 backdrop-blur-sm min-w-[400px] z-50"
            >
              {/* Erro */}
              {error && (
                <div className="mb-3">
                  <div className="text-xs text-red-400 mb-1 flex items-center gap-2">
                    <MicOff className="w-3 h-3" />
                    Erro:
                  </div>
                  <div className="text-sm text-red-300 bg-red-900/20 border border-red-500/30 rounded-lg p-2">
                    {error}
                  </div>
                </div>
              )}

              {/* Transcrição */}
              {transcription && !error && (
                <div className="mb-3">
                  <div className="text-xs text-slate-400 mb-1 flex items-center gap-2">
                    <Mic className="w-3 h-3" />
                    Você disse:
                  </div>
                  <div className="text-sm text-white bg-slate-700/50 rounded-lg p-2">
                    "{transcription}"
                  </div>
                </div>
              )}

              {/* Resposta do Sistema */}
              {commandResult && !error && (
                <div>
                  <div className="text-xs text-slate-400 mb-1 flex items-center gap-2">
                    <Brain className="w-3 h-3" />
                    {isPlayingAudio && <Volume2 className="w-3 h-3 animate-pulse text-green-400" />}
                    Erasmo Invest:
                  </div>
                  <div className="text-sm text-green-300 bg-green-900/20 border border-green-500/30 rounded-lg p-2">
                    {commandResult}
                  </div>
                </div>
              )}
            </motion.div>
          )}
        </AnimatePresence>

        {/* Instruções de uso (tooltip) */}
        <div className="absolute -top-12 left-1/2 transform -translate-x-1/2 bg-slate-900/90 text-white text-xs px-3 py-1 rounded-lg opacity-0 hover:opacity-100 transition-opacity duration-300 pointer-events-none whitespace-nowrap">
          Pressione e segure para gravar comando
        </div>
      </div>

      {/* Modal de Ajuda */}
      <VoiceCommandHelp 
        isOpen={showHelp} 
        onClose={() => setShowHelp(false)} 
      />

      {/* Modal de Comando de Texto */}
      <TextCommandInput
        isVisible={showTextInput}
        onClose={() => setShowTextInput(false)}
        onSuccess={handleTextCommandSuccess}
      />
    </>
  );
} 

# ==============================================================================
# ARQUIVO: src\components\VoiceCommandHelp.tsx
# ==============================================================================

import { motion, AnimatePresence } from 'framer-motion';
import { X, Mic, MessageSquare, TrendingUp, Sparkles } from 'lucide-react';

interface VoiceCommandHelpProps {
  isOpen: boolean;
  onClose: () => void;
}

export default function VoiceCommandHelp({ isOpen, onClose }: VoiceCommandHelpProps) {
  const commands = [
    {
      category: 'Adicionar Investimentos',
      icon: TrendingUp,
      color: 'from-green-500 to-emerald-500',
      examples: [
        'Adicione 10 ações da Petrobras por 35 reais cada',
        'Comprei 5 ações do Banco do Brasil a 25 e 50 centavos ontem',
        'Inclua 20 cotas do ALZR11 com preço de 110 reais na data de hoje',
        'Adicione 100 ações da Vale por 65 reais em 15 de janeiro'
      ]
    },
    {
      category: 'Consultar Portfólio',
      icon: MessageSquare,
      color: 'from-blue-500 to-cyan-500',
      examples: [
        'Como está meu portfólio?',
        'Qual o valor total investido?',
        'Mostra minhas ações',
        'Quantos ativos eu tenho?'
      ]
    },
    {
      category: 'Consultar Ativos',
      icon: Sparkles,
      color: 'from-purple-500 to-pink-500',
      examples: [
        'Como está a Petrobras?',
        'Preço médio do BBAS3',
        'Quantas ações da Vale eu tenho?',
        'Como está meu ALZR11?'
      ]
    }
  ];

  return (
    <AnimatePresence>
      {isOpen && (
        <>
          {/* Overlay */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50"
            onClick={onClose}
          />

          {/* Modal */}
          <motion.div
            initial={{ opacity: 0, scale: 0.9, y: 20 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.9, y: 20 }}
            className="fixed inset-0 z-50 flex items-center justify-center p-4"
          >
            <div className="bg-slate-900/95 border border-slate-700/50 rounded-2xl p-6 max-w-4xl w-full max-h-[90vh] overflow-y-auto backdrop-blur-xl">
              {/* Header */}
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center gap-3">
                  <div className="bg-gradient-to-r from-emerald-500 to-teal-500 p-3 rounded-xl">
                    <Mic className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <h2 className="text-2xl font-bold text-white">Comandos de Voz</h2>
                    <p className="text-slate-400">Controle seus investimentos com sua voz</p>
                  </div>
                </div>
                
                <button
                  onClick={onClose}
                  className="text-slate-400 hover:text-white transition-colors p-2 hover:bg-slate-800 rounded-lg"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>

              {/* Instruções gerais */}
              <div className="bg-gradient-to-r from-blue-500/10 to-purple-500/10 border border-blue-500/20 rounded-xl p-4 mb-6">
                <h3 className="text-lg font-semibold text-white mb-2">Como usar:</h3>
                <ol className="text-slate-300 space-y-1 text-sm">
                  <li>1. <strong>Pressione e segure</strong> o botão de comando de voz</li>
                  <li>2. <strong>Fale claramente</strong> seu comando em português</li>
                  <li>3. <strong>Solte o botão</strong> quando terminar</li>
                  <li>4. <strong>Aguarde</strong> o processamento com IA</li>
                </ol>
              </div>

              {/* Categorias de comandos */}
              <div className="space-y-6">
                {commands.map((category, index) => {
                  const Icon = category.icon;
                  
                  return (
                    <motion.div
                      key={category.category}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.1 }}
                      className="bg-slate-800/50 border border-slate-700/50 rounded-xl p-5"
                    >
                      <div className="flex items-center gap-3 mb-4">
                        <div className={`bg-gradient-to-r ${category.color} p-2 rounded-lg`}>
                          <Icon className="w-5 h-5 text-white" />
                        </div>
                        <h3 className="text-lg font-semibold text-white">{category.category}</h3>
                      </div>
                      
                      <div className="grid gap-2">
                        {category.examples.map((example, exampleIndex) => (
                          <motion.div
                            key={exampleIndex}
                            initial={{ opacity: 0 }}
                            animate={{ opacity: 1 }}
                            transition={{ delay: (index * 0.1) + (exampleIndex * 0.05) }}
                            className="bg-slate-700/50 border border-slate-600/50 rounded-lg p-3 text-slate-300 text-sm"
                          >
                            <span className="text-slate-500">"</span>
                            {example}
                            <span className="text-slate-500">"</span>
                          </motion.div>
                        ))}
                      </div>
                    </motion.div>
                  );
                })}
              </div>

              {/* Dicas importantes */}
              <div className="mt-6 bg-gradient-to-r from-amber-500/10 to-orange-500/10 border border-amber-500/20 rounded-xl p-4">
                <h3 className="text-lg font-semibold text-white mb-2">💡 Dicas importantes:</h3>
                <ul className="text-slate-300 space-y-1 text-sm">
                  <li>• <strong>Fale claramente</strong> e em ritmo normal</li>
                  <li>• <strong>Mencione valores</strong> como "25 e 50 centavos" para R$ 25,50</li>
                  <li>• <strong>Use datas</strong> como "hoje", "ontem" ou "15 de janeiro"</li>
                  <li>• <strong>Nomes populares</strong> como "Petrobras" são reconhecidos automaticamente</li>
                  <li>• <strong>Ambiente silencioso</strong> melhora a precisão da transcrição</li>
                </ul>
              </div>

              {/* Powered by */}
              <div className="mt-6 text-center text-slate-500 text-xs">
                <p>Powered by OpenAI Whisper + Mistral AI</p>
              </div>
            </div>
          </motion.div>
        </>
      )}
    </AnimatePresence>
  );
} 

# ==============================================================================
# ARQUIVO: src\data\assetMetadata.ts
# ==============================================================================

import { AssetMetadata } from '../types/investment';

export const assetMetadata: Record<string, AssetMetadata> = {
  'ALZR11': {
    ticker: 'ALZR11',
    nome: 'Alianza Trust Renda Imobiliária',
    tipo: 'FII',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Fundos Imobiliários',
    subsetor: 'Lajes Corporativas',
    segmento: 'Tijolo',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_FIXA',
    benchmark: 'IFIX',
    isin: 'BRALZRCTF009',
    cnpj: '28.767.076/0001-46',
    gestora: 'Alianza Trust',
    descricao: 'Fundo de investimento imobiliário focado em lajes corporativas de alto padrão',
    cor_tema: '#1e40af',
    fundo_imobiliario: {
      tipo_fii: 'TIJOLO',
      segmento_fii: 'Lajes Corporativas',
      patrimonio_liquido: 850000000,
      num_cotistas: 12000,
      dividend_yield_12m: 8.5,
      p_vp: 0.95
    }
  },
  'BCIA11': {
    ticker: 'BCIA11',
    nome: 'BTG Pactual Corporate Office',
    tipo: 'FII',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Fundos Imobiliários',
    subsetor: 'Lajes Corporativas',
    segmento: 'Tijolo',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_FIXA',
    benchmark: 'IFIX',
    isin: 'BRBCFICTF004',
    cnpj: '34.868.445/0001-44',
    gestora: 'BTG Pactual',
    descricao: 'Fundo especializado em edifícios corporativos de alta qualidade',
    cor_tema: '#059669',
    fundo_imobiliario: {
      tipo_fii: 'TIJOLO',
      segmento_fii: 'Lajes Corporativas',
      patrimonio_liquido: 1200000000,
      num_cotistas: 15000,
      dividend_yield_12m: 9.2,
      p_vp: 0.98
    }
  },
  'BRCO11': {
    ticker: 'BRCO11',
    nome: 'Bresco Logística FII',
    tipo: 'FII',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Fundos Imobiliários',
    subsetor: 'Logística',
    segmento: 'Tijolo',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_FIXA',
    benchmark: 'IFIX',
    isin: 'BRBRCO11F009',
    cnpj: '20.748.515/0001-81',
    gestora: 'Bresco',
    descricao: 'Portfólio de galpões logísticos de alto padrão em regiões estratégicas',
    cor_tema: '#155e75',
    fundo_imobiliario: {
      tipo_fii: 'TIJOLO',
      segmento_fii: 'Logística',
      patrimonio_liquido: 1450000000,
      num_cotistas: 17800,
      dividend_yield_12m: 8.9,
      p_vp: 0.97
    }
  },
  'BTLG11': {
    ticker: 'BTLG11',
    nome: 'BTG Pactual Logística',
    tipo: 'FII',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Fundos Imobiliários',
    subsetor: 'Logística',
    segmento: 'Tijolo',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_FIXA',
    benchmark: 'IFIX',
    isin: 'BRBTLGCTF002',
    cnpj: '37.086.421/0001-15',
    gestora: 'BTG Pactual',
    descricao: 'Fundo especializado em galpões logísticos e industriais',
    cor_tema: '#7c3aed',
    fundo_imobiliario: {
      tipo_fii: 'TIJOLO',
      segmento_fii: 'Logística',
      patrimonio_liquido: 1100000000,
      num_cotistas: 13500,
      dividend_yield_12m: 9.5,
      p_vp: 1.02
    }
  },
  'HGBS11': {
    ticker: 'HGBS11',
    nome: 'Hedge Brasil Shopping',
    tipo: 'FII',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Fundos Imobiliários',
    subsetor: 'Shopping Centers',
    segmento: 'Tijolo',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_FIXA',
    benchmark: 'IFIX',
    isin: 'BRHGBSCTF001',
    cnpj: '08.431.747/0001-06',
    gestora: 'Hedge Investments',
    descricao: 'Fundo focado em participação em shopping centers pelo Brasil',
    cor_tema: '#be185d',
    fundo_imobiliario: {
      tipo_fii: 'TIJOLO',
      segmento_fii: 'Shopping',
      patrimonio_liquido: 2250000000,
      num_cotistas: 18500,
      dividend_yield_12m: 7.8,
      p_vp: 0.88
    }
  },
  'HGCR11': {
    ticker: 'HGCR11',
    nome: 'CSHG Recebíveis Imobiliários',
    tipo: 'FII',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Fundos Imobiliários',
    subsetor: 'Recebíveis',
    segmento: 'Papel',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_FIXA',
    benchmark: 'IFIX',
    isin: 'BRHGCRCTF000',
    cnpj: '11.160.521/0001-22',
    gestora: 'Credit Suisse Hedging-Griffo',
    descricao: 'Fundo de recebíveis imobiliários com foco em CRIs de alta qualidade',
    cor_tema: '#065f46',
    fundo_imobiliario: {
      tipo_fii: 'PAPEL',
      segmento_fii: 'Recebíveis Imobiliários',
      patrimonio_liquido: 1580000000,
      num_cotistas: 22000,
      dividend_yield_12m: 12.2,
      p_vp: 0.99
    }
  },
  'HGFF11': {
    ticker: 'HGFF11',
    nome: 'CSHG FOF',
    tipo: 'FII',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Fundos Imobiliários',
    subsetor: 'Fundo de Fundos',
    segmento: 'Fundos',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_FIXA',
    benchmark: 'IFIX',
    isin: 'BRHGFFCTF001',
    cnpj: '18.307.582/0001-19',
    gestora: 'Credit Suisse Hedging-Griffo',
    descricao: 'Fundo de fundos imobiliários com diversificação em vários segmentos',
    cor_tema: '#4338ca',
    fundo_imobiliario: {
      tipo_fii: 'FUNDOS',
      segmento_fii: 'Fundo de Fundos',
      patrimonio_liquido: 1350000000,
      num_cotistas: 26000,
      dividend_yield_12m: 8.7,
      p_vp: 0.92
    }
  },
  'HGLG11': {
    ticker: 'HGLG11',
    nome: 'CSHG Logística',
    tipo: 'FII',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Fundos Imobiliários',
    subsetor: 'Logística',
    segmento: 'Tijolo',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_FIXA',
    benchmark: 'IFIX',
    isin: 'BRHGLGCTF004',
    cnpj: '11.728.688/0001-47',
    gestora: 'Credit Suisse Hedging-Griffo',
    descricao: 'Fundo com foco em galpões logísticos de alto padrão em localizações estratégicas',
    cor_tema: '#155e75',
    fundo_imobiliario: {
      tipo_fii: 'TIJOLO',
      segmento_fii: 'Logística',
      patrimonio_liquido: 2480000000,
      num_cotistas: 19800,
      dividend_yield_12m: 7.9,
      p_vp: 0.87
    }
  },
  'KFOF11': {
    ticker: 'KFOF11',
    nome: 'Kinea Índice de Preços FoF',
    tipo: 'FII',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Fundos Imobiliários',
    subsetor: 'Fundo de Fundos',
    segmento: 'Fundos',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_FIXA',
    benchmark: 'IFIX',
    isin: 'BRKFOFC11000',
    cnpj: '30.091.444/0001-40',
    gestora: 'Kinea Investimentos',
    descricao: 'Fundo de fundos imobiliários com foco em proteção à inflação',
    cor_tema: '#6b21a8',
    fundo_imobiliario: {
      tipo_fii: 'FUNDOS',
      segmento_fii: 'Fundo de Fundos',
      patrimonio_liquido: 980000000,
      num_cotistas: 25200,
      dividend_yield_12m: 9.4,
      p_vp: 0.96
    }
  },
  'KNCR11': {
    ticker: 'KNCR11',
    nome: 'Kinea Rendimentos Imobiliários',
    tipo: 'FII',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Fundos Imobiliários',
    subsetor: 'Recebíveis',
    segmento: 'Papel',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_FIXA',
    benchmark: 'IFIX',
    isin: 'BRKNCRC11005',
    cnpj: '16.706.958/0001-32',
    gestora: 'Kinea Investimentos',
    descricao: 'Fundo de recebíveis imobiliários com foco em CRIs de alta qualidade',
    cor_tema: '#5b21b6',
    fundo_imobiliario: {
      tipo_fii: 'PAPEL',
      segmento_fii: 'Recebíveis Imobiliários',
      patrimonio_liquido: 3750000000,
      num_cotistas: 35000,
      dividend_yield_12m: 12.7,
      p_vp: 1.01
    }
  },
  'KNRI11': {
    ticker: 'KNRI11',
    nome: 'Kinea Renda Imobiliária',
    tipo: 'FII',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Fundos Imobiliários',
    subsetor: 'Híbrido',
    segmento: 'Tijolo',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_FIXA',
    benchmark: 'IFIX',
    isin: 'BRKNRIC11001',
    cnpj: '12.005.956/0001-65',
    gestora: 'Kinea Investimentos',
    descricao: 'Fundo diversificado com foco em imóveis corporativos e logísticos',
    cor_tema: '#4f46e5',
    fundo_imobiliario: {
      tipo_fii: 'TIJOLO',
      segmento_fii: 'Híbrido',
      patrimonio_liquido: 3950000000,
      num_cotistas: 42000,
      dividend_yield_12m: 7.6,
      p_vp: 0.85
    }
  },
  'KNSC11': {
    ticker: 'KNSC11',
    nome: 'Kinea Securities',
    tipo: 'FII',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Fundos Imobiliários',
    subsetor: 'Recebíveis',
    segmento: 'Papel',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_FIXA',
    benchmark: 'IFIX',
    isin: 'BRKNSCCTF009',
    cnpj: '35.864.448/0001-38',
    gestora: 'Kinea Investimentos',
    descricao: 'Fundo de recebíveis imobiliários com foco em CRIs de alta qualidade',
    cor_tema: '#6366f1',
    fundo_imobiliario: {
      tipo_fii: 'PAPEL',
      segmento_fii: 'Recebíveis Imobiliários',
      patrimonio_liquido: 1280000000,
      num_cotistas: 21500,
      dividend_yield_12m: 12.3,
      p_vp: 1.02
    }
  },
  'RCRB11': {
    ticker: 'RCRB11',
    nome: 'Rio Bravo Renda Corporativa',
    tipo: 'FII',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Fundos Imobiliários',
    subsetor: 'Lajes Corporativas',
    segmento: 'Tijolo',
    liquidez: 'MEDIA',
    categoria_dy: 'RENDA_FIXA',
    benchmark: 'IFIX',
    isin: 'BRRCRBC11003',
    cnpj: '03.683.056/0001-86',
    gestora: 'Rio Bravo',
    descricao: 'Fundo com foco em edifícios corporativos de alto padrão em São Paulo',
    cor_tema: '#047857',
    fundo_imobiliario: {
      tipo_fii: 'TIJOLO',
      segmento_fii: 'Lajes Corporativas',
      patrimonio_liquido: 780000000,
      num_cotistas: 8900,
      dividend_yield_12m: 8.2,
      p_vp: 0.91
    }
  },
  'XPLG11': {
    ticker: 'XPLG11',
    nome: 'XP Log',
    tipo: 'FII',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Fundos Imobiliários',
    subsetor: 'Logística',
    segmento: 'Tijolo',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_FIXA',
    benchmark: 'IFIX',
    isin: 'BRXPLGC11008',
    cnpj: '26.502.794/0001-85',
    gestora: 'XP Asset Management',
    descricao: 'Fundo com foco em galpões logísticos de alto padrão',
    cor_tema: '#0e7490',
    fundo_imobiliario: {
      tipo_fii: 'TIJOLO',
      segmento_fii: 'Logística',
      patrimonio_liquido: 1950000000,
      num_cotistas: 36000,
      dividend_yield_12m: 8.8,
      p_vp: 0.94
    }
  },
  'XPML11': {
    ticker: 'XPML11',
    nome: 'XP Malls',
    tipo: 'FII',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Fundos Imobiliários',
    subsetor: 'Shopping Centers',
    segmento: 'Tijolo',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_FIXA',
    benchmark: 'IFIX',
    isin: 'BRXPMLC11007',
    cnpj: '28.757.546/0001-00',
    gestora: 'XP Asset Management',
    descricao: 'Fundo com foco em participação em shopping centers pelo Brasil',
    cor_tema: '#be185d',
    fundo_imobiliario: {
      tipo_fii: 'TIJOLO',
      segmento_fii: 'Shopping',
      patrimonio_liquido: 1680000000,
      num_cotistas: 29500,
      dividend_yield_12m: 7.4,
      p_vp: 0.86
    }
  },
  'Banco do Brasil': {
    ticker: 'BBAS3',
    nome: 'Banco do Brasil',
    tipo: 'ACAO',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Financeiro',
    subsetor: 'Bancos',
    segmento: 'Banco Comercial',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_VARIAVEL',
    benchmark: 'IBOVESPA',
    isin: 'BRBBASACNOR3',
    descricao: 'Maior banco público do Brasil, com forte atuação no crédito agrícola e varejo',
    cor_tema: '#fbbf24',
    acao: {
      free_float: 0.48,
      valor_mercado: 105000000000,
      dividend_yield_12m: 9.8,
      p_l: 4.2,
      p_vp: 0.9,
      roe: 21.4,
      roic: 12.6,
      margem_liquida: 15.2
    }
  },
  'BBSE3': {
    ticker: 'BBSE3',
    nome: 'BB Seguridade',
    tipo: 'ACAO',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Financeiro',
    subsetor: 'Seguros',
    segmento: 'Seguradoras',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_VARIAVEL',
    benchmark: 'IBOVESPA',
    isin: 'BRBBSEACNOR5',
    descricao: 'Empresa de seguros, previdência e capitalização do grupo Banco do Brasil',
    cor_tema: '#eab308',
    acao: {
      free_float: 0.34,
      valor_mercado: 62000000000,
      dividend_yield_12m: 7.9,
      p_l: 9.4,
      p_vp: 4.3,
      roe: 45.8,
      roic: 36.5,
      margem_liquida: 49.2
    }
  },
  'Bolsa B3': {
    ticker: 'B3SA3',
    nome: 'B3 - Brasil, Bolsa, Balcão',
    tipo: 'ACAO',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Financeiro',
    subsetor: 'Serviços Financeiros',
    segmento: 'Bolsa de Valores',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_VARIAVEL',
    benchmark: 'IBOVESPA',
    isin: 'BRBBDCACNOR2',
    descricao: 'Maior bolsa de valores e infraestrutura de mercado da América Latina',
    cor_tema: '#0284c7',
    acao: {
      free_float: 0.98,
      valor_mercado: 78000000000,
      dividend_yield_12m: 5.4,
      p_l: 16.2,
      p_vp: 2.5,
      roe: 15.4,
      roic: 12.8,
      margem_liquida: 42.5
    }
  },
  'BRADESCO': {
    ticker: 'BBDC4',
    nome: 'Bradesco',
    tipo: 'ACAO',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Financeiro',
    subsetor: 'Bancos',
    segmento: 'Banco Comercial',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_VARIAVEL',
    benchmark: 'IBOVESPA',
    isin: 'BRBBDCACNPR8',
    descricao: 'Um dos maiores bancos privados do Brasil, com forte presença no varejo bancário',
    cor_tema: '#b91c1c',
    acao: {
      free_float: 0.72,
      valor_mercado: 92000000000,
      dividend_yield_12m: 6.8,
      p_l: 6.4,
      p_vp: 0.8,
      roe: 12.5,
      roic: 9.2,
      margem_liquida: 13.8
    }
  },
  'BRBI11': {
    ticker: 'BRBI11',
    nome: 'Bresco BRL Índice de Preços',
    tipo: 'FII',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Fundos Imobiliários',
    subsetor: 'Logística',
    segmento: 'Tijolo',
    liquidez: 'MEDIA',
    categoria_dy: 'RENDA_FIXA',
    benchmark: 'IFIX',
    isin: 'BRRBBOCTF000',
    cnpj: '42.487.642/0001-10',
    gestora: 'RBR Asset',
    descricao: 'Fundo focado em ativos logísticos com contratos indexados à inflação',
    cor_tema: '#15803d',
    fundo_imobiliario: {
      tipo_fii: 'TIJOLO',
      segmento_fii: 'Logística',
      patrimonio_liquido: 620000000,
      num_cotistas: 8200,
      dividend_yield_12m: 7.9,
      p_vp: 0.93
    }
  },
  'CPFL': {
    ticker: 'CPFE3',
    nome: 'CPFL Energia',
    tipo: 'ACAO',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Utilities',
    subsetor: 'Energia Elétrica',
    segmento: 'Geração e Distribuição',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_VARIAVEL',
    benchmark: 'IBOVESPA',
    isin: 'BRCPFEACNOR0',
    descricao: 'Uma das maiores empresas do setor elétrico brasileiro',
    cor_tema: '#0891b2',
    acao: {
      free_float: 0.16,
      valor_mercado: 40500000000,
      dividend_yield_12m: 8.5,
      p_l: 7.4,
      p_vp: 2.1,
      roe: 28.2,
      roic: 16.4,
      margem_liquida: 18.7
    }
  },
  'DROGARAIA': {
    ticker: 'RADL3',
    nome: 'Raia Drogasil',
    tipo: 'ACAO',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Consumo',
    subsetor: 'Comércio e Distribuição',
    segmento: 'Medicamentos e Outros Produtos',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_VARIAVEL',
    benchmark: 'IBOVESPA',
    isin: 'BRRADLACNOR0',
    descricao: 'Maior rede de farmácias do Brasil, resultado da fusão entre Droga Raia e Drogasil',
    cor_tema: '#be123c',
    acao: {
      free_float: 0.71,
      valor_mercado: 45200000000,
      dividend_yield_12m: 1.2,
      p_l: 40.5,
      p_vp: 6.2,
      roe: 15.3,
      roic: 12.2,
      margem_liquida: 4.2
    }
  },
  'ENGIE Brasil': {
    ticker: 'EGIE3',
    nome: 'ENGIE Brasil Energia',
    tipo: 'ACAO',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Utilities',
    subsetor: 'Energia Elétrica',
    segmento: 'Geração',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_VARIAVEL',
    benchmark: 'IBOVESPA',
    isin: 'BREGIECNOR9',
    descricao: 'Uma das maiores geradoras privadas de energia do Brasil, com foco em renováveis',
    cor_tema: '#0e7490',
    acao: {
      free_float: 0.33,
      valor_mercado: 32500000000,
      dividend_yield_12m: 9.2,
      p_l: 8.6,
      p_vp: 3.2,
      roe: 37.6,
      roic: 19.2,
      margem_liquida: 27.5
    }
  },
  'FLEURY': {
    ticker: 'FLRY3',
    nome: 'Fleury S.A.',
    tipo: 'ACAO',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Saúde',
    subsetor: 'Serviços Médicos',
    segmento: 'Diagnósticos',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_VARIAVEL',
    benchmark: 'IBOVESPA',
    isin: 'BRFLRYACNOR4',
    descricao: 'Empresa líder em medicina diagnóstica e serviços de saúde no Brasil',
    cor_tema: '#0284c7',
    acao: {
      free_float: 0.62,
      valor_mercado: 8900000000,
      dividend_yield_12m: 4.1,
      p_l: 18.5,
      p_vp: 1.8,
      roe: 9.7,
      roic: 7.3,
      margem_liquida: 8.2
    }
  },
  'ODONTOPREV': {
    ticker: 'ODPV3',
    nome: 'Odontoprev',
    tipo: 'ACAO',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Saúde',
    subsetor: 'Serviços Médicos',
    segmento: 'Planos de Saúde',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_VARIAVEL',
    benchmark: 'IBOVESPA',
    isin: 'BRODPVACNOR5',
    descricao: 'Maior operadora de planos odontológicos da América Latina',
    cor_tema: '#0369a1',
    acao: {
      free_float: 0.52,
      valor_mercado: 6800000000,
      dividend_yield_12m: 5.8,
      p_l: 14.2,
      p_vp: 4.6,
      roe: 32.4,
      roic: 26.8,
      margem_liquida: 18.5
    }
  },
  'Porto Seguro': {
    ticker: 'PSSA3',
    nome: 'Porto Seguro',
    tipo: 'ACAO',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Financeiro',
    subsetor: 'Seguros',
    segmento: 'Seguradoras',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_VARIAVEL',
    benchmark: 'IBOVESPA',
    isin: 'BRPSSAACNOR7',
    descricao: 'Uma das maiores seguradoras do Brasil, com amplo portfólio de produtos',
    cor_tema: '#b45309',
    acao: {
      free_float: 0.47,
      valor_mercado: 23500000000,
      dividend_yield_12m: 5.6,
      p_l: 8.1,
      p_vp: 1.7,
      roe: 21.3,
      roic: 15.7,
      margem_liquida: 12.5
    }
  },
  'VALE3': {
    ticker: 'VALE3',
    nome: 'Vale S.A.',
    tipo: 'ACAO',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Mineração',
    subsetor: 'Mineração',
    segmento: 'Minério de Ferro',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_VARIAVEL',
    benchmark: 'IBOVESPA',
    isin: 'BRVALEACNOR6',
    descricao: 'Maior mineradora do Brasil, líder mundial em minério de ferro',
    cor_tema: '#16a34a',
    acao: {
      free_float: 0.89,
      valor_mercado: 350000000000,
      dividend_yield_12m: 15.8,
      p_l: 5.2,
      p_vp: 1.1,
      roe: 21.5,
      roic: 18.9,
      margem_liquida: 28.5
    }
  },
  'WEGE3': {
    ticker: 'WEGE3',
    nome: 'WEG S.A.',
    tipo: 'ACAO',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Industrial',
    subsetor: 'Máquinas e Equipamentos',
    segmento: 'Motores Elétricos',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_VARIAVEL',
    benchmark: 'IBOVESPA',
    isin: 'BRWEGEACNOR0',
    descricao: 'Fabricante de motores elétricos e equipamentos industriais',
    cor_tema: '#059669',
    acao: {
      free_float: 0.71,
      valor_mercado: 125000000000,
      dividend_yield_12m: 1.8,
      p_l: 28.5,
      p_vp: 6.2,
      roe: 22.8,
      roic: 15.8,
      margem_liquida: 12.5
    }
  },
  'GGRC11': {
    ticker: 'GGRC11',
    nome: 'GGR Covepi Renda',
    tipo: 'FII',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Fundos Imobiliários',
    subsetor: 'Logística e Industrial',
    segmento: 'Tijolo',
    liquidez: 'MEDIA',
    categoria_dy: 'RENDA_FIXA',
    benchmark: 'IFIX',
    isin: 'BRGGRCC11003',
    cnpj: '26.402.703/0001-92',
    gestora: 'GGR Gestão de Recursos',
    descricao: 'Fundo focado em imóveis industriais e de logística com contratos atípicos',
    cor_tema: '#15803d',
    fundo_imobiliario: {
      tipo_fii: 'TIJOLO',
      segmento_fii: 'Logística e Industrial',
      patrimonio_liquido: 845000000,
      num_cotistas: 10800,
      dividend_yield_12m: 8.8,
      p_vp: 0.93
    }
  },
  'SNLG11': {
    ticker: 'SNLG11',
    nome: 'Suno Logística',
    tipo: 'FII',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Fundos Imobiliários',
    subsetor: 'Logística',
    segmento: 'Tijolo',
    liquidez: 'MEDIA',
    categoria_dy: 'RENDA_FIXA',
    benchmark: 'IFIX',
    isin: 'BRSNLGCTF002',
    cnpj: '37.454.233/0001-61',
    gestora: 'Suno Asset',
    descricao: 'Fundo com foco em galpões logísticos bem localizados e com bom perfil de inquilinos',
    cor_tema: '#0e7490',
    fundo_imobiliario: {
      tipo_fii: 'TIJOLO',
      segmento_fii: 'Logística',
      patrimonio_liquido: 520000000,
      num_cotistas: 9500,
      dividend_yield_12m: 9.1,
      p_vp: 0.89
    }
  },
  'VNQ': {
    ticker: 'VNQ',
    nome: 'Vanguard Real Estate ETF',
    tipo: 'ETF',
    pais: 'EUA',
    moeda: 'USD',
    setor: 'Real Estate',
    subsetor: 'REITs',
    segmento: 'Diversificado',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_FIXA',
    benchmark: 'MSCI US REIT Index',
    isin: 'US9229083632',
    descricao: 'ETF que replica o desempenho do mercado imobiliário americano',
    cor_tema: '#dc2626',
    etf: {
      expense_ratio: 0.12,
      aum: 35000000000,
      tracking_error: 0.05,
      inception_date: '2004-09-23'
    }
  },
  'VOO': {
    ticker: 'VOO',
    nome: 'Vanguard S&P 500 ETF',
    tipo: 'ETF',
    pais: 'EUA',
    moeda: 'USD',
    setor: 'Diversificado',
    subsetor: 'Large Cap',
    segmento: 'Ações',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_VARIAVEL',
    benchmark: 'S&P 500',
    isin: 'US9229087690',
    descricao: 'ETF que replica o desempenho do índice S&P 500',
    cor_tema: '#0369a1',
    etf: {
      expense_ratio: 0.03,
      aum: 850000000000,
      tracking_error: 0.02,
      inception_date: '2010-09-09'
    }
  },
  'DVN': {
    ticker: 'DVN',
    nome: 'Devon Energy Corporation',
    tipo: 'STOCK',
    pais: 'EUA',
    moeda: 'USD',
    setor: 'Energia',
    subsetor: 'Petróleo e Gás',
    segmento: 'Exploração e Produção',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_VARIAVEL',
    benchmark: 'S&P 500',
    isin: 'US25179M1036',
    descricao: 'Empresa de exploração e produção de petróleo e gás natural',
    cor_tema: '#7c2d12',
    acao: {
      free_float: 0.98,
      valor_mercado: 28000000000,
      dividend_yield_12m: 8.5,
      p_l: 9.8,
      p_vp: 1.2,
      roe: 12.8,
      roic: 8.9,
      margem_liquida: 18.5
    }
  },
  'EVEX': {
    ticker: 'EVEX',
    nome: 'Eve Holding Inc.',
    tipo: 'STOCK',
    pais: 'EUA',
    moeda: 'USD',
    setor: 'Aeroespacial',
    subsetor: 'Aviação',
    segmento: 'eVTOL',
    liquidez: 'MEDIA',
    categoria_dy: 'RENDA_VARIAVEL',
    benchmark: 'NASDAQ',
    isin: 'US30063P1057',
    descricao: 'Empresa de mobilidade aérea urbana desenvolvendo aeronaves eVTOL',
    cor_tema: '#9333ea',
    acao: {
      free_float: 0.85,
      valor_mercado: 2800000000,
      dividend_yield_12m: 0.0,
      p_l: 0,
      p_vp: 1.8,
      roe: -15.8,
      roic: -8.9,
      margem_liquida: -25.8
    }
  },
  'O': {
    ticker: 'O',
    nome: 'Realty Income Corporation',
    tipo: 'REIT',
    pais: 'EUA',
    moeda: 'USD',
    setor: 'Real Estate',
    subsetor: 'REITs',
    segmento: 'Varejo',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_FIXA',
    benchmark: 'MSCI US REIT Index',
    isin: 'US7561091049',
    descricao: 'REIT focado em propriedades comerciais com contratos de longo prazo',
    cor_tema: '#ca8a04',
    acao: {
      free_float: 0.95,
      valor_mercado: 43500000000,
      dividend_yield_12m: 5.6,
      p_l: 42.8,
      p_vp: 1.4,
      roe: 3.2,
      roic: 3.8,
      margem_liquida: 27.5
    }
  },
  'TESOURO SELIC 2026': {
    ticker: 'TESOURO SELIC 2026',
    nome: 'Tesouro Selic 2026',
    tipo: 'TESOURO_DIRETO',
    pais: 'BRASIL',
    moeda: 'BRL',
    setor: 'Renda Fixa',
    subsetor: 'Títulos Públicos',
    segmento: 'Tesouro Direto',
    liquidez: 'ALTA',
    categoria_dy: 'RENDA_FIXA',
    benchmark: 'Selic',
    isin: 'BRSTNCLTN2E6',
    descricao: 'Título público federal indexado à taxa Selic, com vencimento em 2026',
    cor_tema: '#047857',
    tesouro_direto: {
      tipo_titulo: 'SELIC',
      vencimento: '2026-03-01',
      rentabilidade: 'Selic + 0,0318%',
      valor_minimo: 100.00,
      indexador: 'Taxa Selic'
    }
  }
};

# ==============================================================================
# ARQUIVO: src\data\portfolioData.ts
# ==============================================================================


# ==============================================================================
# ARQUIVO: src\data\tickerMapping.ts
# ==============================================================================

// Mapeamento de nomes amigáveis para tickers oficiais
export interface TickerMapping {
  friendlyName: string;
  officialTicker: string;
  sector: string;
  market: string;
}

export const tickerMappings: Record<string, TickerMapping> = {
  // Bancos
  'Banco do Brasil': {
    friendlyName: 'Banco do Brasil',
    officialTicker: 'BBAS3',
    sector: 'Financeiro',
    market: 'B3'
  },
  'Bradesco': {
    friendlyName: 'Bradesco',
    officialTicker: 'BBDC4',
    sector: 'Financeiro',
    market: 'B3'
  },
  'Itaú': {
    friendlyName: 'Itaú',
    officialTicker: 'ITUB4',
    sector: 'Financeiro',
    market: 'B3'
  },
  'Santander': {
    friendlyName: 'Santander',
    officialTicker: 'SANB11',
    sector: 'Financeiro',
    market: 'B3'
  },
  
  // Varejo e Consumo
  'DROGARAIA': {
    friendlyName: 'DROGARAIA',
    officialTicker: 'RAIA3',
    sector: 'Varejo',
    market: 'B3'
  },
  'Magazine Luiza': {
    friendlyName: 'Magazine Luiza',
    officialTicker: 'MGLU3',
    sector: 'Varejo',
    market: 'B3'
  },
  'Via Varejo': {
    friendlyName: 'Via Varejo',
    officialTicker: 'VIIA3',
    sector: 'Varejo',
    market: 'B3'
  },
  'Americanas': {
    friendlyName: 'Americanas',
    officialTicker: 'AMER3',
    sector: 'Varejo',
    market: 'B3'
  },
  
  // Saúde
  'ODONTOPREV': {
    friendlyName: 'ODONTOPREV',
    officialTicker: 'ODPV3',
    sector: 'Saúde',
    market: 'B3'
  },
  'Hapvida': {
    friendlyName: 'Hapvida',
    officialTicker: 'HAPV3',
    sector: 'Saúde',
    market: 'B3'
  },
  'NotreDame': {
    friendlyName: 'NotreDame',
    officialTicker: 'GNDI3',
    sector: 'Saúde',
    market: 'B3'
  },
  
  // Energia e Petróleo
  'Petrobras': {
    friendlyName: 'Petrobras',
    officialTicker: 'PETR4',
    sector: 'Energia',
    market: 'B3'
  },
  'Petrobras PN': {
    friendlyName: 'Petrobras PN',
    officialTicker: 'PETR3',
    sector: 'Energia',
    market: 'B3'
  },
  'Vale': {
    friendlyName: 'Vale',
    officialTicker: 'VALE3',
    sector: 'Mineração',
    market: 'B3'
  },
  
  // Tecnologia
  'Totvs': {
    friendlyName: 'Totvs',
    officialTicker: 'TOTS3',
    sector: 'Tecnologia',
    market: 'B3'
  },
  'Locaweb': {
    friendlyName: 'Locaweb',
    officialTicker: 'LWSA3',
    sector: 'Tecnologia',
    market: 'B3'
  },
  'PagSeguro': {
    friendlyName: 'PagSeguro',
    officialTicker: 'PAGS34',
    sector: 'Tecnologia',
    market: 'B3'
  },
  
  // Utilities
  'Copel': {
    friendlyName: 'Copel',
    officialTicker: 'CPLE6',
    sector: 'Energia Elétrica',
    market: 'B3'
  },
  'Cemig': {
    friendlyName: 'Cemig',
    officialTicker: 'CMIG4',
    sector: 'Energia Elétrica',
    market: 'B3'
  },
  'Eletrobras': {
    friendlyName: 'Eletrobras',
    officialTicker: 'ELET6',
    sector: 'Energia Elétrica',
    market: 'B3'
  },
  
  // FIIs Populares  
  'FII Alzira Agro': {
    friendlyName: 'FII Alzira Agro',
    officialTicker: 'ALZR11',
    sector: 'FII Agronegócio',
    market: 'B3'
  },
  'FII BC Copacabana': {
    friendlyName: 'FII BC Copacabana',
    officialTicker: 'BCIA11',
    sector: 'FII Imobiliário',
    market: 'B3'
  },
  'FII XP Log': {
    friendlyName: 'FII XP Log',
    officialTicker: 'XPLG11',
    sector: 'FII Logístico',
    market: 'B3'
  },
  'FII Kinea': {
    friendlyName: 'FII Kinea',
    officialTicker: 'KNCR11',
    sector: 'FII Imobiliário',
    market: 'B3'
  },
  
  // Ações Americanas Populares
  'Apple': {
    friendlyName: 'Apple',
    officialTicker: 'AAPL',
    sector: 'Tecnologia',
    market: 'NASDAQ'
  },
  'Microsoft': {
    friendlyName: 'Microsoft',
    officialTicker: 'MSFT',
    sector: 'Tecnologia',
    market: 'NASDAQ'
  },
  'Amazon': {
    friendlyName: 'Amazon',
    officialTicker: 'AMZN',
    sector: 'Tecnologia',
    market: 'NASDAQ'
  },
  'Google': {
    friendlyName: 'Google',
    officialTicker: 'GOOGL',
    sector: 'Tecnologia',
    market: 'NASDAQ'
  },
  'Tesla': {
    friendlyName: 'Tesla',
    officialTicker: 'TSLA',
    sector: 'Automotivo',
    market: 'NASDAQ'
  }
};

// Funções utilitárias
export const findTickerByName = (name: string): TickerMapping | null => {
  const mapping = tickerMappings[name];
  return mapping || null;
};

export const getOfficialTicker = (nameOrTicker: string): string => {
  // Se já é um ticker oficial conhecido, retorna ele mesmo
  const existingMapping = Object.values(tickerMappings).find(
    mapping => mapping.officialTicker === nameOrTicker.toUpperCase()
  );
  
  if (existingMapping) {
    return existingMapping.officialTicker;
  }
  
  // Se é um nome amigável, retorna o ticker oficial
  const mapping = findTickerByName(nameOrTicker);
  return mapping ? mapping.officialTicker : nameOrTicker.toUpperCase();
};

export const getFriendlyName = (ticker: string): string => {
  const mapping = Object.values(tickerMappings).find(
    mapping => mapping.officialTicker === ticker.toUpperCase()
  );
  
  return mapping ? mapping.friendlyName : ticker;
};

export const getAllMappings = (): TickerMapping[] => {
  return Object.values(tickerMappings);
};

export const searchMappings = (query: string): TickerMapping[] => {
  const lowercaseQuery = query.toLowerCase();
  
  return Object.values(tickerMappings).filter(mapping => 
    mapping.friendlyName.toLowerCase().includes(lowercaseQuery) ||
    mapping.officialTicker.toLowerCase().includes(lowercaseQuery) ||
    mapping.sector.toLowerCase().includes(lowercaseQuery)
  );
}; 

# ==============================================================================
# ARQUIVO: src\lib\supabase.ts
# ==============================================================================

import { createClient } from '@supabase/supabase-js';
import { Database } from '../types/supabase';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl) {
  throw new Error('VITE_SUPABASE_URL é obrigatória');
}

if (!supabaseKey) {
  throw new Error('VITE_SUPABASE_ANON_KEY é obrigatória');
}

console.log('🔗 Supabase conectando em:', supabaseUrl);

export const supabase = createClient<Database>(supabaseUrl, supabaseKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
  },
});

# ==============================================================================
# ARQUIVO: src\services\authService.ts
# ==============================================================================

import { supabase } from '../lib/supabase';

export const checkUserExists = async (email: string): Promise<boolean> => {
  try {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password: 'temp-password-check'
    });
    
    // Se retornar erro de credenciais inválidas, o usuário existe
    if (error && error.message.includes('Invalid login credentials')) {
      return true;
    }
    
    // Se não retornar erro, o usuário existe e a senha está correta
    if (data.user) {
      return true;
    }
    
    return false;
  } catch (error) {
    console.error('Erro ao verificar usuário:', error);
    return false;
  }
};

export const createUserProfile = async (userId: string, email: string) => {
  try {
    const { data, error } = await supabase
      .from('profiles')
      .insert([
        {
          id: userId,
          email: email,
          full_name: 'Erasmo Russo',
          role: 'admin',
          created_at: new Date().toISOString()
        }
      ])
      .select()
      .single();

    if (error) throw error;
    return data;
  } catch (error) {
    console.error('Erro ao criar perfil:', error);
    throw error;
  }
};

export const getCurrentUser = async () => {
  try {
    const { data: { user } } = await supabase.auth.getUser();
    return user;
  } catch (error) {
    console.error('Erro ao obter usuário atual:', error);
    return null;
  }
};

# ==============================================================================
# ARQUIVO: src\services\debugService.ts
# ==============================================================================

import { supabase } from '../lib/supabase';

export const debugService = {
  // 🔍 TESTAR CONEXÃO BÁSICA COM SUPABASE
  async testConnection() {
    console.log('🔧 === DEBUG: TESTANDO CONEXÃO SUPABASE ===');
    
    try {
      // Teste simples sem filtros
      const { data, error, count } = await supabase
        .from('investments')
        .select('*', { count: 'exact' });
      
      console.log('✅ Conexão Supabase OK');
      console.log('📊 Total registros:', count);
      console.log('📋 Primeiros 3 registros:', data?.slice(0, 3));
      
      if (error) {
        console.error('❌ Erro na query:', error);
        return { success: false, error };
      }
      
      return { success: true, data, count };
    } catch (err) {
      console.error('💥 Erro geral:', err);
      return { success: false, error: err };
    }
  },

  // 🧪 TESTAR RLS ESPECIFICAMENTE
  async testRLS() {
    console.log('🔐 === DEBUG: TESTANDO RLS STATUS ===');
    
    try {
      // Tentar acessar sem user_id (se RLS estiver ativo, falhará)
      const { data: withoutUser, error: errorWithoutUser } = await supabase
        .from('investments')
        .select('id, ticker, user_id')
        .limit(5);
      
      console.log('🔍 Query sem user_id:', {
        success: !errorWithoutUser,
        error: errorWithoutUser,
        count: withoutUser?.length || 0
      });
      
      // Tentar com user_id específico
      const userId = '4362da88-d01c-4ffe-a447-75751ea8e182';
      const { data: withUser, error: errorWithUser } = await supabase
        .from('investments')
        .select('id, ticker, user_id')
        .eq('user_id', userId)
        .limit(5);
      
      console.log('👤 Query com user_id:', {
        userId,
        success: !errorWithUser,
        error: errorWithUser,
        count: withUser?.length || 0
      });
      
      return {
        rlsDisabled: !errorWithoutUser,
        withoutUserData: withoutUser,
        withUserData: withUser
      };
      
    } catch (err) {
      console.error('💥 Erro teste RLS:', err);
      return { error: err };
    }
  },

  // 📊 TESTAR CÁLCULOS DE PORTFOLIO
  async testPortfolioCalculations() {
    console.log('🧮 === DEBUG: TESTANDO CÁLCULOS PORTFOLIO ===');
    
    try {
      const userId = '4362da88-d01c-4ffe-a447-75751ea8e182';
      
      // Buscar dados do BBAS3 especificamente
      const { data: bbas3Data, error } = await supabase
        .from('investments')
        .select('*')
        .eq('user_id', userId)
        .eq('ticker', 'BBAS3')
        .order('date', { ascending: true });
      
      if (error) {
        console.error('❌ Erro buscar BBAS3:', error);
        return { error };
      }
      
      console.log('📈 BBAS3 - Total registros:', bbas3Data?.length);
      
      // Calcular manualmente
      let totalInvested = 0;
      let currentPosition = 0;
      let totalDividends = 0;
      let totalJuros = 0;
      
      bbas3Data?.forEach((investment, index) => {
        console.log(`📋 ${index + 1}. ${investment.date}:`, {
          compra: investment.compra,
          venda: investment.venda,
          valor_unit: investment.valor_unit,
          dividendos: investment.dividendos,
          juros: investment.juros
        });
        
        // Lógica de cálculo
        if (investment.compra > 0) {
          const valorCompra = investment.compra * investment.valor_unit;
          totalInvested += valorCompra;
          currentPosition += investment.compra;
          console.log(`  💰 COMPRA: ${investment.compra} x R$ ${investment.valor_unit} = R$ ${valorCompra.toFixed(2)}`);
        }
        
        if (investment.venda > 0) {
          currentPosition -= investment.venda;
          console.log(`  📤 VENDA: ${investment.venda} cotas (não diminui totalInvested)`);
        }
        
        if (investment.dividendos > 0) {
          totalDividends += investment.dividendos;
          console.log(`  💎 DIVIDENDO: R$ ${investment.dividendos.toFixed(2)}`);
        }
        
        if (investment.juros > 0) {
          totalJuros += investment.juros;
          console.log(`  💰 JUROS: R$ ${investment.juros.toFixed(2)}`);
        }
      });
      
      const calculations = {
        totalInvested: totalInvested,
        currentPosition: currentPosition,
        totalDividends: totalDividends,
        totalJuros: totalJuros,
        totalYield: totalInvested > 0 ? ((totalDividends + totalJuros) / totalInvested) * 100 : 0
      };
      
      console.log('🎯 === RESULTADOS BBAS3 ===');
      console.log('💰 Total Investido:', totalInvested.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }));
      console.log('📊 Posição Atual:', currentPosition.toLocaleString('pt-BR'), 'cotas');
      console.log('💎 Total Dividendos:', totalDividends.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }));
      console.log('💰 Total Juros:', totalJuros.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }));
      console.log('📈 DY Total:', calculations.totalYield.toFixed(2) + '%');
      
      return { success: true, calculations, rawData: bbas3Data };
      
    } catch (err) {
      console.error('💥 Erro teste cálculos:', err);
      return { error: err };
    }
  },

  // 🚀 EXECUTAR TODOS OS TESTES + FIXES
  async runAllTests() {
    console.log('🔧 === EXECUTANDO DIAGNÓSTICO COMPLETO ===');
    
    const results: any = {
      connection: await this.testConnection(),
      rls: await this.testRLS(),
      calculations: await this.testPortfolioCalculations()
    };
    
    console.log('📋 === RESUMO DOS TESTES ===');
    console.log('✅ Conexão:', results.connection.success ? 'OK' : '❌ FALHOU');
    console.log('🔐 RLS Desabilitado:', results.rls.rlsDisabled ? 'OK' : '❌ ATIVO');
    console.log('🧮 Cálculos:', results.calculations.success ? 'OK' : '❌ FALHOU');
    
    // 🔧 SE RLS ESTIVER ATIVO, TENTAR CORRIGIR
    if (!results.rls.rlsDisabled) {
      console.log('🔐 RLS ATIVO! Tentando corrigir...');
      
      try {
        const { rlsFixService } = await import('./rlsFixService');
        const fixResults = await rlsFixService.applyAllFixes();
        results.rlsFix = fixResults;
      } catch (error) {
        console.error('💥 Erro importando rlsFixService:', error);
      }
    }
    
    return results;
  }
}; 

# ==============================================================================
# ARQUIVO: src\services\investmentService.ts
# ==============================================================================

import { supabase } from '../lib/supabase';
import { Investment, Portfolio } from '../types/investment';
import { getMarketData } from './marketApi';

export const createInvestment = async (investment: Omit<Investment, 'id' | 'created_at' | 'updated_at'>): Promise<Investment | null> => {
  try {
    const { data, error } = await supabase
      .from('investments')
      .insert([investment])
      .select()
      .single();

    if (error) throw error;
    return data;
  } catch (error) {
    console.error('Erro ao criar investimento:', error);
    return null;
  }
};

export const getInvestments = async (userId: string): Promise<Investment[]> => {
  try {
    const { data, error } = await supabase
      .from('investments')
      .select('*')
      .eq('user_id', userId)
      .order('date', { ascending: false });

    if (error) throw error;
    return data || [];
  } catch (error) {
    console.error('Erro ao buscar investimentos:', error);
    return [];
  }
};

export const getInvestmentsByTicker = async (userId: string, ticker: string): Promise<Investment[]> => {
  try {
    const { data, error } = await supabase
      .from('investments')
      .select('*')
      .eq('user_id', userId)
      .eq('ticker', ticker)
      .order('date', { ascending: true });

    if (error) throw error;
    return data || [];
  } catch (error) {
    console.error('Erro ao buscar investimentos por ticker:', error);
    return [];
  }
};

export const updateInvestment = async (id: string, updates: Partial<Investment>): Promise<Investment | null> => {
  try {
    const { data, error } = await supabase
      .from('investments')
      .update({ ...updates, updated_at: new Date().toISOString() })
      .eq('id', id)
      .select()
      .single();

    if (error) throw error;
    return data;
  } catch (error) {
    console.error('Erro ao atualizar investimento:', error);
    return null;
  }
};

export const deleteInvestment = async (id: string): Promise<boolean> => {
  try {
    const { error } = await supabase
      .from('investments')
      .delete()
      .eq('id', id);

    if (error) throw error;
    return true;
  } catch (error) {
    console.error('Erro ao deletar investimento:', error);
    return false;
  }
};

export const calculateHistoricalDY = (investments: Investment[], index: number): number => {
  const row = investments[index];
  const totalDividends = (row.dividendos || 0) + (row.juros || 0);
  
  if (totalDividends === 0) return 0;
  
  let accumulatedInvestment = 0;
  for (let i = 0; i <= index; i++) {
    const r = investments[i];
    const valorTotal = (r.compra - r.venda) * r.valor_unit;
    accumulatedInvestment += valorTotal;
  }
  
  if (accumulatedInvestment <= 0) return 0;
  
  return (totalDividends / accumulatedInvestment) * 100;
};

export const getPortfolioData = async (userId: string): Promise<Portfolio[]> => {
  try {
    const investments = await getInvestments(userId);
    const portfolioMap = new Map<string, Portfolio>();

    for (const investment of investments) {
      const ticker = investment.ticker;
      
      if (!portfolioMap.has(ticker)) {
        portfolioMap.set(ticker, {
          ticker,
          totalInvested: 0,
          totalDividends: 0,
          totalJuros: 0,
          currentPosition: 0,
          totalYield: 0,
          marketValue: 0,
          profit: 0,
          profitPercent: 0,
          investments: []
        });
      }

      const portfolio = portfolioMap.get(ticker)!;
      portfolio.investments.push(investment);
      
      const valorTotal = (investment.compra - investment.venda) * investment.valor_unit;
      portfolio.totalInvested += valorTotal;
      portfolio.totalDividends += investment.dividendos || 0;
      portfolio.totalJuros += investment.juros || 0;
      portfolio.currentPosition += (investment.compra - investment.venda);
    }

    const portfolios: Portfolio[] = [];
    for (const [ticker, portfolio] of portfolioMap) {
      const marketData = await getMarketData(ticker);
      if (marketData) {
        portfolio.marketValue = portfolio.currentPosition * marketData.price;
        portfolio.profit = portfolio.marketValue - portfolio.totalInvested;
        portfolio.profitPercent = portfolio.totalInvested > 0 ? (portfolio.profit / portfolio.totalInvested) * 100 : 0;
      }
      
      portfolio.totalYield = portfolio.totalInvested > 0 ? 
        ((portfolio.totalDividends + portfolio.totalJuros) / portfolio.totalInvested) * 100 : 0;
      
      portfolios.push(portfolio);
    }

    return portfolios;
  } catch (error) {
    console.error('Erro ao buscar dados do portfólio:', error);
    return [];
  }
};

# ==============================================================================
# ARQUIVO: src\services\marketApi.ts
# ==============================================================================


// ⚠️ ALTERNATIVA: Se preferir usar fetch direto (com autenticação)
// const getTesouroDiretoDataWithFetch = async (ticker: string): Promise<MarketDataResponse | null> => {
//   try {
//     const supabaseFunctionUrl = 'https://gjvtncdjcslnkfctqnfy.supabase.co/functions/v1/tesouro-direto-proxy';
//     
//     const response = await fetch(supabaseFunctionUrl, {
//       headers: {
//         'apikey': import.meta.env.VITE_SUPABASE_ANON_KEY,
//         'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
//         'Content-Type': 'application/json',
//       },
//     });
//     
//     if (!response.ok) {
//       throw new Error(`HTTP ${response.status}: ${response.statusText}`);
//     }
//     
//     const data = await response.json();
//     // ... resto da lógica igual
//   } catch (error) {
//     console.error(`Erro:`, error);
//     return null;
//   }
// };// src/services/marketApi.ts

import { Portfolio, MarketData } from '../types/investment';
import { toast } from 'sonner';
import { supabase } from '../lib/supabase';

const finnhubApiKey = import.meta.env.VITE_FINNHUB_API_KEY;
const brapiApiKey = import.meta.env.VITE_BRAPI_API_KEY;

interface MarketDataResponse {
  currentPrice: number;
  priceChangePercent: number;
  currency: string;
}

const getUSDBRLExchangeRate = async (): Promise<number> => {
  try {
    console.log('💱 Invocando Edge Function usd-brl-rate…');

    const { data, error } = await supabase.functions.invoke('usd-brl-rate');
    if (error) throw new Error(error.message || error.status);

    if (data?.rate) {
      console.log(`💲 USD‑BRL obtido (Edge): ${data.rate}`);
      return Number(data.rate);
    }
    throw new Error('Edge retornou formato inesperado');
  } catch (err) {
    console.warn('Falha Edge usd‑brl‑rate →', err);

    /* 🔙 BACKUP: Brapi (se chave existir) */
    if (brapiApiKey) {
      try {
        const r = await fetch(`https://brapi.dev/api/v2/currency?currency=USD-BRL&token=${brapiApiKey}`);
        const j = await r.json();
        const rate = parseFloat(j.currency?.[0]?.bidPrice);
        if (rate) return rate;
      } catch {}
    }

    toast.error('Câmbio offline, usando 5,5');
    return 5.5;
  }
};

// Em src/services/marketApi.ts -- Substitua a função antiga por esta

const getTesouroDiretoData = async (ticker: string): Promise<MarketDataResponse | null> => {
  try {
    console.log(`🏛️ Buscando dados para ${ticker} via Supabase Edge Function...`);
    
    // ✅ Usando cliente Supabase com autenticação automática
    const { data, error } = await supabase.functions.invoke('tesouro-direto-proxy');
    
    if (error) {
      throw new Error(`Edge Function retornou erro: ${error.message || error.status || 'Erro desconhecido'}`);
    }

    if (!data) {
      throw new Error('Edge Function retornou resposta vazia');
    }

    // A estrutura do JSON do Tesouro tem essa hierarquia
    if (!data.response?.TrsrBdTradgList) {
      console.warn('Tesouro Direto: Estrutura de resposta inesperada');
      console.log('Resposta recebida:', data);
      return null;
    }
    
    const titulos = data.response.TrsrBdTradgList;
    console.log(`📊 Tesouro Direto: ${titulos.length} títulos disponíveis`);
    
    // Lógica de busca mais flexível
    let titulo = null;
    const searchTerm = ticker.toUpperCase();
    
    // 1. Busca exata
    titulo = titulos.find((t: any) => t.TrsrBd?.nm?.toUpperCase() === searchTerm);
    
    // 2. Busca por conteúdo (ex: "TESOURO SELIC 2026" -> "SELIC 2026")
    if (!titulo) {
      const cleanSearch = searchTerm.replace('TESOURO ', '').trim();
      titulo = titulos.find((t: any) => 
        t.TrsrBd?.nm?.toUpperCase().includes(cleanSearch)
      );
    }
    
    // 3. Busca por tipo e ano (ex: "SELIC" + "2026")
    if (!titulo) {
      const parts = searchTerm.split(' ');
      if (parts.length >= 2) {
        const tipo = parts.find(p => ['SELIC', 'IPCA', 'PREFIXADO'].includes(p));
        const ano = parts.find(p => /\d{4}/.test(p));
        
        if (tipo) {
          titulo = titulos.find((t: any) => {
            const nome = t.TrsrBd?.nm?.toUpperCase() || '';
            const temTipo = nome.includes(tipo);
            const temAno = ano ? nome.includes(ano) : true;
            return temTipo && temAno;
          });
        }
      }
    }
    
    // 4. Busca genérica por qualquer parte do nome
    if (!titulo) {
      titulo = titulos.find((t: any) => {
        const nome = t.TrsrBd?.nm?.toUpperCase() || '';
        return searchTerm.split(' ').some(part => 
          part.length > 2 && nome.includes(part)
        );
      });
    }

    if (!titulo) {
      console.warn(`Tesouro Direto: Título "${ticker}" não foi encontrado na resposta da função.`);
      // Listar títulos disponíveis para debug
      const titulosDisponiveis = titulos.slice(0, 5).map((t: any) => t.TrsrBd?.nm);
      console.log('📋 Primeiros títulos disponíveis:', titulosDisponiveis);
      return null;
    }

    // Usar o 'untrRedVal' (valor unitário de resgate) ou 'minInvstmtAmt' como fallback
    const precoUnitario = titulo.TrsrBd?.untrRedVal || titulo.TrsrBd?.minInvstmtAmt || 0;
    const nomeEncontrado = titulo.TrsrBd?.nm;
    
    console.log(`✅ Tesouro encontrado: ${nomeEncontrado}`);
    console.log(`   - Valor unitário: R$ ${precoUnitario}`);
    console.log(`   - Vencimento: ${titulo.TrsrBd?.mtrtyDt || 'N/A'}`);

    return {
      currentPrice: parseFloat(precoUnitario) || 0,
      priceChangePercent: 0, // A API do Tesouro não fornece a variação diária
      currency: 'BRL',
    };
  } catch (error) {
    console.error(`Erro ao buscar dados do Tesouro Direto via Supabase:`, error);
    toast.error(`Não foi possível obter a cotação de ${ticker}.`);
    return null;
  }
};

const getMarketData = async (portfolio: Portfolio): Promise<MarketDataResponse | null> => {
  const { ticker } = portfolio;

  // ✅ VERIFICAÇÃO INTELIGENTE: Se for Tesouro Direto, usa a nova função
  if (ticker.toUpperCase().includes('TESOURO')) {
    return getTesouroDiretoData(ticker);
  }

  try {
    // Para ativos americanos, usar Finnhub
    if (['VOO', 'VNQ', 'DVN', 'EVEX', 'O', 'AAPL', 'MSFT'].includes(ticker)) {
      if (!finnhubApiKey) {
        console.warn(`Chave Finnhub não encontrada para ${ticker}`);
        return null;
      }
      
      const response = await fetch(`https://finnhub.io/api/v1/quote?symbol=${ticker}&token=${finnhubApiKey}`);
      if (!response.ok) return null;
      const data = await response.json();
      
      return {
        currentPrice: data.c || 0,
        priceChangePercent: data.dp || 0,
        currency: 'USD',
      };
    }
    
    // Para ativos brasileiros, usar Brapi
    if (!brapiApiKey) {
      console.warn(`Chave Brapi não encontrada para ${ticker}`);
      return null;
    }
    
    const response = await fetch(`https://brapi.dev/api/quote/${ticker}?token=${brapiApiKey}`);
    if (!response.ok) return null;
    const data = await response.json();
    const result = data.results?.[0];
    
    return {
      currentPrice: result?.regularMarketPrice || 0,
      priceChangePercent: result?.regularMarketChangePercent || 0,
      currency: result?.currency || 'BRL',
    };
  } catch (error) {
    console.error(`Erro ao buscar dados para ${ticker}`, error);
    return null;
  }
};

const getMultipleMarketData = async (portfolios: Portfolio[]): Promise<Map<string, MarketDataResponse>> => {
  const marketDataMap = new Map<string, MarketDataResponse>();
  
  console.log(`🔄 Buscando dados de mercado para ${portfolios.length} ativos...`);
  
  for (const portfolio of portfolios) {
    const data = await getMarketData(portfolio);
    if (data) {
      marketDataMap.set(portfolio.ticker, data);
      console.log(`✅ ${portfolio.ticker}: R$ ${data.currentPrice} (${data.priceChangePercent}%)`);
    } else {
      console.warn(`❌ Não foi possível buscar dados para ${portfolio.ticker}`);
    }
  }
  
  console.log(`📊 Dados de mercado obtidos para ${marketDataMap.size}/${portfolios.length} ativos`);
  return marketDataMap;
};

export const marketApiService = {
  getMarketData,
  getMultipleMarketData,
  getUSDBRLExchangeRate,
};


# ==============================================================================
# ARQUIVO: src\services\portfolioCalculator.ts
# ==============================================================================

import { marketApiService } from './marketApi';

export interface PortfolioWithMarketData {
  ticker: string;
  metadata?: any;
  investments: any[];
  totalInvested: number;
  currentPosition: number;
  totalDividends: number;
  totalJuros: number;
  totalImpostos?: number;
  totalYield: number;
  marketValue: number;
  currentPrice: number;
  profit: number;
  profitPercent: number;
  priceChange: number;
  priceChangePercent: number;
  currency: string;
  lastUpdate: number;
}

// 📊 ATUALIZAR PORTFOLIOS COM DADOS REAIS DE MERCADO
export const updatePortfoliosWithMarketData = async (portfolios: any[]): Promise<PortfolioWithMarketData[]> => {
  console.log('💰 Atualizando', portfolios.length, 'portfolios com dados de mercado...');
  
  const updatedPortfolios: PortfolioWithMarketData[] = [];
  
  for (const portfolio of portfolios) {
    try {
      // 📈 Obter dados reais de mercado
      const marketData = await marketApiService.getMarketData(portfolio.ticker);
      
      if (marketData && portfolio.currentPosition > 0) {
        // 💰 CALCULAR VALOR DE MERCADO REAL
        const currentMarketValue = portfolio.currentPosition * marketData.price;
        
        // 📊 LUCRO/PREJUÍZO REAL
        const realProfit = currentMarketValue - portfolio.totalInvested;
        const realProfitPercent = portfolio.totalInvested > 0 ? (realProfit / portfolio.totalInvested) * 100 : 0;
        
        const updatedPortfolio: PortfolioWithMarketData = {
          ...portfolio,
          marketValue: currentMarketValue,
          currentPrice: marketData.price,
          profit: realProfit,
          profitPercent: realProfitPercent,
          priceChange: marketData.change,
          priceChangePercent: marketData.changePercent,
          currency: marketData.currency,
          lastUpdate: marketData.timestamp
        };
        
        updatedPortfolios.push(updatedPortfolio);
        
        console.log(`✅ ${portfolio.ticker}: R$ ${marketData.price.toFixed(2)} (${marketData.changePercent > 0 ? '+' : ''}${marketData.changePercent.toFixed(2)}%) - Valor total: R$ ${currentMarketValue.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`);
      } else {
        // 🚫 Sem dados de mercado, manter valores originais
        const portfolioWithMarketData: PortfolioWithMarketData = {
          ...portfolio,
          currentPrice: 0,
          priceChange: 0,
          priceChangePercent: 0,
          currency: portfolio.metadata?.moeda || 'BRL',
          lastUpdate: Date.now()
        };
        
        updatedPortfolios.push(portfolioWithMarketData);
        console.log(`⚠️ ${portfolio.ticker}: Sem dados de mercado disponíveis`);
      }
    } catch (error) {
      console.error(`❌ Erro ao obter dados de ${portfolio.ticker}:`, error);
      
      // 🚫 Erro, manter valores originais
      const portfolioWithMarketData: PortfolioWithMarketData = {
        ...portfolio,
        currentPrice: 0,
        priceChange: 0,
        priceChangePercent: 0,
        currency: portfolio.metadata?.moeda || 'BRL',
        lastUpdate: Date.now()
      };
      
      updatedPortfolios.push(portfolioWithMarketData);
    }
  }
  
  console.log('✅ Portfolios atualizados com dados de mercado!');
  return updatedPortfolios;
};

// 🎯 CALCULAR RESUMO TOTAL DA CARTEIRA
export const calculatePortfolioSummary = (portfolios: PortfolioWithMarketData[]) => {
  const summary = {
    totalInvested: 0,
    totalCurrentValue: 0,
    totalProfit: 0,
    totalProfitPercent: 0,
    totalDividends: 0,
    totalYield: 0,
    activeAssets: 0,
    lastUpdate: Date.now()
  };
  
  for (const portfolio of portfolios) {
    if (portfolio.currentPosition > 0) {
      summary.totalInvested += portfolio.totalInvested;
      summary.totalCurrentValue += portfolio.marketValue;
      summary.totalProfit += portfolio.profit;
      summary.totalDividends += portfolio.totalDividends + portfolio.totalJuros;
      summary.activeAssets++;
    }
  }
  
  summary.totalProfitPercent = summary.totalInvested > 0 ? (summary.totalProfit / summary.totalInvested) * 100 : 0;
  summary.totalYield = summary.totalInvested > 0 ? (summary.totalDividends / summary.totalInvested) * 100 : 0;
  
  return summary;
}; 

# ==============================================================================
# ARQUIVO: src\services\rlsFixService.ts
# ==============================================================================

import { supabase } from '../lib/supabase';

export const rlsFixService = {
  // 🔧 APLICAR FIX RLS DIRETAMENTE VIA SQL
  async disableRLS() {
    console.log('🔐 === APLICANDO FIX RLS DIRETAMENTE ===');
    
    try {
      // 1. Desabilitar RLS na tabela investments
      const { data: result1, error: error1 } = await supabase.rpc('exec_sql', {
        sql: 'ALTER TABLE investments DISABLE ROW LEVEL SECURITY;'
      });
      
      console.log('1️⃣ Disable RLS:', { data: result1, error: error1 });
      
      // 2. Remover políticas existentes
      const { data: result2, error: error2 } = await supabase.rpc('exec_sql', {
        sql: 'DROP POLICY IF EXISTS "Users can manage own investments" ON investments;'
      });
      
      console.log('2️⃣ Drop policies:', { data: result2, error: error2 });
      
      // 3. Garantir permissões
      const { data: result3, error: error3 } = await supabase.rpc('exec_sql', {
        sql: 'GRANT ALL ON investments TO public, anon, authenticated;'
      });
      
      console.log('3️⃣ Grant permissions:', { data: result3, error: error3 });
      
      // 4. Testar acesso
      const { data: testData, error: testError } = await supabase
        .from('investments')
        .select('id, ticker')
        .limit(3);
      
      console.log('4️⃣ Test query:', { 
        success: !testError, 
        count: testData?.length, 
        error: testError 
      });
      
      return {
        success: !error1 && !error2 && !error3 && !testError,
        steps: [
          { step: 'disable_rls', success: !error1, error: error1 },
          { step: 'drop_policies', success: !error2, error: error2 },
          { step: 'grant_permissions', success: !error3, error: error3 },
          { step: 'test_query', success: !testError, error: testError }
        ]
      };
      
    } catch (error) {
      console.error('💥 Erro aplicando fix RLS:', error);
      return { success: false, error };
    }
  },

  // 🧪 MÉTODOS ALTERNATIVOS PARA DESABILITAR RLS
  async disableRLSAlternative() {
    console.log('🔐 === MÉTODO ALTERNATIVO RLS ===');
    
    try {
      // Usar SQL direto através de uma função customizada
      const { data, error } = await supabase.rpc('disable_investments_rls');
      
      console.log('Resultado função customizada:', { data, error });
      
      if (error) {
        // Se a função não existe, tentar criar
        console.log('⚠️ Função não existe, tentando criar...');
        
        const createFunctionSQL = `
          CREATE OR REPLACE FUNCTION disable_investments_rls()
          RETURNS TEXT AS $$
          BEGIN
            ALTER TABLE investments DISABLE ROW LEVEL SECURITY;
            RETURN 'RLS disabled successfully';
          END;
          $$ LANGUAGE plpgsql SECURITY DEFINER;
        `;
        
        const { data: createResult, error: createError } = await supabase.rpc('exec_sql', {
          sql: createFunctionSQL
        });
        
        console.log('Criar função:', { data: createResult, error: createError });
        
        // Tentar executar novamente
        if (!createError) {
          const { data: retryData, error: retryError } = await supabase.rpc('disable_investments_rls');
          console.log('Retry função:', { data: retryData, error: retryError });
        }
      }
      
      return { success: !error, data, error };
      
    } catch (error) {
      console.error('💥 Erro método alternativo:', error);
      return { success: false, error };
    }
  },

  // 🎯 EXECUTAR TODAS AS TENTATIVAS DE FIX
  async applyAllFixes() {
    console.log('🚀 === APLICANDO TODOS OS FIXES RLS ===');
    
    const results = {
      method1: await this.disableRLS(),
      method2: await this.disableRLSAlternative()
    };
    
    console.log('📋 === RESUMO FIXES RLS ===');
    console.log('Método 1 (SQL direto):', results.method1.success ? '✅ OK' : '❌ FALHOU');
    console.log('Método 2 (função):', results.method2.success ? '✅ OK' : '❌ FALHOU');
    
    const anySuccess = results.method1.success || results.method2.success;
    
    if (anySuccess) {
      console.log('✅ RLS DESABILITADO COM SUCESSO! Recarregando página...');
      setTimeout(() => window.location.reload(), 2000);
    } else {
      console.log('❌ TODOS OS MÉTODOS FALHARAM. Verifique permissões do banco.');
    }
    
    return results;
  }
}; 

# ==============================================================================
# ARQUIVO: src\services\seedData.ts
# ==============================================================================

import { supabase } from '../lib/supabase';
import { assetMetadataService, investmentService } from './supabaseService';
import { assetMetadata } from '../data/assetMetadata';
import { portfolioData } from '../data/portfolioData';

export const seedDatabase = async () => {
  try {
    console.log('Iniciando seed do banco de dados...');
    
    // Verificar se já existem dados
    const existingMetadata = await assetMetadataService.getAll();
    if (existingMetadata.length > 0) {
      console.log('Dados já existem no banco, pulando seed...');
      return;
    }

    // Inserir metadados dos ativos
    console.log('Inserindo metadados dos ativos...');
    for (const [ticker, metadata] of Object.entries(assetMetadata)) {
      await assetMetadataService.create({
        ticker: metadata.ticker,
        nome: metadata.nome,
        tipo: metadata.tipo as any,
        pais: metadata.pais as any,
        moeda: metadata.moeda as any,
        setor: metadata.setor,
        subsetor: metadata.subsetor,
        segmento: metadata.segmento,
        liquidez: metadata.liquidez,
        categoria_dy: metadata.categoria_dy,
        benchmark: metadata.benchmark,
        isin: metadata.isin,
        cnpj: metadata.cnpj,
        gestora: metadata.gestora,
        descricao: metadata.descricao,
        site_oficial: metadata.site_oficial,
        cor_tema: metadata.cor_tema
      });
    }

    // Inserir dados de investimentos
    console.log('Inserindo dados de investimentos...');
    for (const [ticker, investments] of Object.entries(portfolioData)) {
      for (const investment of investments) {
        // Determinar tipo baseado nos valores
        let tipo: 'COMPRA' | 'VENDA' | 'DIVIDENDO' | 'JUROS' | 'DESDOBRAMENTO' = 'COMPRA';
        let quantidade = 0;
        let valor_unitario = 0;
        let dividendos = 0;
        let juros = 0;

        if (investment.compra > 0) {
          tipo = 'COMPRA';
          quantidade = investment.compra;
          valor_unitario = investment.valorUnit;
        } else if (investment.venda > 0) {
          tipo = 'VENDA';
          quantidade = investment.venda;
          valor_unitario = investment.valorUnit;
        } else if (investment.dividendos > 0) {
          tipo = 'DIVIDENDO';
          dividendos = investment.dividendos;
          juros = investment.juros;
        } else if (investment.juros > 0) {
          tipo = 'JUROS';
          juros = investment.juros;
        } else if (investment.obs.toLowerCase().includes('desdobramento')) {
          tipo = 'DESDOBRAMENTO';
          quantidade = investment.compra;
        }

        await investmentService.create({
          ticker,
          data: investment.data,
          tipo,
          quantidade,
          valor_unitario,
          dividendos,
          juros,
          impostos: investment.impostos || 0,
          observacoes: investment.obs
        });
      }
    }

    console.log('Seed do banco de dados concluído com sucesso!');
  } catch (error) {
    console.error('Erro durante o seed:', error);
    // Não lançar erro para não bloquear a aplicação
  }
};

# ==============================================================================
# ARQUIVO: src\services\supabaseService.ts
# ==============================================================================

import { supabase } from '../lib/supabase';
import { Database } from '../types/supabase';
import { Portfolio } from '../types/investment';
import { marketApiService } from './marketApi';
import { toast } from 'sonner';

// Tipos exportados para uso em outros lugares da aplicação
export type AssetMetadata = Database['public']['Tables']['asset_metadata']['Row'];
export type Investment = Database['public']['Tables']['investments']['Row'];

/**
 * Serviço para interagir com os metadados dos ativos.
 */
export const assetMetadataService = {
  async getAll(): Promise<AssetMetadata[]> {
    const { data, error } = await supabase
        .from('asset_metadata')
        .select('*')
        .order('ticker', { ascending: true });

    if (error) {
      console.error('Erro ao buscar metadados:', error);
      toast.error('Não foi possível carregar os metadados dos ativos.');
      return [];
    }
    return data || [];
  },
};

/**
 * Serviço para interagir com a função SQL customizada no Supabase.
 */
export const investmentService = {
  async getAll(userId: string): Promise<Portfolio[]> {
    // A função RPC busca e já pré-calcula os dados no banco de dados.
    const { data, error } = await supabase.rpc('get_investments_by_user_id', {
      p_user_id: userId,
    });

    if (error) {
      console.error('Erro ao chamar a função RPC do Supabase:', error);
      toast.error('Erro ao buscar seus dados de investimento.');
      throw error;
    }

    // O retorno da RPC já está no formato de Portfolio[], então retornamos diretamente.
    return data || [];
  }
};

// Função de fallback para criar metadados básicos caso não existam no banco
const createAutoMetadata = (ticker: string): AssetMetadata => {
  const isUS = ['VOO', 'VNQ', 'DVN', 'EVEX', 'O', 'AAPL', 'MSFT'].includes(ticker);
  const isTesouro = ticker.toUpperCase().includes('TESOURO');
  
  // Metadados específicos para Tesouro Direto
  if (isTesouro) {
    let tipoTesouro = 'SELIC';
    if (ticker.toUpperCase().includes('IPCA')) tipoTesouro = 'IPCA';
    if (ticker.toUpperCase().includes('PREFIXADO')) tipoTesouro = 'PREFIXADO';
    
    return {
      id: `auto-${ticker}`,
      ticker: ticker,
      nome: ticker,
      tipo: 'TESOURO_DIRETO',
      pais: 'BRASIL',
      moeda: 'BRL',
      setor: 'Renda Fixa',
      subsetor: 'Títulos Públicos',
      segmento: 'Governo Federal',
      liquidez: 'ALTA',
      categoria_dy: 'RENDA_FIXA',
      benchmark: tipoTesouro,
      isin: null,
      cnpj: null,
      gestora: 'Tesouro Nacional',
      descricao: `Título público ${tipoTesouro} do Tesouro Nacional`,
      site_oficial: 'https://www.tesourodireto.com.br',
      logo_url: null,
      cor_tema: '#1e40af', // Azul para Títulos Públicos
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    };
  }
  
  // Metadados para outros ativos
  return {
    id: `auto-${ticker}`,
    ticker: ticker,
    nome: ticker,
    tipo: isUS ? 'STOCK' : ticker.endsWith('11') ? 'FII' : 'ACAO',
    pais: isUS ? 'EUA' : 'BRASIL',
    moeda: isUS ? 'USD' : 'BRL',
    setor: 'Desconhecido',
    subsetor: null,
    segmento: null,
    liquidez: 'MEDIA',
    categoria_dy: 'RENDA_VARIAVEL',
    benchmark: 'N/A',
    isin: null,
    cnpj: null,
    gestora: null,
    descricao: 'Metadado gerado automaticamente',
    site_oficial: null,
    logo_url: null,
    cor_tema: '#64748b',
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  };
};

/**
 * O serviço principal do portfólio, responsável por orquestrar toda a lógica de negócios.
 */
export const portfolioService = {
  async getPortfolioSummary(): Promise<Portfolio[]> {
    console.log('🚀 [CORE] Iniciando cálculo completo do portfólio...');

    const userId = '4362da88-d01c-4ffe-a447-75751ea8e182';

    try {
      console.log('🔄 [CORE] Buscando dados do Supabase e taxa de câmbio...');
      
      // 1. Busca todos os dados já pré-calculados e a taxa de câmbio em paralelo
      const [portfoliosFromRPC, metadata, usdToBrlRate] = await Promise.all([
        investmentService.getAll(userId),
        assetMetadataService.getAll(),
        marketApiService.getUSDBRLExchangeRate(),
      ]);

      console.log(`📊 [CORE] Dados recebidos: ${portfoliosFromRPC.length} portfólios`);
      console.log(`💲 [CORE] Taxa de câmbio USD-BRL: ${usdToBrlRate}`);
      console.log(`📝 [CORE] Metadados carregados: ${metadata.length} ativos`);

      // 2. Anexa os metadados aos portfólios recebidos
      const portfoliosWithMetadata = portfoliosFromRPC.map(p => {
        const meta = metadata.find(m => m.ticker === p.ticker);
        return { ...p, metadata: meta || createAutoMetadata(p.ticker) };
      });

      console.log('💹 [CORE] Buscando dados de mercado para todos os ativos...');
      
      // 3. Busca os preços de mercado para todos os ativos de uma vez
      const marketDataMap = await marketApiService.getMultipleMarketData(portfoliosWithMetadata);
      
      console.log(`✅ [CORE] Dados de mercado obtidos para ${marketDataMap.size}/${portfoliosWithMetadata.length} ativos`);

      const finalPortfolios: Portfolio[] = [];
      let totalConvertedValue = 0;
      let totalUSAssets = 0;

      for (const portfolio of portfoliosWithMetadata) {
        const marketData = marketDataMap.get(portfolio.ticker);
        const isUSAsset = ['VOO', 'VNQ', 'DVN', 'EVEX', 'O', 'AAPL', 'MSFT'].includes(portfolio.ticker);

        if (marketData) {
          portfolio.currentPrice = marketData.currentPrice;
          portfolio.priceChangePercent = marketData.priceChangePercent;
          portfolio.marketValue = portfolio.currentPosition * portfolio.currentPrice;
          portfolio.moeda = marketData.currency as 'BRL' | 'USD';
        } else {
          // Fallback para ativos sem dados de mercado
          portfolio.currentPrice = portfolio.averagePrice || 0;
          portfolio.priceChangePercent = 0;
          portfolio.marketValue = portfolio.currentPosition * (portfolio.averagePrice || 0);
          portfolio.moeda = isUSAsset ? 'USD' : 'BRL';
        }

        // ✅ LÓGICA DE CONVERSÃO DE CÂMBIO PARA ATIVOS AMERICANOS
        if (isUSAsset || portfolio.moeda === 'USD') {
          totalUSAssets++;
          const originalValue = portfolio.marketValue;
          
          console.log(`🇺🇸 Convertendo ${portfolio.ticker} de USD para BRL (Taxa: ${usdToBrlRate})`);
          console.log(`   - Valor original USD: ${(originalValue / usdToBrlRate).toLocaleString('en-US', {minimumFractionDigits: 2})}`);
          
          // Converter todos os valores de USD para BRL
          portfolio.totalInvested *= usdToBrlRate;
          portfolio.marketValue *= usdToBrlRate;
          portfolio.totalDividends *= usdToBrlRate;
          portfolio.totalJuros *= usdToBrlRate;
          portfolio.averagePrice *= usdToBrlRate;
          portfolio.currentPrice *= usdToBrlRate;
          
          totalConvertedValue += portfolio.marketValue;
          
          // Marcar como convertido para BRL
          portfolio.moeda = 'BRL';
          
          console.log(`   - Valor convertido BRL: R$ ${portfolio.marketValue.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`);
          console.log(`✅ ${portfolio.ticker} convertido com sucesso`);
        }

        // Recalcular lucro e rentabilidade após conversão
        portfolio.profit = portfolio.marketValue - portfolio.totalInvested;
        portfolio.profitPercent = portfolio.totalInvested > 0 ? (portfolio.profit / portfolio.totalInvested) * 100 : 0;

        // Recalcular yield total
        const totalProventos = portfolio.totalDividends + portfolio.totalJuros;
        portfolio.totalYield = portfolio.totalInvested > 0 ? (totalProventos / portfolio.totalInvested) * 100 : 0;

        if (portfolio.currentPosition > 0) {
          finalPortfolios.push(portfolio);
        }
      }

      console.log(`🔄 [CORE] Processamento de conversão concluído:`);
      console.log(`   - Ativos americanos convertidos: ${totalUSAssets}`);
      console.log(`   - Valor total convertido: R$ ${totalConvertedValue.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`);
      console.log(`✅ [CORE] Processamento finalizado. Retornando ${finalPortfolios.length} ativos.`);
      
      return finalPortfolios.sort((a, b) => a.ticker.localeCompare(b.ticker));

    } catch (error) {
      console.error('❌ [CORE] Erro fatal no cálculo do portfólio:', error);
      if (error instanceof Error) {
        console.error('❌ [CORE] Detalhes do erro:', error.message);
        console.error('❌ [CORE] Stack trace:', error.stack);
      }
      toast.error("Ocorreu um erro grave ao buscar seus dados.");
      return [];
    }
  },
};


# ==============================================================================
# ARQUIVO: src\services\types.ts
# ==============================================================================

export interface VoiceCommandCallbacks {
  onRecordingStart?: () => void;
  onRecordingStop?: () => void;
  onTranscriptionUpdate?: (text: string) => void;
  onCommandResult?: (result: VoiceCommandResult) => void;
  onAudioStart?: () => void;
  onAudioEnd?: () => void;
  onError?: (error: string) => void;
}

export interface TranscriptionResult {
  success: boolean;
  transcription: string;
  error?: string;
}

export interface CommandProcessResult {
  success: boolean;
  result: VoiceCommandResult;
  error?: string;
}

export interface VoiceCommandResult {
  action: string;
  data?: unknown;
  confidence?: number;
  confirmation?: string;
  message?: string;
  response?: string;
}

export interface SpeechSynthesisResult {
  success: boolean;
  audioData?: string;
  error?: string;
}

export interface RecordingState {
  isRecording: boolean;
  isProcessing: boolean;
  transcription: string;
  result: VoiceCommandResult | null;
  error: string | null;
}

export interface SilenceDetectionConfig {
  silenceThreshold: number;
  silenceDuration: number;
  sampleRate: number;
} 

# ==============================================================================
# ARQUIVO: src\services\voiceCommandService.ts
# ==============================================================================

import { toast } from 'sonner';
import { 
  VoiceCommandCallbacks, 
  VoiceCommandResult, 
  TranscriptionResult, 
  CommandProcessResult,
  RecordingState,
  SilenceDetectionConfig
} from './types';
import { supabase } from '../lib/supabase';

/**
 * 🎤 ERASMO INVEST - VOICE COMMAND SERVICE
 * 
 * Sistema completo de comandos de voz e texto com IA integrada
 * 
 * ✅ FUNCIONALIDADES IMPLEMENTADAS:
 * - Gravação de voz com detecção automática de silêncio
 * - Processamento de comandos de texto
 * - Integração com Edge Functions Supabase
 * - Callbacks estruturados para UI
 * - Gerenciamento de estado robusto
 * 
 * 🔄 STATUS ATUAL: MOCKS TEMPORÁRIOS ATIVOS
 * - processCommand(): Parser inteligente PT-BR
 * - executeCommand(): Simulação de dados do portfólio  
 * - generateSpeech(): Simulação de reprodução de áudio
 * 
 * 🚀 PRÓXIMO PASSO: Deploy das Edge Functions no Supabase
 */
class VoiceCommandService {
  private mediaRecorder: MediaRecorder | null = null;
  private stream: MediaStream | null = null;
  private audioChunks: Blob[] = [];
  private callbacks: VoiceCommandCallbacks = {};
  private currentAudio: HTMLAudioElement | null = null;
  private silenceDetectionTimer: NodeJS.Timeout | null = null;
  private silenceDetectionContext: AudioContext | null = null;
  private silenceDetectionAnalyser: AnalyserNode | null = null;
  
  private state: RecordingState = {
    isRecording: false,
    isProcessing: false,
    transcription: '',
    result: null,
    error: null
  };

  private silenceConfig: SilenceDetectionConfig = {
    silenceThreshold: 30, // Volume threshold
    silenceDuration: 2000, // 2 segundos de silêncio
    sampleRate: 44100
  };

  // ===== MÉTODOS PÚBLICOS =====

  async initializeRecording(): Promise<boolean> {
    try {
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        throw new Error('Seu navegador não suporta gravação de áudio');
      }

      const constraints = {
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true,
          sampleRate: this.silenceConfig.sampleRate
        }
      };

      this.stream = await navigator.mediaDevices.getUserMedia(constraints);
      return true;
    } catch (error) {
      console.error('Erro ao inicializar gravação:', error);
      this.callbacks.onError?.('Erro ao acessar o microfone. Verifique as permissões.');
      return false;
    }
  }

  getSupportedMimeType(): string {
    const types = [
      'audio/webm;codecs=opus',
      'audio/webm',
      'audio/ogg;codecs=opus',
      'audio/ogg',
      'audio/wav',
      'audio/mp4'
    ];

    for (const type of types) {
      if (MediaRecorder.isTypeSupported(type)) {
        return type;
      }
    }
    
    return 'audio/webm'; // Fallback
  }

  async setupSilenceDetection(stream: MediaStream): Promise<void> {
    try {
      this.silenceDetectionContext = new AudioContext();
      const source = this.silenceDetectionContext.createMediaStreamSource(stream);
      this.silenceDetectionAnalyser = this.silenceDetectionContext.createAnalyser();
      
      this.silenceDetectionAnalyser.fftSize = 256;
      this.silenceDetectionAnalyser.smoothingTimeConstant = 0.8;
      
      source.connect(this.silenceDetectionAnalyser);
      
      this.startSilenceMonitoring();
    } catch (error) {
      console.error('Erro ao configurar detecção de silêncio:', error);
    }
  }

  private startSilenceMonitoring(): void {
    if (!this.silenceDetectionAnalyser) return;

    const dataArray = new Uint8Array(this.silenceDetectionAnalyser.frequencyBinCount);
    let silenceStartTime: number | null = null;

    const checkSilence = () => {
      if (!this.state.isRecording || !this.silenceDetectionAnalyser) return;

      this.silenceDetectionAnalyser.getByteFrequencyData(dataArray);
      
      // Calcular volume médio
      const sum = dataArray.reduce((a, b) => a + b, 0);
      const average = sum / dataArray.length;

      if (average < this.silenceConfig.silenceThreshold) {
        // Silêncio detectado
        if (silenceStartTime === null) {
          silenceStartTime = Date.now();
        } else if (Date.now() - silenceStartTime > this.silenceConfig.silenceDuration) {
          // Silêncio prolongado - parar gravação
          console.log('🔇 Silêncio detectado - parando gravação automaticamente');
          this.stopRecording();
          return;
        }
      } else {
        // Som detectado - resetar timer de silêncio
        silenceStartTime = null;
      }

      // Continuar monitoramento
      this.silenceDetectionTimer = setTimeout(checkSilence, 100);
    };

    checkSilence();
  }

  stopSilenceDetection(): void {
    if (this.silenceDetectionTimer) {
      clearTimeout(this.silenceDetectionTimer);
      this.silenceDetectionTimer = null;
    }

    if (this.silenceDetectionContext) {
      this.silenceDetectionContext.close();
      this.silenceDetectionContext = null;
    }

    this.silenceDetectionAnalyser = null;
  }

  async startRecording(callbacks: VoiceCommandCallbacks = {}): Promise<void> {
    try {
      this.callbacks = callbacks;
      this.state.isRecording = true;
      this.state.error = null;
      this.audioChunks = [];

      // Inicializar stream se necessário
      if (!this.stream) {
        const initialized = await this.initializeRecording();
        if (!initialized) return;
      }

      // Configurar MediaRecorder
      const mimeType = this.getSupportedMimeType();
      this.mediaRecorder = new MediaRecorder(this.stream!, { mimeType });

      this.mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          this.audioChunks.push(event.data);
        }
      };

      this.mediaRecorder.onstop = async () => {
        const audioBlob = new Blob(this.audioChunks, { type: this.getSupportedMimeType() });
        await this.processAudio(audioBlob);
      };

      // Configurar detecção de silêncio
      await this.setupSilenceDetection(this.stream!);

      // Iniciar gravação
      this.mediaRecorder.start(100); // Coleta dados a cada 100ms
      
      console.log('🎤 Gravação iniciada');
      this.callbacks.onRecordingStart?.();
      toast.info('🎤 Gravação iniciada - fale agora');

    } catch (error) {
      console.error('Erro ao iniciar gravação:', error);
      this.state.isRecording = false;
      this.callbacks.onError?.('Erro ao iniciar gravação');
      toast.error('Erro ao iniciar gravação');
    }
  }

  async stopRecording(): Promise<void> {
    if (!this.state.isRecording || !this.mediaRecorder) return;

    try {
      this.state.isRecording = false;
      this.stopSilenceDetection();
      
      if (this.mediaRecorder.state === 'recording') {
        this.mediaRecorder.stop();
      }

      console.log('🛑 Gravação parada');
      this.callbacks.onRecordingStop?.();
      toast.info('🛑 Processando comando...');

    } catch (error) {
      console.error('Erro ao parar gravação:', error);
      this.callbacks.onError?.('Erro ao parar gravação');
    }
  }

  async toggleRecording(callbacks: VoiceCommandCallbacks = {}): Promise<void> {
    if (this.state.isRecording) {
      await this.stopRecording();
    } else {
      await this.startRecording(callbacks);
    }
  }

  async processTextCommand(text: string): Promise<VoiceCommandResult | null> {
    try {
      this.state.isProcessing = true;
      this.state.transcription = text;
      
      console.log('📝 Processando comando de texto:', text);
      this.callbacks.onTranscriptionUpdate?.(text);

      // Processar comando
      const processResult = await this.processCommand(text);
      if (!processResult.success) {
        throw new Error(processResult.error || 'Erro ao processar comando');
      }

      // Executar comando
      const executeResult = await this.executeCommand(processResult.result, false);
      if (!executeResult.success) {
        throw new Error(executeResult.error || 'Erro ao executar comando');
      }

      this.state.result = executeResult.result;
      this.state.isProcessing = false;

      console.log('✅ Comando processado:', executeResult.result);
      this.callbacks.onCommandResult?.(executeResult.result);
      
      return executeResult.result;

    } catch (error) {
      console.error('Erro no processamento de texto:', error);
      this.state.isProcessing = false;
      this.state.error = error instanceof Error ? error.message : 'Erro desconhecido';
      this.callbacks.onError?.(this.state.error);
      toast.error(`Erro: ${this.state.error}`);
      return null;
    }
  }

  async processAudio(blob: Blob): Promise<void> {
    try {
      this.state.isProcessing = true;
      console.log('🔄 Processando áudio...');

      // 1. Transcrever áudio
      const transcriptionResult = await this.transcribeAudio(blob);
      if (!transcriptionResult.success) {
        throw new Error(transcriptionResult.error || 'Erro na transcrição');
      }

      const transcription = transcriptionResult.transcription;
      this.state.transcription = transcription;
      
      console.log('📝 Transcrição:', transcription);
      this.callbacks.onTranscriptionUpdate?.(transcription);

      // 2. Processar comando
      const processResult = await this.processCommand(transcription);
      if (!processResult.success) {
        throw new Error(processResult.error || 'Erro ao processar comando');
      }

      // 3. Executar comando
      const executeResult = await this.executeCommand(processResult.result, true);
      if (!executeResult.success) {
        throw new Error(executeResult.error || 'Erro ao executar comando');
      }

      this.state.result = executeResult.result;
      this.state.isProcessing = false;

      console.log('✅ Comando executado:', executeResult.result);
      this.callbacks.onCommandResult?.(executeResult.result);

      // 4. Gerar resposta em áudio
      if (executeResult.result.message) {
        await this.generateSpeech(executeResult.result.message);
      }

    } catch (error) {
      console.error('Erro no processamento de áudio:', error);
      this.state.isProcessing = false;
      this.state.error = error instanceof Error ? error.message : 'Erro desconhecido';
      this.callbacks.onError?.(this.state.error);
      toast.error(`Erro: ${this.state.error}`);
    }
  }

  async transcribeAudio(blob: Blob): Promise<TranscriptionResult> {
    try {
      const audioBase64 = await this.blobToBase64(blob);

      const { data, error } = await supabase.functions.invoke('transcribe-audio', {
        body: { audioBase64 },
      });

      if (error) throw error;
      return { success: true, transcription: data.transcription };
    } catch (error) {
      console.error('Erro na transcrição via Supabase:', error);
      return { success: false, transcription: '', error: (error as Error).message };
    }
  }

  private blobToBase64(blob: Blob): Promise<string> {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => {
        const base64String = (reader.result as string).split(',')[1];
        resolve(base64String);
      };
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  }

  async processCommand(transcription: string): Promise<CommandProcessResult> {
    try {
      const { data, error } = await supabase.functions.invoke('process-command', {
        body: { text: transcription },
      });

      if (error) throw error;
      return { success: true, result: data.action };
    } catch (error) {
      console.error('Erro no processamento de comando:', error);
      return { success: false, result: null, error: (error as Error).message };
    }
  }

  private extractTicker(assetName: string): string {
    const name = assetName.toLowerCase();
    
    // Mapeamento inteligente de nomes para tickers
    const tickerMap: Record<string, string> = {
      'vale': 'VALE3',
      'petrobras': 'PETR4', 
      'banco do brasil': 'BBAS3',
      'bbas': 'BBAS3',
      'itau': 'ITUB4',
      'bradesco': 'BBDC4',
      'magazine': 'MGLU3',
      'ambev': 'ABEV3',
      'alzr': 'ALZR11',
      'voo': 'VOO',
      'vnq': 'VNQ',
      'realty': 'O',
      'devon': 'DVN'
    };

    // Buscar por nome conhecido
    for (const [key, ticker] of Object.entries(tickerMap)) {
      if (name.includes(key)) {
        return ticker;
      }
    }

    // Se já parece um ticker, retornar como está
    if (/^[A-Z]{4}[0-9]?$/.test(assetName.toUpperCase())) {
      return assetName.toUpperCase();
    }

    // Padrão para FIIs
    if (/^[A-Z]{4}11$/.test(assetName.toUpperCase())) {
      return assetName.toUpperCase();
    }

    // Fallback
    return assetName.toUpperCase();
  }

  async executeCommand(result: VoiceCommandResult, isVoice: boolean): Promise<CommandProcessResult> {
    try {
      const { data, error } = await supabase.functions.invoke('execute-command', {
        body: { action: result },
      });

      if (error) throw error;
      return { success: true, result: data };
    } catch (error) {
      console.error('Erro na execução de comando:', error);
      return { success: false, result: null, error: (error as Error).message };
    }
  }

  private async getPortfolioData() {
    try {
      // Buscar dados reais da aplicação
      const portfolioElements = document.querySelectorAll('button[class*="bg-"]');
      const tickers: string[] = [];
      
      portfolioElements.forEach(btn => {
        const text = btn.textContent?.trim();
        if (text && /^[A-Z]{4}[0-9]?$|^[A-Z]{4}11$|^[A-Z]{1,3}$/.test(text)) {
          tickers.push(text);
        }
      });

      // Simular cálculo com dados da aplicação (será melhorado com acesso ao state)
      const totalAtivos = tickers.length || 35;
      const valorTotal = totalAtivos * 4200; // Estimativa baseada em portfólio real
      const totalDividendos = valorTotal * 0.045; // 4.5% yield médio
      
      const ativosBR = tickers.filter(t => t.includes('3') || t.includes('4') || t.includes('11')).length;
      const ativosUS = tickers.filter(t => ['VOO', 'VNQ', 'O', 'DVN', 'EVEX'].includes(t)).length;
      const fiis = tickers.filter(t => t.includes('11')).length;

      return {
        totalAtivos,
        valorTotal,
        totalDividendos,
        ativosBR,
        ativosUS,
        fiis,
        yieldMedio: 4.5,
        tickers
      };
    } catch (error) {
      console.error('Erro ao buscar dados do portfólio:', error);
      return {
        totalAtivos: 35,
        valorTotal: 147000,
        totalDividendos: 6615,
        ativosBR: 25,
        ativosUS: 5,
        fiis: 10,
        yieldMedio: 4.5,
        tickers: ['VALE3', 'PETR4', 'BBAS3']
      };
    }
  }

  private async getAssetData(ticker: string) {
    try {
      // Buscar dados reais do ativo (será melhorado com acesso direto aos dados)
      const found = true; // TODO: verificar se existe no portfólio real
      
      if (!found) {
        return { found: false, ticker };
      }

      // Simular dados realistas baseados no tipo de ativo
      const isUS = ['VOO', 'VNQ', 'O', 'DVN', 'EVEX'].includes(ticker);
      const isFII = ticker.includes('11') && !isUS;
      
      let posicao, precoMedio, valorInvestido, valorAtual, dividendos, rentabilidade, unidade, tipo;
      
      if (isUS) {
        posicao = Math.floor(Math.random() * 50) + 10;
        precoMedio = 200 + Math.random() * 150;
        valorInvestido = posicao * precoMedio;
        valorAtual = valorInvestido * (0.9 + Math.random() * 0.4); // -10% a +30%
        dividendos = valorInvestido * 0.025;
        unidade = 'shares';
        tipo = '🇺🇸 Ativo americano';
      } else if (isFII) {
        posicao = Math.floor(Math.random() * 400) + 100;
        precoMedio = 85 + Math.random() * 35;
        valorInvestido = posicao * precoMedio;
        valorAtual = valorInvestido * (0.95 + Math.random() * 0.2); // -5% a +15%
        dividendos = valorInvestido * 0.08;
        unidade = 'cotas';
        tipo = '🏢 FII brasileiro';
      } else {
        posicao = Math.floor(Math.random() * 300) + 50;
        precoMedio = 18 + Math.random() * 32;
        valorInvestido = posicao * precoMedio;
        valorAtual = valorInvestido * (0.8 + Math.random() * 0.6); // -20% a +40%
        dividendos = valorInvestido * 0.05;
        unidade = 'ações';
        tipo = '🇧🇷 Ação brasileira';
      }
      
      rentabilidade = ((valorAtual - valorInvestido) / valorInvestido) * 100;

      return {
        found: true,
        ticker,
        posicao,
        precoMedio,
        valorInvestido,
        valorAtual,
        dividendos,
        rentabilidade,
        unidade,
        tipo
      };
    } catch (error) {
      console.error('Erro ao buscar dados do ativo:', error);
      return { found: false, ticker, error: error.message };
    }
  }

  private async getAvailableTickers(): Promise<string> {
    const portfolioData = await this.getPortfolioData();
    return portfolioData.tickers.slice(0, 10).join(', ') + '...';
  }

  private async addInvestmentToPortfolio(ticker: string, quantidade: number, valorUnitario: number, tipo: string) {
    try {
      // TODO: Integrar com o sistema real de adição de investimentos
      // Por enquanto, simular sucesso
      const currentData = await this.getAssetData(ticker);
      const novaPosicao = currentData.found ? currentData.posicao + quantidade : quantidade;
      
      return {
        success: true,
        ticker,
        quantidade,
        valorUnitario,
        tipo,
        novaPosicao,
        unidade: ticker.includes('11') ? 'cotas' : ['VOO', 'VNQ', 'O', 'DVN', 'EVEX'].includes(ticker) ? 'shares' : 'ações'
      };
    } catch (error) {
      return {
        success: false,
        error: error.message || 'Erro ao adicionar investimento'
      };
    }
  }

  async generateSpeech(text: string): Promise<void> {
    try {
      const { data, error } = await supabase.functions.invoke('text-to-speech', {
        body: { text },
      });

      if (error) throw error;
      
      const audio = new Audio(`data:audio/mp3;base64,${data.audio}`);
      this.currentAudio = audio;
      
      audio.onended = () => {
        this.currentAudio = null;
        this.callbacks.onAudioEnd?.();
      };
      
      await audio.play();
    } catch (error) {
      console.error('Erro na geração de fala:', error);
    }
  }

  stopAudio(): void {
    if (this.currentAudio) {
      this.currentAudio.pause();
      this.currentAudio.currentTime = 0;
      this.currentAudio = null;
      this.callbacks.onAudioEnd?.();
    }
  }

  // ===== GETTERS PARA ESTADO =====

  get isRecording(): boolean {
    return this.state.isRecording;
  }

  get isProcessing(): boolean {
    return this.state.isProcessing;
  }

  get currentTranscription(): string {
    return this.state.transcription;
  }

  get lastResult(): VoiceCommandResult | null {
    return this.state.result;
  }

  get lastError(): string | null {
    return this.state.error;
  }

  // ===== CLEANUP =====

  cleanup(): void {
    this.stopRecording();
    this.stopAudio();
    this.stopSilenceDetection();
    
    if (this.stream) {
      this.stream.getTracks().forEach(track => track.stop());
      this.stream = null;
    }
  }
}

// Singleton instance
export const voiceService = new VoiceCommandService();
export default voiceService;

# ==============================================================================
# ARQUIVO: src\styles\globals.css
# ==============================================================================

@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

:root {
  /* Core Colors */
  --primary-50: #eff6ff;
  --primary-100: #dbeafe;
  --primary-200: #bfdbfe;
  --primary-300: #93c5fd;
  --primary-400: #60a5fa;
  --primary-500: #3b82f6;
  --primary-600: #2563eb;
  --primary-700: #1d4ed8;
  --primary-800: #1e40af;
  --primary-900: #1e3a8a;

  /* Success Colors */
  --success-50: #ecfdf5;
  --success-100: #d1fae5;
  --success-200: #a7f3d0;
  --success-300: #6ee7b7;
  --success-400: #34d399;
  --success-500: #10b981;
  --success-600: #059669;
  --success-700: #047857;
  --success-800: #065f46;
  --success-900: #064e3b;

  /* Warning Colors */
  --warning-50: #fffbeb;
  --warning-100: #fef3c7;
  --warning-200: #fde68a;
  --warning-300: #fcd34d;
  --warning-400: #fbbf24;
  --warning-500: #f59e0b;
  --warning-600: #d97706;
  --warning-700: #b45309;
  --warning-800: #92400e;
  --warning-900: #78350f;

  /* Error Colors */
  --error-50: #fef2f2;
  --error-100: #fee2e2;
  --error-200: #fecaca;
  --error-300: #fca5a5;
  --error-400: #f87171;
  --error-500: #ef4444;
  --error-600: #dc2626;
  --error-700: #b91c1c;
  --error-800: #991b1b;
  --error-900: #7f1d1d;

  /* Neutral Colors */
  --neutral-0: #ffffff;
  --neutral-50: #f8fafc;
  --neutral-100: #f1f5f9;
  --neutral-200: #e2e8f0;
  --neutral-300: #cbd5e1;
  --neutral-400: #94a3b8;
  --neutral-500: #64748b;
  --neutral-600: #475569;
  --neutral-700: #334155;
  --neutral-800: #1e293b;
  --neutral-900: #0f172a;

  /* Glass Effect */
  --glass-bg: rgba(255, 255, 255, 0.1);
  --glass-border: rgba(255, 255, 255, 0.2);
  --glass-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);

  /* Shadows */
  --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  --shadow-2xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25);

  /* Gradients */
  --gradient-primary: linear-gradient(135deg, var(--primary-600) 0%, var(--primary-700) 100%);
  --gradient-success: linear-gradient(135deg, var(--success-600) 0%, var(--success-700) 100%);
  --gradient-warning: linear-gradient(135deg, var(--warning-600) 0%, var(--warning-700) 100%);
  --gradient-error: linear-gradient(135deg, var(--error-600) 0%, var(--error-700) 100%);
  --gradient-glass: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%);

  /* Typography */
  --font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  --font-mono: 'JetBrains Mono', 'Fira Code', monospace;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-size: 16px;
  scroll-behavior: smooth;
}

body {
  font-family: var(--font-family);
  background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%);
  color: var(--neutral-100);
  line-height: 1.6;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  overflow-x: hidden;
}

/* Scrollbar Styling */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: var(--neutral-800);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb {
  background: var(--neutral-600);
  border-radius: 4px;
  transition: background 0.2s ease;
}

::-webkit-scrollbar-thumb:hover {
  background: var(--neutral-500);
}

/* Selection */
::selection {
  background: var(--primary-500);
  color: var(--neutral-0);
}

/* Focus Styles */
*:focus {
  outline: none;
}

*:focus-visible {
  outline: 2px solid var(--primary-400);
  outline-offset: 2px;
}

/* Glass Effect Class */
.glass {
  background: var(--glass-bg);
  backdrop-filter: blur(20px);
  -webkit-backdrop-filter: blur(20px);
  border: 1px solid var(--glass-border);
  box-shadow: var(--glass-shadow);
}

/* Animations */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateX(-20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes scaleIn {
  from {
    opacity: 0;
    transform: scale(0.95);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes shimmer {
  0% {
    background-position: -200px 0;
  }
  100% {
    background-position: calc(200px + 100%) 0;
  }
}

.animate-fadeIn {
  animation: fadeIn 0.6s ease-out;
}

.animate-slideIn {
  animation: slideIn 0.6s ease-out;
}

.animate-scaleIn {
  animation: scaleIn 0.6s ease-out;
}

/* Utility Classes */
.text-gradient {
  background: linear-gradient(135deg, var(--primary-400) 0%, var(--primary-600) 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.hover-lift {
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.hover-lift:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-lg);
}

.hover-glow {
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.hover-glow:hover {
  box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
}

/* Component Base Styles */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  padding: 0.75rem 1.5rem;
  border-radius: 0.75rem;
  font-weight: 500;
  font-size: 0.875rem;
  line-height: 1.25;
  text-decoration: none;
  border: none;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
}

.btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
  transition: left 0.6s;
}

.btn:hover::before {
  left: 100%;
}

.btn-primary {
  background: var(--gradient-primary);
  color: var(--neutral-0);
  box-shadow: var(--shadow-md);
}

.btn-primary:hover {
  transform: translateY(-1px);
  box-shadow: var(--shadow-lg);
}

.btn-success {
  background: var(--gradient-success);
  color: var(--neutral-0);
  box-shadow: var(--shadow-md);
}

.btn-success:hover {
  transform: translateY(-1px);
  box-shadow: var(--shadow-lg);
}

.card {
  background: var(--glass-bg);
  backdrop-filter: blur(20px);
  -webkit-backdrop-filter: blur(20px);
  border: 1px solid var(--glass-border);
  border-radius: 1rem;
  box-shadow: var(--shadow-xl);
  overflow: hidden;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.card:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-2xl);
  border-color: rgba(255, 255, 255, 0.3);
}

/* Responsive Design */
@media (max-width: 768px) {
  html {
    font-size: 14px;
  }
  
  .btn {
    padding: 0.625rem 1.25rem;
    font-size: 0.8125rem;
  }
}

@media (max-width: 480px) {
  html {
    font-size: 13px;
  }
}

/* Dark Mode Enhancements */
@media (prefers-color-scheme: dark) {
  :root {
    --glass-bg: rgba(0, 0, 0, 0.2);
    --glass-border: rgba(255, 255, 255, 0.1);
  }
}

/* High Contrast Mode */
@media (prefers-contrast: high) {
  :root {
    --glass-bg: rgba(0, 0, 0, 0.8);
    --glass-border: rgba(255, 255, 255, 0.4);
  }
}

/* Reduced Motion */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}

# ==============================================================================
# ARQUIVO: src\types\investment.ts
# ==============================================================================

export interface Investment {
  id?: string;
  user_id?: string;
  ticker: string;
  date: string;
  compra: number;
  venda: number;
  valor_unit: number;
  dividendos: number;
  juros: number;
  impostos?: number;
  observacoes: string;
  created_at?: string;
  updated_at?: string;
}

export interface InvestmentRow {
  data: string;
  tipo: 'COMPRA' | 'VENDA' | 'DIVIDENDO' | 'JUROS' | 'DESDOBRAMENTO';
  compra: number;
  venda: number;
  quantidade: number;
  valorUnit: number;
  valor_unitario: number;
  valor_total: number;
  dividendos: number;
  juros: number;
  impostos?: number;
  obs: string;
  observacoes: string;
}

export interface AssetMetadata {
  ticker: string;
  nome: string;
  tipo: 'FII' | 'ACAO' | 'ETF' | 'REIT' | 'STOCK' | 'TESOURO_DIRETO';
  pais: 'BRASIL' | 'EUA' | 'GLOBAL';
  moeda: 'BRL' | 'USD';
  setor: string;
  subsetor: string;
  segmento: string;
  liquidez: 'ALTA' | 'MEDIA' | 'BAIXA';
  categoria_dy: 'RENDA_FIXA' | 'RENDA_VARIAVEL' | 'HIBRIDO';
  benchmark: string;
  isin: string;
  cnpj?: string;
  gestora?: string;
  descricao: string;
  site_oficial?: string;
  logo_url?: string;
  cor_tema: string;
  fundo_imobiliario?: {
    tipo_fii: 'TIJOLO' | 'PAPEL' | 'HIBRIDO' | 'FUNDOS';
    segmento_fii: string;
    patrimonio_liquido: number;
    num_cotistas: number;
    dividend_yield_12m: number;
    p_vp: number;
  };
  acao?: {
    free_float: number;
    valor_mercado: number;
    dividend_yield_12m: number;
    p_l: number;
    p_vp: number;
    roe: number;
    roic: number;
    margem_liquida: number;
  };
  etf?: {
    expense_ratio: number;
    aum: number;
    tracking_error: number;
    inception_date: string;
  };
  tesouro_direto?: {
    tipo_titulo: 'SELIC' | 'IPCA' | 'PREFIXADO';
    vencimento: string;
    rentabilidade: string;
    valor_minimo: number;
    indexador?: string;
  };
}

export interface Portfolio {
  ticker: string;
  metadata?: AssetMetadata;
  totalInvested: number;
  totalDividends: number;
  totalJuros: number;
  totalImpostos?: number;
  currentPosition: number;
  totalYield: number;
  marketValue?: number;
  profit?: number;
  profitPercent?: number;
  averagePrice?: number;
  currentPrice?: number;
  priceChangePercent?: number;
  moeda?: 'BRL' | 'USD';
  lastDividend?: number;
  monthlyIncome?: number;
  investments?: InvestmentRow[];
  performance?: {
    dy_12m: number;
    dy_historico: number;
    cagr: number;
    volatilidade: number;
    sharpe_ratio: number;
    max_drawdown: number;
  };
}

export interface PortfolioAnalysis {
  resumo_geral: {
    total_investido: number;
    valor_mercado: number;
    lucro_prejuizo: number;
    rentabilidade_total: number;
    dy_medio: number;
    renda_mensal: number;
    num_ativos: number;
  };
  por_tipo: Record<string, {
    tipo: string;
    valor_investido: number;
    percentual: number;
    dy_medio: number;
    renda_mensal: number;
    ativos: string[];
  }>;
  por_pais: Record<string, {
    pais: string;
    valor_investido: number;
    percentual: number;
    dy_medio: number;
    moeda: string;
    ativos: string[];
  }>;
  por_setor: Record<string, {
    setor: string;
    valor_investido: number;
    percentual: number;
    dy_medio: number;
    ativos: string[];
  }>;
  top_performers: {
    maior_dy: Portfolio[];
    maior_rentabilidade: Portfolio[];
    maior_renda_mensal: Portfolio[];
    maior_crescimento: Portfolio[];
  };
  risk_analysis: {
    concentracao_risco: number;
    diversificacao_score: number;
    volatilidade_portfolio: number;
    correlacao_media: number;
    var_95: number;
  };
}

export interface MarketData {
  symbol?: string;
  price?: number;
  change?: number;
  changePercent?: number;
  volume?: number;
  marketCap?: number;
  pe?: number;
  dividendYield?: number;
  lastUpdate?: string;
  currentPrice?: number;
  priceChangePercent?: number;
  currency?: string;
}

export interface PieChartData {
  name: string;
  value: number;
  percentage: number;
  color: string;
}

export interface ChartTooltipProps {
  active?: boolean;
  payload?: any[];
  label?: string;
  formatter?: (value: number, name: string) => string;
}

# ==============================================================================
# ARQUIVO: src\types\supabase.ts
# ==============================================================================

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  public: {
    Tables: {
      asset_metadata: {
        Row: {
          id: string
          ticker: string
          nome: string
          tipo: 'FII' | 'ACAO' | 'ETF' | 'REIT' | 'STOCK'
          pais: 'BRASIL' | 'EUA' | 'GLOBAL'
          moeda: 'BRL' | 'USD'
          setor: string | null
          subsetor: string | null
          segmento: string | null
          liquidez: string | null
          categoria_dy: string | null
          benchmark: string | null
          isin: string | null
          cnpj: string | null
          gestora: string | null
          descricao: string | null
          site_oficial: string | null
          cor_tema: string | null
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          ticker: string
          nome: string
          tipo: 'FII' | 'ACAO' | 'ETF' | 'REIT' | 'STOCK'
          pais?: 'BRASIL' | 'EUA' | 'GLOBAL'
          moeda?: 'BRL' | 'USD'
          setor?: string | null
          subsetor?: string | null
          segmento?: string | null
          liquidez?: string | null
          categoria_dy?: string | null
          benchmark?: string | null
          isin?: string | null
          cnpj?: string | null
          gestora?: string | null
          descricao?: string | null
          site_oficial?: string | null
          cor_tema?: string | null
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          ticker?: string
          nome?: string
          tipo?: 'FII' | 'ACAO' | 'ETF' | 'REIT' | 'STOCK'
          pais?: 'BRASIL' | 'EUA' | 'GLOBAL'
          moeda?: 'BRL' | 'USD'
          setor?: string | null
          subsetor?: string | null
          segmento?: string | null
          liquidez?: string | null
          categoria_dy?: string | null
          benchmark?: string | null
          isin?: string | null
          cnpj?: string | null
          gestora?: string | null
          descricao?: string | null
          site_oficial?: string | null
          cor_tema?: string | null
          created_at?: string
          updated_at?: string
        }
      }
      investments: {
        Row: {
          id: string
          user_id: string
          ticker: string
          date: string
          compra: number | null
          venda: number | null
          valor_unit: number | null
          dividendos: number | null
          juros: number | null
          observacoes: string | null
          created_at: string | null
          updated_at: string | null
        }
        Insert: {
          id?: string
          user_id: string
          ticker: string
          date: string
          compra?: number | null
          venda?: number | null
          valor_unit?: number | null
          dividendos?: number | null
          juros?: number | null
          observacoes?: string | null
          created_at?: string | null
          updated_at?: string | null
        }
        Update: {
          id?: string
          user_id?: string
          ticker?: string
          date?: string
          compra?: number | null
          venda?: number | null
          valor_unit?: number | null
          dividendos?: number | null
          juros?: number | null
          observacoes?: string | null
          created_at?: string | null
          updated_at?: string | null
        }
      }
      profiles: {
        Row: {
          id: string
          email: string | null
          full_name: string | null
          avatar_url: string | null
          role: string
          created_at: string
        }
        Insert: {
          id: string
          email?: string | null
          full_name?: string | null
          avatar_url?: string | null
          role?: string
          created_at?: string
        }
        Update: {
          id?: string
          email?: string | null
          full_name?: string | null
          avatar_url?: string | null
          role?: string
          created_at?: string
        }
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

# ==============================================================================
# ARQUIVO: src\App.tsx
# ==============================================================================

import React, { useState, useEffect, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';
import {
  Plus, 
  Download, 
  FileDown, 
  RefreshCw, 
  Table, 
  BarChart3, 
  LayoutGrid,
  ListOrdered,
  Search,
  Calendar
} from 'lucide-react';
import { Toaster } from 'react-hot-toast';
import { Toaster as SonnerToaster } from 'sonner';
import toast from 'react-hot-toast';
import Login from './components/Login';

// Dados locais como fallback
import { portfolioData } from './data/portfolioData';
import { assetMetadata } from './data/assetMetadata';

// Serviços do Supabase
import { portfolioService, AssetMetadata as SupabaseAssetMetadata } from './services/supabaseService';
// import { updatePortfoliosWithMarketData, PortfolioWithMarketData } from './services/portfolioCalculator';

// Estilos e componentes
import './index.css';
import Header from './components/Header';
import InvestmentTable from './components/InvestmentTable';
import AdvancedDashboard from './components/AdvancedDashboard';
import AssetCard from './components/AssetCard';
import Summary from './components/Summary';
import AddInvestmentModal from './components/AddInvestmentModal';
import EditInvestmentModal from './components/EditInvestmentModal';
import NewAssetModal from './components/NewAssetModal';
import PortfolioSummary from './components/PortfolioSummary';
// 🚀 NOVOS COMPONENTES INCRÍVEIS PARA AS ABAS PRINCIPAIS
import OverviewTab from './components/OverviewTab';
import DashboardTab from './components/DashboardTab';
import PortfolioTab from './components/PortfolioTab';
import SettingsTab from './components/SettingsTab';
import { Portfolio } from './types/investment';
import { Investment } from './types/investment';

function App() {
  // Debug das variáveis de ambiente
  console.log('🔧 ERASMO INVEST - Configurações:');
  console.log('🌐 SUPABASE_URL:', import.meta.env.VITE_SUPABASE_URL || 'NÃO DEFINIDA');
  console.log('🔑 SUPABASE_KEY:', import.meta.env.VITE_SUPABASE_ANON_KEY ? 'DEFINIDA' : 'NÃO DEFINIDA');
  console.log('🔒 Auth Estado:', localStorage.getItem('erasmoInvestAuth'));

  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(
    localStorage.getItem('erasmoInvestAuth') === 'true'
  );
  const [portfolios, setPortfolios] = useState<Portfolio[]>([]);
  const [activeTab, setActiveTab] = useState<string>('');
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [dateFilter, setDateFilter] = useState<string>('');
  const [refreshKey, setRefreshKey] = useState<number>(0); 
  const [viewMode, setViewMode] = useState<'table' | 'dashboard' | 'all'>('table');
  const [selectedAsset, setSelectedAsset] = useState<string | null>(null);
  const [showHorizontal, setShowHorizontal] = useState<boolean>(true);
  const [loading, setLoading] = useState<boolean>(true);
  const [useLocalData, setUseLocalData] = useState<boolean>(false); // USAR DADOS DO SUPABASE
  
  // Estados dos modais
  const [showAddModal, setShowAddModal] = useState<boolean>(false);
  const [showEditModal, setShowEditModal] = useState<boolean>(false);
  const [showNewAssetModal, setShowNewAssetModal] = useState<boolean>(false);
  const [editingInvestment, setEditingInvestment] = useState<Investment | null>(null);
  
  // Carregar dados (Supabase ou locais)
  useEffect(() => {
    if (isAuthenticated) {
      loadData();
    }
  }, [isAuthenticated, refreshKey]); // eslint-disable-line react-hooks/exhaustive-deps

  const loadData = async () => {
    try {
      console.log('🚀 ERASMO INVEST - Iniciando carregamento de dados...');
      console.log('📊 Portfolio Service:', portfolioService ? 'DISPONÍVEL' : 'INDISPONÍVEL');
      console.log('🔧 Use Local Data:', useLocalData);
      
      setLoading(true);
      
      // Tentar carregar do Supabase primeiro
      if (portfolioService && !useLocalData) {
        try {
          console.log('🔄 === FORÇANDO NOVA CARGA SUPABASE ===');
          
          // Limpar cache anterior
          localStorage.removeItem('portfolioCache');
          localStorage.removeItem('marketCache');
          
          const portfolioData = await portfolioService.getPortfolioSummary();
          console.log('✅ Dados carregados do Supabase:', portfolioData?.length || 0, 'ativos');
          
          if (portfolioData && portfolioData.length > 0) {
            console.log('📋 Lista de tickers carregados:', portfolioData.map(p => p.ticker).join(', '));
            console.log('💰 Total de investimentos únicos:', portfolioData.length);
            
            // Mostrar alguns exemplos de ativos
            const top5 = portfolioData.slice(0, 5).map(p => `${p.ticker}(${p.currentPosition})`);
            console.log('📊 Primeiros 5 ativos:', top5.join(', '));
          }
          
          setPortfolios(portfolioData);
          
          if (!activeTab && portfolioData.length > 0) {
            setActiveTab('overview'); // 🚀 Começar na aba Overview
            console.log('📈 Aba ativa definida: overview');
          }
          
          setLoading(false);
          console.log('🎉 Carregamento concluído com sucesso!');
          return;
        } catch (error) {
          console.error('❌ ERRO NO SUPABASE:', error);
          toast.error('Erro ao carregar dados do Supabase');
          setLoading(false);
        }
      } else {
        console.log('⚠️ Modo dados locais ativado ou portfolioService indisponível');
        setLoading(false);
      }
    } catch (error) {
      console.error('Erro geral ao carregar dados:', error);
      toast.error('Erro geral ao carregar dados');
      setLoading(false);
    }
  };

  const sortedInvestments = useMemo(() => {
    return portfolios.map(p => p.ticker).sort((a, b) => a.localeCompare(b));
  }, [portfolios]);

  const filteredTabs = useMemo(() => {
    return sortedInvestments.filter(ticker => 
      ticker.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [searchTerm, sortedInvestments]);

  const handleTabChange = (tab: string) => {
    setActiveTab(tab);
    setSelectedAsset(null);
  };

  const handleDataChange = () => {
    setRefreshKey(prev => prev + 1);
    toast.success('Dados atualizados!');
  };
  
  const handleEditInvestment = (investment: unknown) => {
    setEditingInvestment(investment as Investment);
    setShowEditModal(true);
  };
  
  const handleModalSuccess = () => {
    handleDataChange();
    setShowAddModal(false);
    setShowEditModal(false);
    setEditingInvestment(null);
  };

  const exportToExcel = () => {
    const workbook = XLSX.utils.book_new();
    const currentDate = new Date().toLocaleDateString('pt-BR');
    const currentTime = new Date().toLocaleTimeString('pt-BR');

    // ===========================================
    // ABA 1: PAINEL EXECUTIVO
    // ===========================================
    const dashboardData = [
      ['ERASMO INVEST - PAINEL EXECUTIVO', '', '', '', '', '', ''],
      [`Relatório gerado em: ${currentDate} às ${currentTime}`, '', '', '', '', '', ''],
      ['', '', '', '', '', '', ''],
      ['RESUMO CONSOLIDADO', '', '', '', '', '', ''],
      ['Total de Ativos:', portfolios.length, '', 'Total Investido:', `R$ ${portfolios.reduce((sum, p) => sum + p.totalInvested, 0).toLocaleString('pt-BR', {minimumFractionDigits: 2})}`, '', ''],
      ['Valor de Mercado:', `R$ ${portfolios.reduce((sum, p) => sum + p.marketValue, 0).toLocaleString('pt-BR', {minimumFractionDigits: 2})}`, '', 'Total Dividendos:', `R$ ${portfolios.reduce((sum, p) => sum + p.totalDividends, 0).toLocaleString('pt-BR', {minimumFractionDigits: 2})}`, '', ''],
      ['Rentabilidade Total:', `${portfolios.length > 0 ? (portfolios.reduce((sum, p) => sum + p.profit, 0) / portfolios.reduce((sum, p) => sum + p.totalInvested, 0) * 100).toFixed(2) : 0}%`, '', 'Total Juros:', `R$ ${portfolios.reduce((sum, p) => sum + p.totalJuros, 0).toLocaleString('pt-BR', {minimumFractionDigits: 2})}`, '', ''],
      ['', '', '', '', '', '', ''],
      ['PERFORMANCE POR CATEGORIA', '', '', '', '', '', ''],
      ['Categoria', 'Qtd Ativos', 'Valor Investido', 'Valor Atual', 'Dividendos', 'Rentabilidade', 'Percentual']
    ];

    // Agrupar por tipo
    const groupedByType = portfolios.reduce((acc, p) => {
      const tipo = p.metadata?.tipo || 'Outros';
      if (!acc[tipo]) acc[tipo] = [];
      acc[tipo].push(p);
      return acc;
    }, {} as Record<string, typeof portfolios>);

    Object.entries(groupedByType).forEach(([tipo, portfolioList]) => {
      const totalInvested = portfolioList.reduce((sum, p) => sum + p.totalInvested, 0);
      const totalMarket = portfolioList.reduce((sum, p) => sum + p.marketValue, 0);
      const totalDividends = portfolioList.reduce((sum, p) => sum + p.totalDividends, 0);
      const performance = totalInvested > 0 ? ((totalMarket - totalInvested) / totalInvested * 100) : 0;
      const percentage = portfolios.reduce((sum, p) => sum + p.totalInvested, 0) > 0 ? 
        (totalInvested / portfolios.reduce((sum, p) => sum + p.totalInvested, 0) * 100) : 0;

      dashboardData.push([
        tipo,
        portfolioList.length,
        `R$ ${totalInvested.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`,
        `R$ ${totalMarket.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`,
        `R$ ${totalDividends.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`,
        `${performance.toFixed(2)}%`,
        `${percentage.toFixed(1)}%`
      ]);
    });

    const dashboardWS = XLSX.utils.aoa_to_sheet(dashboardData);
    
    // Formatação do cabeçalho
    const range = XLSX.utils.decode_range(dashboardWS['!ref']!);
    dashboardWS['!cols'] = [
      { wch: 20 }, { wch: 15 }, { wch: 18 }, { wch: 18 }, { wch: 18 }, { wch: 15 }, { wch: 12 }
    ];

    XLSX.utils.book_append_sheet(workbook, dashboardWS, '📊 Painel Executivo');

    // ===========================================
    // ABA 2: RESUMO DETALHADO
    // ===========================================
    const summaryData = [
      ['ERASMO INVEST - RESUMO DETALHADO POR ATIVO', '', '', '', '', '', '', '', '', '', '', ''],
      [`Atualizado em: ${currentDate} às ${currentTime}`, '', '', '', '', '', '', '', '', '', '', ''],
      ['', '', '', '', '', '', '', '', '', '', '', ''],
      ['Ticker', 'Nome do Ativo', 'Tipo', 'País', 'Setor', 'Posição Atual', 'Valor Investido', 'Valor de Mercado', 'Dividendos', 'Juros', 'DY Total (%)', 'Rentabilidade (%)']
    ];
    
    portfolios.forEach(p => {
      summaryData.push([
        p.ticker,
        p.metadata?.nome || p.ticker,
        p.metadata?.tipo || 'N/A',
        p.metadata?.pais || 'BRASIL',
        p.metadata?.setor || 'N/A',
        p.currentPosition.toLocaleString('pt-BR', {minimumFractionDigits: 0}),
        `R$ ${p.totalInvested.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`,
        `R$ ${p.marketValue.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`,
        `R$ ${p.totalDividends.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`,
        `R$ ${p.totalJuros.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`,
        `${p.totalYield.toFixed(2)}%`,
        `${p.profitPercent.toFixed(2)}%`
      ]);
    });

    // Linha de totais
    const totalInvested = portfolios.reduce((sum, p) => sum + p.totalInvested, 0);
    const totalMarket = portfolios.reduce((sum, p) => sum + p.marketValue, 0);
    const totalDividends = portfolios.reduce((sum, p) => sum + p.totalDividends, 0);
    const totalJuros = portfolios.reduce((sum, p) => sum + p.totalJuros, 0);
    const avgYield = totalInvested > 0 ? ((totalDividends + totalJuros) / totalInvested * 100) : 0;
    const totalProfit = totalInvested > 0 ? ((totalMarket - totalInvested) / totalInvested * 100) : 0;

    summaryData.push(['', '', '', '', '', '', '', '', '', '', '', '']);
    summaryData.push([
      'TOTAIS', '', '', '', '',
      portfolios.reduce((sum, p) => sum + p.currentPosition, 0).toLocaleString('pt-BR'),
      `R$ ${totalInvested.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`,
      `R$ ${totalMarket.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`,
      `R$ ${totalDividends.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`,
      `R$ ${totalJuros.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`,
      `${avgYield.toFixed(2)}%`,
      `${totalProfit.toFixed(2)}%`
    ]);

    const summaryWS = XLSX.utils.aoa_to_sheet(summaryData);
    summaryWS['!cols'] = [
      { wch: 10 }, { wch: 25 }, { wch: 8 }, { wch: 8 }, { wch: 20 }, 
      { wch: 12 }, { wch: 15 }, { wch: 15 }, { wch: 12 }, { wch: 12 }, { wch: 10 }, { wch: 15 }
    ];

    XLSX.utils.book_append_sheet(workbook, summaryWS, '📋 Resumo Detalhado');

    // ===========================================
    // ABAS INDIVIDUAIS POR ATIVO
    // ===========================================
    portfolios.forEach(portfolio => {
      const data = portfolio.investments;
      if (!data || data.length === 0) return;

      const assetData = [
        [`${portfolio.metadata?.nome || portfolio.ticker} (${portfolio.ticker})`, '', '', '', '', '', '', '', '', '', ''],
        [`Tipo: ${portfolio.metadata?.tipo || 'N/A'} | Setor: ${portfolio.metadata?.setor || 'N/A'} | País: ${portfolio.metadata?.pais || 'BRASIL'}`, '', '', '', '', '', '', '', '', '', ''],
        ['', '', '', '', '', '', '', '', '', '', ''],
        ['INFORMAÇÕES GERAIS', '', '', '', '', '', '', '', '', '', ''],
        ['Posição Atual:', `${portfolio.currentPosition.toLocaleString('pt-BR')} cotas`, '', 'Total Investido:', `R$ ${portfolio.totalInvested.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`, '', '', '', '', '', ''],
        ['Valor de Mercado:', `R$ ${portfolio.marketValue.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`, '', 'Preço Médio:', `R$ ${portfolio.currentPosition > 0 ? (Math.abs(portfolio.totalInvested) / portfolio.currentPosition).toFixed(4) : '0.00'}`, '', '', '', '', '', ''],
        ['Total Dividendos:', `R$ ${portfolio.totalDividends.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`, '', 'Total Juros:', `R$ ${portfolio.totalJuros.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`, '', '', '', '', '', '', ''],
        ['DY Total:', `${portfolio.totalYield.toFixed(2)}%`, '', 'Rentabilidade:', `${portfolio.profitPercent.toFixed(2)}%`, '', '', '', '', '', ''],
        ['', '', '', '', '', '', '', '', '', '', ''],
        ['HISTÓRICO DE OPERAÇÕES', '', '', '', '', '', '', '', '', '', ''],
        ['Data', 'Tipo', 'Quantidade', 'Valor Unitário', 'Valor Total', 'Dividendos', 'Juros', 'Impostos', 'DY Operação (%)', 'Posição Acum.', 'Observações']
      ];

      let posicaoAcumulada = 0;
      let investimentoAcumulado = 0;

      data.forEach((row, index) => {
        const formattedDate = new Date(row.data).toLocaleDateString('pt-BR');
        
        let quantidade = 0;
        let valorTotal = 0;
        
        if (row.tipo === 'COMPRA') {
          quantidade = row.quantidade;
          valorTotal = row.valor_total;
          posicaoAcumulada += quantidade;
          investimentoAcumulado += valorTotal;
        } else if (row.tipo === 'VENDA') {
          quantidade = -row.quantidade;
          valorTotal = -row.valor_total;
          posicaoAcumulada += quantidade;
          investimentoAcumulado += valorTotal;
        }

        // Calcular DY da operação
        const dyOperacao = row.dividendos > 0 && Math.abs(valorTotal) > 0 ? 
          (row.dividendos / Math.abs(valorTotal) * 100) : 0;

        assetData.push([
          formattedDate,
          row.tipo,
          quantidade !== 0 ? Math.abs(quantidade).toLocaleString('pt-BR') : '',
          row.valor_unitario > 0 ? `R$ ${row.valor_unitario.toLocaleString('pt-BR', {minimumFractionDigits: 4})}` : '',
          valorTotal !== 0 ? `R$ ${Math.abs(valorTotal).toLocaleString('pt-BR', {minimumFractionDigits: 2})}` : '',
          row.dividendos > 0 ? `R$ ${row.dividendos.toLocaleString('pt-BR', {minimumFractionDigits: 2})}` : '',
          row.juros > 0 ? `R$ ${row.juros.toLocaleString('pt-BR', {minimumFractionDigits: 2})}` : '',
          row.impostos > 0 ? `R$ ${row.impostos.toLocaleString('pt-BR', {minimumFractionDigits: 2})}` : '',
          dyOperacao > 0 ? `${dyOperacao.toFixed(2)}%` : '',
          posicaoAcumulada.toLocaleString('pt-BR'),
          row.observacoes || ''
        ]);
      });

      // Linha de totais para o ativo
      assetData.push(['', '', '', '', '', '', '', '', '', '', '']);
      assetData.push([
        'TOTAIS',
        '',
        `${portfolio.currentPosition.toLocaleString('pt-BR')} cotas`,
        `Preço Médio: R$ ${portfolio.currentPosition > 0 ? (Math.abs(portfolio.totalInvested) / portfolio.currentPosition).toFixed(4) : '0.0000'}`,
        `R$ ${Math.abs(portfolio.totalInvested).toLocaleString('pt-BR', {minimumFractionDigits: 2})}`,
        `R$ ${portfolio.totalDividends.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`,
        `R$ ${portfolio.totalJuros.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`,
        `R$ ${(portfolio.totalImpostos || 0).toLocaleString('pt-BR', {minimumFractionDigits: 2})}`,
        `DY: ${portfolio.totalYield.toFixed(2)}%`,
        `Rentab: ${portfolio.profitPercent.toFixed(2)}%`,
        `Valor Atual: R$ ${portfolio.marketValue.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`
      ]);

      const ws = XLSX.utils.aoa_to_sheet(assetData);
      ws['!cols'] = [
        { wch: 12 }, { wch: 10 }, { wch: 12 }, { wch: 15 }, { wch: 15 }, 
        { wch: 12 }, { wch: 12 }, { wch: 12 }, { wch: 12 }, { wch: 12 }, { wch: 30 }
      ];

      XLSX.utils.book_append_sheet(workbook, ws, portfolio.ticker);
    });

    // Salvar arquivo
    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
    const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
    saveAs(blob, `Erasmo_Invest_Completo_${new Date().toISOString().split('T')[0]}.xlsx`);
    
    toast.success('📊 Planilha Excel profissional exportada com sucesso!');
  };

  const exportSingleAsset = () => {
    const portfolio = portfolios.find(p => p.ticker === activeTab);
    const data = portfolio?.investments;
    if (!data?.length) {
      toast.error('Não há dados para exportar');
      return;
    }

    // Criar workbook Excel para ativo individual
    const workbook = XLSX.utils.book_new();
    const currentDate = new Date().toLocaleDateString('pt-BR');
    const currentTime = new Date().toLocaleTimeString('pt-BR');

    const assetData = [
      [`ERASMO INVEST - ${portfolio.metadata?.nome || activeTab} (${activeTab})`, '', '', '', '', '', '', '', '', ''],
      [`Relatório gerado em: ${currentDate} às ${currentTime}`, '', '', '', '', '', '', '', '', ''],
      ['', '', '', '', '', '', '', '', '', ''],
      ['═══════════════════════════════════════════════════════════════════════', '', '', '', '', '', '', '', '', ''],
      ['INFORMAÇÕES GERAIS DO ATIVO', '', '', '', '', '', '', '', '', ''],
      ['═══════════════════════════════════════════════════════════════════════', '', '', '', '', '', '', '', '', ''],
      ['Tipo:', portfolio.metadata?.tipo || 'N/A', '', 'Setor:', portfolio.metadata?.setor || 'N/A', '', '', '', '', ''],
      ['País:', portfolio.metadata?.pais || 'BRASIL', '', 'Moeda:', portfolio.metadata?.moeda || 'BRL', '', '', '', '', ''],
      ['', '', '', '', '', '', '', '', '', ''],
      ['RESUMO FINANCEIRO', '', '', '', '', '', '', '', '', ''],
      ['─────────────────────────────────────────────────────────────────────', '', '', '', '', '', '', '', '', ''],
      ['Posição Atual:', `${portfolio.currentPosition.toLocaleString('pt-BR')} cotas`, '', 'Preço Médio de Compra:', `R$ ${portfolio.currentPosition > 0 ? (Math.abs(portfolio.totalInvested) / portfolio.currentPosition).toFixed(4) : '0.0000'}`, '', '', '', '', ''],
      ['Total Investido:', `R$ ${portfolio.totalInvested.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`, '', 'Valor de Mercado:', `R$ ${portfolio.marketValue.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`, '', '', '', '', ''],
      ['Total Dividendos:', `R$ ${portfolio.totalDividends.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`, '', 'Total Juros:', `R$ ${portfolio.totalJuros.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`, '', '', '', '', ''],
      ['DY Total:', `${portfolio.totalYield.toFixed(2)}%`, '', 'Rentabilidade:', `${portfolio.profitPercent.toFixed(2)}%`, '', '', '', '', ''],
      ['Lucro/Prejuízo:', `R$ ${portfolio.profit.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`, '', 'Impostos Pagos:', `R$ ${(portfolio.totalImpostos || 0).toLocaleString('pt-BR', {minimumFractionDigits: 2})}`, '', '', '', '', ''],
      ['', '', '', '', '', '', '', '', '', ''],
      ['═══════════════════════════════════════════════════════════════════════', '', '', '', '', '', '', '', '', ''],
      ['HISTÓRICO COMPLETO DE OPERAÇÕES', '', '', '', '', '', '', '', '', ''],
      ['═══════════════════════════════════════════════════════════════════════', '', '', '', '', '', '', '', '', ''],
      ['Data', 'Tipo', 'Quantidade', 'Valor Unitário', 'Valor Total', 'Dividendos', 'Juros', 'Impostos', 'DY da Operação (%)', 'Posição Acumulada', 'Observações']
    ];

    let posicaoAcumulada = 0;
    let investimentoAcumulado = 0;

    data.forEach((row: any, index: number) => {
      const formattedDate = new Date(row.data).toLocaleDateString('pt-BR');
      
      let quantidade = 0;
      let valorTotal = 0;
      
      if (row.tipo === 'COMPRA') {
        quantidade = row.quantidade;
        valorTotal = row.valor_total;
        posicaoAcumulada += quantidade;
        investimentoAcumulado += valorTotal;
      } else if (row.tipo === 'VENDA') {
        quantidade = row.quantidade;
        valorTotal = row.valor_total;
        posicaoAcumulada -= quantidade;
        investimentoAcumulado -= valorTotal;
      }

      // Calcular DY da operação
      const dyOperacao = row.dividendos > 0 && Math.abs(valorTotal) > 0 ? 
        (row.dividendos / Math.abs(valorTotal) * 100) : 0;

      assetData.push([
        formattedDate,
        row.tipo,
        quantidade > 0 ? quantidade.toLocaleString('pt-BR') : '',
        row.valor_unitario > 0 ? `R$ ${row.valor_unitario.toLocaleString('pt-BR', {minimumFractionDigits: 4})}` : '',
        valorTotal > 0 ? `R$ ${valorTotal.toLocaleString('pt-BR', {minimumFractionDigits: 2})}` : '',
        row.dividendos > 0 ? `R$ ${row.dividendos.toLocaleString('pt-BR', {minimumFractionDigits: 2})}` : '',
        row.juros > 0 ? `R$ ${row.juros.toLocaleString('pt-BR', {minimumFractionDigits: 2})}` : '',
        row.impostos > 0 ? `R$ ${row.impostos.toLocaleString('pt-BR', {minimumFractionDigits: 2})}` : '',
        dyOperacao > 0 ? `${dyOperacao.toFixed(2)}%` : '',
        posicaoAcumulada.toLocaleString('pt-BR'),
        row.observacoes || ''
      ]);
    });

    // Linha separadora e totals
    assetData.push(['─────────────────────────────────────────────────────────────────────', '', '', '', '', '', '', '', '', '', '']);
    assetData.push([
      'TOTAIS',
      `${data.length} operações`,
      `${portfolio.currentPosition.toLocaleString('pt-BR')} cotas`,
      `Preço Médio: R$ ${portfolio.currentPosition > 0 ? (Math.abs(portfolio.totalInvested) / portfolio.currentPosition).toFixed(4) : '0.0000'}`,
      `R$ ${Math.abs(portfolio.totalInvested).toLocaleString('pt-BR', {minimumFractionDigits: 2})}`,
      `R$ ${portfolio.totalDividends.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`,
      `R$ ${portfolio.totalJuros.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`,
      `R$ ${(portfolio.totalImpostos || 0).toLocaleString('pt-BR', {minimumFractionDigits: 2})}`,
      `DY Total: ${portfolio.totalYield.toFixed(2)}%`,
      `Rentabilidade: ${portfolio.profitPercent.toFixed(2)}%`,
      `Valor Atual: R$ ${portfolio.marketValue.toLocaleString('pt-BR', {minimumFractionDigits: 2})}`
    ]);

    const ws = XLSX.utils.aoa_to_sheet(assetData);
    
    // Configurar larguras das colunas
    ws['!cols'] = [
      { wch: 12 }, { wch: 12 }, { wch: 12 }, { wch: 16 }, { wch: 16 }, 
      { wch: 14 }, { wch: 12 }, { wch: 12 }, { wch: 16 }, { wch: 16 }, { wch: 35 }
    ];

    XLSX.utils.book_append_sheet(workbook, ws, activeTab);

    // Salvar arquivo
    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
    const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
    saveAs(blob, `Erasmo_Invest_${activeTab}_${new Date().toISOString().split('T')[0]}.xlsx`);
    
    toast.success(`📊 Relatório detalhado de ${activeTab} exportado!`);
  };

  const handleLogin = () => {
    setIsAuthenticated(true);
    loadData();
  };

  const handleLogout = () => {
    localStorage.removeItem('erasmoInvestAuth');
    setIsAuthenticated(false);
    toast.success('Você saiu do sistema com sucesso');
  };

  // PRIMEIRA VERIFICAÇÃO: Se não está autenticado, mostrar login
  if (!isAuthenticated) {
    return <Login onLogin={handleLogin} />;
  }

  // SEGUNDA VERIFICAÇÃO: Se autenticado mas carregando dados, mostrar loading
  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-slate-900 to-slate-800 text-white flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-white mx-auto mb-4"></div>
          <p>Carregando dados do Supabase...</p>
          <p className="text-sm text-slate-400 mt-2">Conectando com APIs de mercado</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-slate-900 to-slate-800 text-white">
      <Toaster 
        position="top-center"
        toastOptions={{ 
          duration: 3000,
          style: {
            background: '#1e293b',
            color: 'white',
            borderRadius: '10px',
            border: '1px solid rgba(255, 255, 255, 0.1)'
          }
        }}
      />
      <SonnerToaster 
        position="top-center"
        theme="dark"
      />
      
              <Header currentTab={activeTab} onTabChange={setActiveTab} />

      <main className="max-w-7xl mx-auto px-4 py-6 pb-24">


        {/* Abas */}
        <div className={`bg-slate-800/40 backdrop-blur-sm rounded-lg border border-slate-700/50 p-2 mb-6 ${showHorizontal ? 'overflow-x-auto' : ''}`}>
          {showHorizontal ? (
            <div className="flex gap-2 pb-1" style={{ overflowX: 'auto', whiteSpace: 'nowrap' }}>
              {filteredTabs.map((tab) => {
                const isUSAsset = ['VOO', 'VNQ', 'DVN', 'EVEX', 'O'].includes(tab);
                
                return (
                  <button
                    key={tab}
                    onClick={() => handleTabChange(tab)}
                    className={`py-2 px-4 rounded whitespace-nowrap transition-colors ${
                      activeTab === tab 
                        ? 'bg-blue-600 text-white shadow-lg' 
                        : isUSAsset 
                          ? 'bg-indigo-700/50 text-indigo-200 hover:bg-indigo-600'
                          : 'bg-slate-700/50 text-slate-300 hover:bg-slate-600'
                    }`}
                  >
                    {tab}
                  </button>
                );
              })}
            </div>
          ) : (
            <div className="grid grid-cols-1 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-2">
              {filteredTabs.map((tab) => {
                const isUSAsset = ['VOO', 'VNQ', 'DVN', 'EVEX', 'O'].includes(tab);
                
                return (
                  <button
                    key={tab}
                    onClick={() => handleTabChange(tab)}
                    className={`py-2 px-3 rounded whitespace-nowrap transition-colors ${
                      activeTab === tab 
                        ? 'bg-blue-600 text-white shadow-lg' 
                        : isUSAsset 
                          ? 'bg-indigo-700/50 text-indigo-200 hover:bg-indigo-600'
                          : 'bg-slate-700/50 text-slate-300 hover:bg-slate-600'
                    }`}
                  >
                    {tab}
                  </button>
                );
              })}
            </div>
          )}
        </div>

        {/* Controles */}
        <div className="flex flex-wrap items-center justify-between gap-4 mb-6">
          <div className="flex flex-wrap gap-2 items-center">
            <button
              onClick={handleDataChange}
              className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors"
            >
              <RefreshCw className="h-4 w-4" />
              <span>Atualizar</span>
            </button>
            
            <button
              onClick={() => setShowHorizontal(!showHorizontal)}
              className="bg-slate-700 hover:bg-slate-600 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors"
            >
              {showHorizontal ? <LayoutGrid className="h-4 w-4" /> : <ListOrdered className="h-4 w-4" />}
              <span>{showHorizontal ? "Grade" : "Lista"}</span>
            </button>
          </div>
          
          <div className="flex flex-wrap gap-2">
            <button
              onClick={() => setShowNewAssetModal(true)}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors"
            >
              <Plus className="h-4 w-4" />
              <span>Novo Investimento</span>
            </button>
            
            <button
              onClick={() => setShowAddModal(true)}
              disabled={!activeTab}
              className="bg-green-600 hover:bg-green-700 disabled:bg-gray-600 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors"
            >
              <Plus className="h-4 w-4" />
              <span>Nova Operação</span>
            </button>
            
            <button
              onClick={() => setViewMode(viewMode === 'table' ? 'dashboard' : viewMode === 'dashboard' ? 'all' : 'table')}
              className="bg-slate-700 hover:bg-slate-600 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors"
            >
              {viewMode === 'table' ? (
                <>
                  <BarChart3 className="h-4 w-4" />
                  <span>Dashboard</span>
                </>
              ) : viewMode === 'dashboard' ? (
                <>
                  <BarChart3 className="h-4 w-4" />
                  <span>Tudo</span>
                </>
              ) : (
                <>
                  <Table className="h-4 w-4" />
                  <span>Tabela</span>
                </>
              )}
            </button>
            
            <button
              onClick={exportSingleAsset}
              disabled={!activeTab}
              className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors"
            >
              <FileDown className="h-4 w-4" />
              <span>Excel {activeTab}</span>
            </button>
            
            <button
              onClick={exportToExcel}
              className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors"
            >
              <Download className="h-4 w-4" />
              <span>Excel Completo</span>
            </button>
          </div>
        </div>
        
        {/* Filtros */}
        <div className="flex flex-wrap gap-4 mb-6">
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400" />
            <input
              type="text"
              placeholder="Buscar por ticker..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="bg-slate-800/40 backdrop-blur-sm border border-slate-700/50 rounded-lg py-2 pl-10 pr-4 w-full text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          
          <div className="relative">
            <Calendar className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400" />
            <input
              type="date"
              value={dateFilter}
              onChange={(e) => setDateFilter(e.target.value)}
              className="bg-slate-800/40 backdrop-blur-sm border border-slate-700/50 rounded-lg py-2 pl-10 pr-4 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>

        {/* 🚀 CONTEÚDO PRINCIPAL - RENDERIZAÇÃO BASEADA EM ABAS */}
        <AnimatePresence mode="wait">
          {/* 📊 VERIFICAR SE É UMA ABA PRINCIPAL */}
          {['overview', 'dashboard', 'portfolio', 'settings'].includes(activeTab) ? (
            <motion.div
              key={activeTab}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.5 }}
            >
              {activeTab === 'overview' && <OverviewTab portfolios={portfolios} />}
              {activeTab === 'dashboard' && <DashboardTab portfolios={portfolios} />}
              {activeTab === 'portfolio' && (
                <PortfolioTab 
                  portfolios={portfolios}
                  onAddInvestment={() => setShowAddModal(true)}
                  onNewAsset={() => setShowNewAssetModal(true)}
                />
              )}
              {activeTab === 'settings' && <SettingsTab onLogout={handleLogout} />}
            </motion.div>
          ) : viewMode === 'table' ? (
            <motion.div
              key="table"
              layoutId="mainContent"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.5 }}
            >
              <InvestmentTable
                portfolio={portfolios.find(p => p.ticker === activeTab)}
                investments={portfolios.find(p => p.ticker === activeTab)?.investments || []}
                metadata={portfolios.find(p => p.ticker === activeTab)?.metadata || null}
                activeTab={activeTab} 
                onDataChange={handleDataChange}
                onEditInvestment={handleEditInvestment}
                readOnly={false}
              />
            </motion.div>
          ) : (
            <motion.div
              key="dashboard"
              layoutId="mainContent"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.5 }}
              className="space-y-6"
            >
              {viewMode === 'all' ? (
                <div className="space-y-12">
                  {portfolios.map((portfolio) => (
                    <div key={portfolio.ticker} className="mb-8 border-b border-slate-700 pb-8">
                      <div className="flex items-center justify-between mb-4">
                        <h2 className="text-2xl font-bold text-blue-400 flex items-center gap-2">
                          {portfolio.ticker}
                          <span className="text-sm px-2 py-1 rounded-full bg-slate-700">
                            {portfolio.metadata?.pais === 'EUA' ? '🇺🇸' : '🇧🇷'}
                          </span>
                          <span className="text-sm text-slate-400">
                            {portfolio.metadata?.nome}
                          </span>
                        </h2>
                        <span className="text-lg font-bold text-white">
                          {portfolio.currentPosition} cotas
                        </span>
                      </div>
                      
                      <InvestmentTable
                        investments={portfolio.investments}
                        metadata={portfolio.metadata}
                        activeTab={portfolio.ticker} 
                        onDataChange={handleDataChange}
                        onEditInvestment={handleEditInvestment}
                        readOnly={false}
                      />
                    </div>
                  ))}
                </div>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                  {portfolios.map((portfolio, index) => (
                    <AssetCard 
                      key={portfolio.ticker}
                      portfolio={portfolio}
                      onClick={() => setSelectedAsset(portfolio.ticker)}
                      isActive={selectedAsset === portfolio.ticker}
                      index={index}
                    />
                  ))}
                </div>
              )}
              
              {selectedAsset && (
                <Summary 
                  portfolio={portfolios.find(p => p.ticker === selectedAsset)!}
                  marketData={null}
                />
              )}
              
              {!selectedAsset && (
                <>
                  <AdvancedDashboard portfolios={portfolios} />
                  
                  {/* Resumo Total da Carteira - No Final */}
                  <div className="mt-12">
                    <PortfolioSummary portfolios={portfolios} />
                  </div>
                </>
              )}
            </motion.div>
          )}
        </AnimatePresence>
      </main>
      
      {/* Modais */}
      <AddInvestmentModal
        isOpen={showAddModal}
        onClose={() => setShowAddModal(false)}
        activeTab={activeTab}
        metadata={portfolios.find(p => p.ticker === activeTab)?.metadata ? {
          ...portfolios.find(p => p.ticker === activeTab)!.metadata!,
          id: activeTab,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        } as SupabaseAssetMetadata : null}
        onSuccess={handleModalSuccess}
      />
      
      <EditInvestmentModal
        isOpen={showEditModal}
        onClose={() => {
          setShowEditModal(false);
          setEditingInvestment(null);
        }}
        investment={editingInvestment ? {
          ...editingInvestment,
          id: editingInvestment.id || 'temp-id',
          user_id: 'erasmo_russo',
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        } : null}
        metadata={portfolios.find(p => p.ticker === activeTab)?.metadata ? {
          ...portfolios.find(p => p.ticker === activeTab)!.metadata!,
          id: activeTab,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        } as SupabaseAssetMetadata : null}
        onSuccess={handleModalSuccess}
      />
      
      <NewAssetModal
        isOpen={showNewAssetModal}
        onClose={() => setShowNewAssetModal(false)}
        onSuccess={handleModalSuccess}
      />
    </div>
  );
}

export default App;

# ==============================================================================
# ARQUIVO: src\index.css
# ==============================================================================

@tailwind base;
@tailwind components;
@tailwind utilities;

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInRight {
  from {
    transform: translateX(20px);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes pulse {
  0% {
    box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.4);
  }
  70% {
    box-shadow: 0 0 0 10px rgba(59, 130, 246, 0);
  }
  100% {
    box-shadow: 0 0 0 0 rgba(59, 130, 246, 0);
  }
}

:root {
  --glass-bg: rgba(15, 23, 42, 0.4);
  --glass-border: rgba(71, 85, 105, 0.5);
  --glass-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
  --blue-glow: 0 0 15px rgba(59, 130, 246, 0.4);
}

html {
  @apply text-white;
  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  scroll-behavior: smooth;
}

body {
  @apply bg-slate-900 text-white;
  overflow-x: hidden;
}

.tab-scroll-container {
  display: flex;
  overflow-x: auto;
  scrollbar-width: thin;
  scrollbar-color: var(--blue-500) var(--bg-medium);
  white-space: nowrap;
  padding-bottom: 5px;
  scroll-behavior: smooth;
}

/* Scrollbar styling */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  @apply bg-slate-800/50 rounded;
}

::-webkit-scrollbar-thumb {
  @apply bg-slate-600 rounded transition-colors;
}

::-webkit-scrollbar-thumb:hover {
  @apply bg-slate-500;
}

.animate-fadeIn {
  animation: fadeInUp 0.5s ease-out;
}
.animate-slideIn {
  animation: slideInRight 0.5s ease-out;
}

/* Glass Effect Classes */
.glass {
  background: var(--glass-bg);
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
  border: 1px solid var(--glass-border);
  box-shadow: var(--glass-shadow);
}

.card {
  @apply bg-slate-800/40 backdrop-blur-sm border border-slate-700/50 rounded-xl shadow-lg;
}

.hover-lift {
  @apply transition-all duration-300;
}

.tab-button {
  @apply py-2 px-4 rounded-lg font-medium transition-colors text-center;
}
.tab-button.active {
  @apply bg-blue-600 text-white shadow-lg animation-pulse;
}

.hover-lift:hover {
  @apply transform -translate-y-1 shadow-xl;
  box-shadow: var(--blue-glow);
}

/* Table */
.table-container {
  @apply overflow-x-auto bg-slate-900/50 backdrop-blur-sm border border-slate-700/50 rounded-xl shadow-lg;
}

table {
  @apply w-full;
}

th {
  @apply px-4 py-3 font-semibold text-left text-slate-300 bg-slate-800/60;
}

td {
  @apply px-4 py-2 border-t border-slate-700/30;
}

tr:hover td {
  @apply bg-slate-800/50;
}

/* Form Controls */
input, select, textarea {
  @apply bg-slate-700 border border-slate-600 rounded text-white placeholder:text-slate-400;
}

input:focus, select:focus, textarea:focus {
  @apply outline-none border-blue-500 ring-1 ring-blue-500;
}

/* Buttons */
.btn {
  @apply px-4 py-2 rounded-lg flex items-center space-x-2 font-medium transition-colors;
}

.btn-primary {
  @apply bg-blue-600 hover:bg-blue-700 text-white;
}

.btn-success {
  @apply bg-green-600 hover:bg-green-700 text-white;
}

.btn-danger {
  @apply bg-red-600 hover:bg-red-700 text-white;
}

.btn-warning {
  @apply bg-amber-600 hover:bg-amber-700 text-white;
}

.btn-secondary {
  @apply bg-slate-600 hover:bg-slate-700 text-white;
}
.ticker-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
  gap: 8px;
}

.animation-pulse {
  animation: pulse 2s infinite;
}

/* Mais classes utilitárias */

# ==============================================================================
# ARQUIVO: src\main.tsx
# ==============================================================================

import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import './index.css';

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>
);


# ==============================================================================
# ARQUIVO: src\vite-env.d.ts
# ==============================================================================

/// <reference types="vite/client" />

interface ImportMetaEnv {
  readonly VITE_SUPABASE_URL: string
  readonly VITE_SUPABASE_ANON_KEY: string
}

interface ImportMeta {
  readonly env: ImportMetaEnv
}


# ==============================================================================
# ARQUIVO: tests\test-supabase-tesouro-proxy.html
# ==============================================================================

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teste da Edge Function - Tesouro Direto Proxy</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #0f172a;
            color: white;
        }
        
        .container {
            background: #1e293b;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
        }
        
        button {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            margin: 10px 5px;
        }
        
        button:hover {
            background: #2563eb;
        }
        
        .success {
            color: #10b981;
        }
        
        .error {
            color: #ef4444;
        }
        
        .info {
            color: #06b6d4;
        }
        
        pre {
            background: #0f172a;
            padding: 15px;
            border-radius: 5px;
            overflow-x: auto;
            white-space: pre-wrap;
        }
        
        .status {
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
        }
        
        .status.success {
            background: rgba(16, 185, 129, 0.1);
            border: 1px solid #10b981;
        }
        
        .status.error {
            background: rgba(239, 68, 68, 0.1);
            border: 1px solid #ef4444;
        }
        
        .status.info {
            background: rgba(6, 182, 212, 0.1);
            border: 1px solid #06b6d4;
        }
    </style>
</head>
<body>
    <h1>🏛️ Teste da Edge Function - Tesouro Direto Proxy</h1>
    
    <div class="container">
        <h2>Status da Implementação</h2>
        <div class="status success">
            ✅ Edge Function "tesouro-direto-proxy" criada no Supabase<br>
            ✅ Função marketApi.ts atualizada para usar a Edge Function<br>
            ✅ Sistema preparado para resolver problemas de CORS
        </div>
    </div>

    <div class="container">
        <h2>Teste da Edge Function</h2>
        <p>Clique no botão abaixo para testar se a Edge Function está funcionando corretamente:</p>
        
        <button onclick="testSupabaseProxy()">🧪 Testar Edge Function</button>
        <button onclick="testDirectAPI()">🔗 Testar API Direta (para comparação)</button>
        <button onclick="clearResults()">🗑️ Limpar Resultados</button>
        
        <div id="results"></div>
    </div>

    <div class="container">
        <h2>Teste Específico do Investimento</h2>
        <p>Teste com o título específico que está no banco de dados:</p>
        <input type="text" id="tickerInput" placeholder="TESOURO SELIC 2026" value="TESOURO SELIC 2026" style="padding: 10px; border-radius: 5px; border: 1px solid #374151; background: #374151; color: white; width: 300px;">
        <button onclick="testSpecificTitle()">🎯 Testar Título Específico</button>
    </div>

    <script>
        const SUPABASE_FUNCTION_URL = 'https://gjvtncdjcslnkfctqnfy.supabase.co/functions/v1/tesouro-direto-proxy';
        const DIRECT_API_URL = 'https://www.tesourodireto.com.br/json/br/com/b3/tesourodireto/service/api/v2/tesouros.json';

        function log(message, type = 'info') {
            const results = document.getElementById('results');
            const div = document.createElement('div');
            div.className = `status ${type}`;
            
            const timestamp = new Date().toLocaleTimeString('pt-BR');
            const icon = type === 'success' ? '✅' : type === 'error' ? '❌' : '📝';
            
            div.innerHTML = `<strong>[${timestamp}] ${icon} ${message}</strong>`;
            results.appendChild(div);
            
            // Auto-scroll to bottom
            results.scrollTop = results.scrollHeight;
        }

        function logJSON(data, title = 'Resposta') {
            const results = document.getElementById('results');
            const div = document.createElement('div');
            div.innerHTML = `
                <h3>${title}:</h3>
                <pre>${JSON.stringify(data, null, 2)}</pre>
            `;
            results.appendChild(div);
        }

        async function testSupabaseProxy() {
            log('🚀 Iniciando teste da Edge Function do Supabase...', 'info');
            
            try {
                log('📡 Fazendo requisição para: ' + SUPABASE_FUNCTION_URL, 'info');
                
                const startTime = performance.now();
                const response = await fetch(SUPABASE_FUNCTION_URL);
                const endTime = performance.now();
                
                log(`⏱️ Tempo de resposta: ${(endTime - startTime).toFixed(2)}ms`, 'info');
                log(`📊 Status HTTP: ${response.status} ${response.statusText}`, response.ok ? 'success' : 'error');
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                log('✅ Edge Function funcionando corretamente!', 'success');
                log(`📈 Total de títulos recebidos: ${data.response?.TrsrBdTradgList?.length || 0}`, 'success');
                
                // Mostrar primeiros títulos
                if (data.response?.TrsrBdTradgList?.length > 0) {
                    const primeiros5 = data.response.TrsrBdTradgList.slice(0, 5).map(t => t.TrsrBd?.nm);
                    log(`📋 Primeiros títulos: ${primeiros5.join(', ')}`, 'info');
                }
                
                logJSON(data.response?.TrsrBdTradgList?.slice(0, 2) || [], 'Exemplo de 2 títulos');
                
            } catch (error) {
                log(`❌ Erro na Edge Function: ${error.message}`, 'error');
                console.error('Erro completo:', error);
            }
        }

        async function testDirectAPI() {
            log('🔗 Testando API direta (pode dar erro de CORS)...', 'info');
            
            try {
                const startTime = performance.now();
                const response = await fetch(DIRECT_API_URL);
                const endTime = performance.now();
                
                log(`⏱️ Tempo de resposta: ${(endTime - startTime).toFixed(2)}ms`, 'info');
                log(`📊 Status HTTP: ${response.status} ${response.statusText}`, response.ok ? 'success' : 'error');
                
                const data = await response.json();
                log('✅ API direta funcionou (sem problema de CORS)', 'success');
                log(`📈 Total de títulos: ${data.response?.TrsrBdTradgList?.length || 0}`, 'success');
                
            } catch (error) {
                log(`❌ Erro na API direta (provavelmente CORS): ${error.message}`, 'error');
                log('💡 Isso é esperado! Por isso criamos a Edge Function.', 'info');
            }
        }

        async function testSpecificTitle() {
            const ticker = document.getElementById('tickerInput').value.trim();
            if (!ticker) {
                log('⚠️ Digite um ticker para testar', 'error');
                return;
            }

            log(`🎯 Testando busca específica por: "${ticker}"`, 'info');
            
            try {
                const response = await fetch(SUPABASE_FUNCTION_URL);
                const data = await response.json();
                
                if (!data.response?.TrsrBdTradgList) {
                    throw new Error('Estrutura de resposta inválida');
                }
                
                // Buscar o título específico
                const titulo = data.response.TrsrBdTradgList.find(t => 
                    t.TrsrBd?.nm === ticker || 
                    t.TrsrBd?.nm?.includes(ticker) ||
                    ticker.includes(t.TrsrBd?.nm)
                );
                
                if (titulo) {
                    log(`✅ Título encontrado: ${titulo.TrsrBd?.nm}`, 'success');
                    log(`💰 Valor: R$ ${titulo.TrsrBd?.untrRedVal || titulo.TrsrBd?.minInvstmtAmt}`, 'success');
                    log(`📅 Vencimento: ${titulo.TrsrBd?.mtrtyDt || 'N/A'}`, 'info');
                    
                    logJSON(titulo, `Dados completos de "${ticker}"`);
                } else {
                    log(`❌ Título "${ticker}" não encontrado`, 'error');
                    
                    // Mostrar títulos similares
                    const similares = data.response.TrsrBdTradgList.filter(t => 
                        t.TrsrBd?.nm?.toLowerCase().includes('selic') ||
                        t.TrsrBd?.nm?.toLowerCase().includes('tesouro')
                    ).slice(0, 5);
                    
                    if (similares.length > 0) {
                        const nomes = similares.map(t => t.TrsrBd?.nm);
                        log(`💡 Títulos similares encontrados: ${nomes.join(', ')}`, 'info');
                    }
                }
                
            } catch (error) {
                log(`❌ Erro no teste específico: ${error.message}`, 'error');
            }
        }

        function clearResults() {
            document.getElementById('results').innerHTML = '';
            log('🗑️ Resultados limpos', 'info');
        }

        // Teste automático ao carregar a página
        window.onload = function() {
            log('🏛️ Página de teste carregada', 'info');
            log('📋 Instruções:', 'info');
            log('1. Teste a Edge Function para verificar se resolve CORS', 'info');
            log('2. Compare com a API direta (que deve dar erro)', 'info');
            log('3. Teste um título específico do seu investimento', 'info');
        };
    </script>
</body>
</html>

# ==============================================================================
# ARQUIVO: backup-test-edge-functions.html
# ==============================================================================

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teste Edge Functions ErasmoInvest</title>
    <script src="https://unpkg.com/@supabase/supabase-js@2"></script>
    <style>
        body { font-family: Arial, sans-serif; padding: 20px; background: #1a1a1a; color: white; }
        .container { max-width: 800px; margin: 0 auto; }
        .test-section { margin: 20px 0; padding: 20px; border: 1px solid #333; border-radius: 8px; }
        .success { border-color: #4CAF50; background: rgba(76, 175, 80, 0.1); }
        .error { border-color: #F44336; background: rgba(244, 67, 54, 0.1); }
        .loading { border-color: #FF9800; background: rgba(255, 152, 0, 0.1); }
        pre { background: #2a2a2a; padding: 15px; border-radius: 4px; overflow-x: auto; }
        button { padding: 10px 20px; margin: 5px; background: #2196F3; color: white; border: none; border-radius: 4px; cursor: pointer; }
        button:hover { background: #1976D2; }
        .log { font-family: monospace; background: #2a2a2a; padding: 10px; margin: 10px 0; border-radius: 4px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>🚀 ErasmoInvest - Teste das Edge Functions</h1>
        
        <div class="test-section loading" id="tesouro-test">
            <h2>🏛️ Teste Tesouro Direto</h2>
            <button onclick="testTesouroDireto()">Testar Edge Function Tesouro</button>
            <div id="tesouro-results"></div>
        </div>
        
        <div class="test-section loading" id="usd-test">
            <h2>💱 Teste USD-BRL</h2>
            <button onclick="testUSDBRL()">Testar Edge Function USD-BRL</button>
            <div id="usd-results"></div>
        </div>
        
        <div class="test-section loading" id="market-test">
            <h2>📊 Teste API de Mercado</h2>
            <button onclick="testMarketData()">Testar Busca de Dados de Mercado</button>
            <div id="market-results"></div>
        </div>
    </div>

    <script>
        // Configurar Supabase
        const supabaseUrl = 'https://gjvtncdjcslnkfctqnfy.supabase.co';
        const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdqdnRuY2RqY3NsbmtmY3RxbmZ5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM5NzM0MDEsImV4cCI6MjA1OTU0OTQwMX0.AzALxUUvYLJJtDkvxt7efJ7bGxeKmzOs-fT5bQOndiU';
        const supabase = window.supabase.createClient(supabaseUrl, supabaseKey);
        
        function log(elementId, message, type = 'info') {
            const element = document.getElementById(elementId);
            const timestamp = new Date().toLocaleTimeString();
            const logEntry = `<div class="log">[${timestamp}] ${message}</div>`;
            element.innerHTML += logEntry;
        }
        
        function setStatus(sectionId, status) {
            const section = document.getElementById(sectionId);
            section.className = `test-section ${status}`;
        }
        
        async function testTesouroDireto() {
            const resultDiv = 'tesouro-results';
            document.getElementById(resultDiv).innerHTML = '';
            setStatus('tesouro-test', 'loading');
            
            log(resultDiv, '🏛️ Iniciando teste da Edge Function tesouro-direto-proxy...');
            
            try {
                const { data, error } = await supabase.functions.invoke('tesouro-direto-proxy');
                
                if (error) {
                    throw new Error(`Edge Function erro: ${error.message || error.status}`);
                }
                
                log(resultDiv, '✅ Edge Function executada com sucesso!');
                log(resultDiv, `📊 Estrutura da resposta: ${Object.keys(data).join(', ')}`);
                
                if (data.response?.TrsrBdTradgList) {
                    const titulos = data.response.TrsrBdTradgList;
                    log(resultDiv, `📋 ${titulos.length} títulos encontrados`);
                    
                    // Procurar por SELIC 2026
                    const selic2026 = titulos.find(t => 
                        t.TrsrBd?.nm?.includes('SELIC') && t.TrsrBd?.nm?.includes('2026')
                    );
                    
                    if (selic2026) {
                        log(resultDiv, '🎯 Encontrado SELIC 2026:');
                        log(resultDiv, `   Nome: ${selic2026.TrsrBd.nm}`);
                        log(resultDiv, `   Valor Unitário: R$ ${selic2026.TrsrBd.untrRedVal}`);
                        log(resultDiv, `   Investimento Mínimo: R$ ${selic2026.TrsrBd.minInvstmtAmt}`);
                        log(resultDiv, `   Vencimento: ${selic2026.TrsrBd.mtrtyDt || 'N/A'}`);
                        setStatus('tesouro-test', 'success');
                    } else {
                        log(resultDiv, '⚠️ SELIC 2026 não encontrado');
                        log(resultDiv, '📋 Primeiros 5 títulos disponíveis:');
                        titulos.slice(0, 5).forEach(t => {
                            log(resultDiv, `   - ${t.TrsrBd?.nm} (R$ ${t.TrsrBd?.untrRedVal})`);
                        });
                        setStatus('tesouro-test', 'error');
                    }
                } else {
                    log(resultDiv, '❌ Estrutura inesperada da resposta');
                    log(resultDiv, `📋 Dados recebidos: ${JSON.stringify(data, null, 2)}`);
                    setStatus('tesouro-test', 'error');
                }
                
            } catch (err) {
                log(resultDiv, `❌ Erro ao testar Edge Function: ${err.message}`);
                console.error('Erro completo:', err);
                setStatus('tesouro-test', 'error');
            }
        }
        
        async function testUSDBRL() {
            const resultDiv = 'usd-results';
            document.getElementById(resultDiv).innerHTML = '';
            setStatus('usd-test', 'loading');
            
            log(resultDiv, '💱 Iniciando teste da Edge Function usd-brl-rate...');
            
            try {
                const { data, error } = await supabase.functions.invoke('usd-brl-rate');
                
                if (error) {
                    throw new Error(`Edge Function erro: ${error.message || error.status}`);
                }
                
                log(resultDiv, '✅ Edge Function USD-BRL executada com sucesso!');
                log(resultDiv, `💲 Taxa de câmbio: ${data.rate}`);
                log(resultDiv, `📅 Última atualização: ${data.lastUpdated}`);
                log(resultDiv, `🔄 Taxa inversa: ${data.inverse}`);
                setStatus('usd-test', 'success');
                
            } catch (err) {
                log(resultDiv, `❌ Erro ao testar Edge Function USD-BRL: ${err.message}`);
                console.error('Erro completo:', err);
                setStatus('usd-test', 'error');
            }
        }
        
        async function testMarketData() {
            const resultDiv = 'market-results';
            document.getElementById(resultDiv).innerHTML = '';
            setStatus('market-test', 'loading');
            
            log(resultDiv, '📊 Testando busca de dados de mercado...');
            
            try {
                // Testar busca de dados para TESOURO SELIC 2026
                log(resultDiv, '🏛️ Testando busca para TESOURO SELIC 2026...');
                
                // Simular a mesma lógica do marketApi.ts
                const ticker = 'TESOURO SELIC 2026';
                
                if (ticker.toUpperCase().includes('TESOURO')) {
                    log(resultDiv, '✅ Identificado como Tesouro Direto, chamando Edge Function...');
                    await testTesouroDireto();
                } else {
                    log(resultDiv, '⚠️ Não identificado como Tesouro Direto');
                }
                
                setStatus('market-test', 'success');
                
            } catch (err) {
                log(resultDiv, `❌ Erro ao testar dados de mercado: ${err.message}`);
                console.error('Erro completo:', err);
                setStatus('market-test', 'error');
            }
        }
        
        // Auto-executar todos os testes ao carregar a página
        window.onload = () => {
            log('tesouro-results', '🚀 Página carregada. Clique nos botões para executar os testes.');
            log('usd-results', '🚀 Página carregada. Clique nos botões para executar os testes.');
            log('market-results', '🚀 Página carregada. Clique nos botões para executar os testes.');
        };
    </script>
</body>
</html>


# ==============================================================================
# ARQUIVO: backup-test-tesouro-edge-function.js
# ==============================================================================

// Teste da Edge Function do Tesouro Direto
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://gjvtncdjcslnkfctqnfy.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdqdnRuY2RqY3NsbmtmY3RxbmZ5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM5NzM0MDEsImV4cCI6MjA1OTU0OTQwMX0.AzALxUUvYLJJtDkvxt7efJ7bGxeKmzOs-fT5bQOndiU';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testTesourodireto() {
  console.log('🏛️ Testando Edge Function tesouro-direto-proxy...');
  
  try {
    const { data, error } = await supabase.functions.invoke('tesouro-direto-proxy');
    
    if (error) {
      console.error('❌ Erro na Edge Function:', error);
      return;
    }
    
    console.log('✅ Edge Function executada com sucesso!');
    console.log('📊 Estrutura da resposta:', Object.keys(data));
    
    if (data.response?.TrsrBdTradgList) {
      const titulos = data.response.TrsrBdTradgList;
      console.log(`📋 ${titulos.length} títulos encontrados`);
      
      // Procurar por SELIC 2026
      const selic2026 = titulos.find(t => 
        t.TrsrBd?.nm?.includes('SELIC') && t.TrsrBd?.nm?.includes('2026')
      );
      
      if (selic2026) {
        console.log('🎯 Encontrado SELIC 2026:');
        console.log('   Nome:', selic2026.TrsrBd.nm);
        console.log('   Valor Unitário:', selic2026.TrsrBd.untrRedVal);
        console.log('   Investimento Mínimo:', selic2026.TrsrBd.minInvstmtAmt);
        console.log('   Vencimento:', selic2026.TrsrBd.mtrtyDt);
      } else {
        console.log('⚠️ SELIC 2026 não encontrado');
        console.log('📋 Primeiros 5 títulos disponíveis:');
        titulos.slice(0, 5).forEach(t => {
          console.log(`   - ${t.TrsrBd?.nm} (${t.TrsrBd?.untrRedVal})`);
        });
      }
    } else {
      console.log('❌ Estrutura inesperada da resposta');
      console.log('📋 Dados recebidos:', JSON.stringify(data, null, 2));
    }
    
  } catch (err) {
    console.error('❌ Erro ao testar Edge Function:', err);
  }
}

async function testUSDBRL() {
  console.log('💱 Testando Edge Function usd-brl-rate...');
  
  try {
    const { data, error } = await supabase.functions.invoke('usd-brl-rate');
    
    if (error) {
      console.error('❌ Erro na Edge Function USD-BRL:', error);
      return;
    }
    
    console.log('✅ Edge Function USD-BRL executada com sucesso!');
    console.log('💲 Taxa de câmbio:', data.rate);
    console.log('📅 Última atualização:', data.lastUpdated);
    
  } catch (err) {
    console.error('❌ Erro ao testar Edge Function USD-BRL:', err);
  }
}

// Executar testes
console.log('🚀 Iniciando testes das Edge Functions...');
await testTesourodireto();
await testUSDBRL();
console.log('✅ Testes concluídos!');


# ==============================================================================
# ARQUIVO: eslint.config.js
# ==============================================================================

import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  }
);


# ==============================================================================
# ARQUIVO: index.html
# ==============================================================================

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="Sistema completo de controle e gerenciamento de investimentos" />
    <meta name="author" content="Erasmo Invest" />
    <title>💰 Erasmo Invest</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


# ==============================================================================
# ARQUIVO: package-lock.json
# ==============================================================================

{
  "name": "erasmoinvest",
  "version": "2.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "erasmoinvest",
      "version": "2.0.0",
      "dependencies": {
        "@mistralai/mistralai": "^0.5.0",
        "@supabase/supabase-js": "^2.51.0",
        "date-fns": "^4.1.0",
        "file-saver": "^2.0.5",
        "form-data": "^4.0.0",
        "framer-motion": "^12.23.6",
        "lucide-react": "^0.525.0",
        "node-fetch": "^3.3.2",
        "openai": "^4.47.1",
        "react": "^18.3.1",
        "react-dom": "^18.3.1",
        "react-hot-toast": "^2.5.2",
        "recharts": "^3.1.0",
        "sonner": "^1.6.1",
        "xlsx": "^0.18.5"
      },
      "devDependencies": {
        "@eslint/js": "^9.9.1",
        "@types/file-saver": "^2.0.7",
        "@types/react": "^18.3.5",
        "@types/react-dom": "^18.3.0",
        "@vitejs/plugin-react": "^4.3.1",
        "autoprefixer": "^10.4.18",
        "eslint": "^9.9.1",
        "eslint-plugin-react-hooks": "^5.1.0-rc.0",
        "eslint-plugin-react-refresh": "^0.4.11",
        "globals": "^15.9.0",
        "postcss": "^8.4.35",
        "tailwindcss": "^3.4.1",
        "typescript": "^5.5.3",
        "typescript-eslint": "^8.3.0",
        "vite": "^5.4.2"
      }
    },
    "node_modules/@alloc/quick-lru": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz",
      "integrity": "sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "dev": true,
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.25.7.tgz",
      "integrity": "sha512-0xZJFNE5XMpENsgfHYTw8FbX4kv53mFLn2i3XPoq69LyhYSCBJtitaHx9QnsVTrsogI4Z3+HtEfZ2/GFPOtf5g==",
      "dev": true,
      "dependencies": {
        "@babel/highlight": "^7.25.7",
        "picocolors": "^1.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.25.7.tgz",
      "integrity": "sha512-9ickoLz+hcXCeh7jrcin+/SLWm+GkxE2kTvoYyp38p4WkdFXfQJxDFGWp/YHjiKLPx06z2A7W8XKuqbReXDzsw==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.25.7.tgz",
      "integrity": "sha512-yJ474Zv3cwiSOO9nXJuqzvwEeM+chDuQ8GJirw+pZ91sCGCyOZ3dJkVE09fTV0VEVzXyLWhh3G/AolYTPX7Mow==",
      "dev": true,
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.25.7",
        "@babel/generator": "^7.25.7",
        "@babel/helper-compilation-targets": "^7.25.7",
        "@babel/helper-module-transforms": "^7.25.7",
        "@babel/helpers": "^7.25.7",
        "@babel/parser": "^7.25.7",
        "@babel/template": "^7.25.7",
        "@babel/traverse": "^7.25.7",
        "@babel/types": "^7.25.7",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.25.7.tgz",
      "integrity": "sha512-5Dqpl5fyV9pIAD62yK9P7fcA768uVPUyrQmqpqstHWgMma4feF1x/oFysBCVZLY5wJ2GkMUCdsNDnGZrPoR6rA==",
      "dev": true,
      "dependencies": {
        "@babel/types": "^7.25.7",
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.25",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.25.7.tgz",
      "integrity": "sha512-DniTEax0sv6isaw6qSQSfV4gVRNtw2rte8HHM45t9ZR0xILaufBRNkpMifCRiAPyvL4ACD6v0gfCwCmtOQaV4A==",
      "dev": true,
      "dependencies": {
        "@babel/compat-data": "^7.25.7",
        "@babel/helper-validator-option": "^7.25.7",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.25.7.tgz",
      "integrity": "sha512-o0xCgpNmRohmnoWKQ0Ij8IdddjyBFE4T2kagL/x6M3+4zUgc+4qTOUBoNe4XxDskt1HPKO007ZPiMgLDq2s7Kw==",
      "dev": true,
      "dependencies": {
        "@babel/traverse": "^7.25.7",
        "@babel/types": "^7.25.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.25.7.tgz",
      "integrity": "sha512-k/6f8dKG3yDz/qCwSM+RKovjMix563SLxQFo0UhRNo239SP6n9u5/eLtKD6EAjwta2JHJ49CsD8pms2HdNiMMQ==",
      "dev": true,
      "dependencies": {
        "@babel/helper-module-imports": "^7.25.7",
        "@babel/helper-simple-access": "^7.25.7",
        "@babel/helper-validator-identifier": "^7.25.7",
        "@babel/traverse": "^7.25.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.25.7.tgz",
      "integrity": "sha512-eaPZai0PiqCi09pPs3pAFfl/zYgGaE6IdXtYvmf0qlcDTd3WCtO7JWCcRd64e0EQrcYgiHibEZnOGsSY4QSgaw==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-simple-access": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-simple-access/-/helper-simple-access-7.25.7.tgz",
      "integrity": "sha512-FPGAkJmyoChQeM+ruBGIDyrT2tKfZJO8NcxdC+CWNJi7N8/rZpSxK7yvBJ5O/nF1gfu5KzN7VKG3YVSLFfRSxQ==",
      "dev": true,
      "dependencies": {
        "@babel/traverse": "^7.25.7",
        "@babel/types": "^7.25.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.25.7.tgz",
      "integrity": "sha512-CbkjYdsJNHFk8uqpEkpCvRs3YRp9tY6FmFY7wLMSYuGYkrdUi7r2lc4/wqsvlHoMznX3WJ9IP8giGPq68T/Y6g==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.25.7.tgz",
      "integrity": "sha512-AM6TzwYqGChO45oiuPqwL2t20/HdMC1rTPAesnBCgPCSF1x3oN9MVUwQV2iyz4xqWrctwK5RNC8LV22kaQCNYg==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.25.7.tgz",
      "integrity": "sha512-ytbPLsm+GjArDYXJ8Ydr1c/KJuutjF2besPNbIZnZ6MKUxi/uTA22t2ymmA4WFjZFpjiAMO0xuuJPqK2nvDVfQ==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.25.7.tgz",
      "integrity": "sha512-Sv6pASx7Esm38KQpF/U/OXLwPPrdGHNKoeblRxgZRLXnAtnkEe4ptJPDtAZM7fBLadbc1Q07kQpSiGQ0Jg6tRA==",
      "dev": true,
      "dependencies": {
        "@babel/template": "^7.25.7",
        "@babel/types": "^7.25.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/highlight": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.25.7.tgz",
      "integrity": "sha512-iYyACpW3iW8Fw+ZybQK+drQre+ns/tKpXbNESfrhNnPLIklLbXr7MYJ6gPEd0iETGLOK+SxMjVvKb/ffmk+FEw==",
      "dev": true,
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.25.7",
        "chalk": "^2.4.2",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.25.7.tgz",
      "integrity": "sha512-aZn7ETtQsjjGG5HruveUK06cU3Hljuhd9Iojm4M8WWv3wLE6OkE5PWbDUkItmMgegmccaITudyuW5RPYrYlgWw==",
      "dev": true,
      "dependencies": {
        "@babel/types": "^7.25.7"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.25.7.tgz",
      "integrity": "sha512-JD9MUnLbPL0WdVK8AWC7F7tTG2OS6u/AKKnsK+NdRhUiVdnzyR1S3kKQCaRLOiaULvUiqK6Z4JQE635VgtCFeg==",
      "dev": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.25.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.25.7.tgz",
      "integrity": "sha512-S/JXG/KrbIY06iyJPKfxr0qRxnhNOdkNXYBl/rmwgDd72cQLH9tEGkDm/yJPGvcSIUoikzfjMios9i+xT/uv9w==",
      "dev": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.25.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.25.7.tgz",
      "integrity": "sha512-wRwtAgI3bAS+JGU2upWNL9lSlDcRCqD05BZ1n3X2ONLH1WilFP6O1otQjeMK/1g0pvYcXC7b/qVUB1keofjtZA==",
      "dev": true,
      "dependencies": {
        "@babel/code-frame": "^7.25.7",
        "@babel/parser": "^7.25.7",
        "@babel/types": "^7.25.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.25.7.tgz",
      "integrity": "sha512-jatJPT1Zjqvh/1FyJs6qAHL+Dzb7sTb+xr7Q+gM1b+1oBsMsQQ4FkVKb6dFlJvLlVssqkRzV05Jzervt9yhnzg==",
      "dev": true,
      "dependencies": {
        "@babel/code-frame": "^7.25.7",
        "@babel/generator": "^7.25.7",
        "@babel/parser": "^7.25.7",
        "@babel/template": "^7.25.7",
        "@babel/types": "^7.25.7",
        "debug": "^4.3.1",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse/node_modules/globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.25.7.tgz",
      "integrity": "sha512-vwIVdXG+j+FOpkwqHRcBgHLYNL7XMkufrlaFvL9o6Ai9sJn9+PdyIL5qa0XzTZw084c+u9LOls53eoZWP/W5WQ==",
      "dev": true,
      "dependencies": {
        "@babel/helper-string-parser": "^7.25.7",
        "@babel/helper-validator-identifier": "^7.25.7",
        "to-fast-properties": "^2.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.21.5.tgz",
      "integrity": "sha512-1SDgH6ZSPTlggy1yI6+Dbkiz8xzpHJEVAlF/AM1tHPLsf5STom9rwtjE4hKAF20FfXXNTFqEYXyJNWh1GiZedQ==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.21.5.tgz",
      "integrity": "sha512-vCPvzSjpPHEi1siZdlvAlsPxXl7WbOVUBBAowWug4rJHb68Ox8KualB+1ocNvT5fjv6wpkX6o/iEpbDrf68zcg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.21.5.tgz",
      "integrity": "sha512-c0uX9VAUBQ7dTDCjq+wdyGLowMdtR/GoC2U5IYk/7D1H1JYC0qseD7+11iMP2mRLN9RcCMRcjC4YMclCzGwS/A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.21.5.tgz",
      "integrity": "sha512-D7aPRUUNHRBwHxzxRvp856rjUHRFW1SdQATKXH2hqA0kAZb1hKmi02OpYRacl0TxIGz/ZmXWlbZgjwWYaCakTA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.21.5.tgz",
      "integrity": "sha512-DwqXqZyuk5AiWWf3UfLiRDJ5EDd49zg6O9wclZ7kUMv2WRFr4HKjXp/5t8JZ11QbQfUS6/cRCKGwYhtNAY88kQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.21.5.tgz",
      "integrity": "sha512-se/JjF8NlmKVG4kNIuyWMV/22ZaerB+qaSi5MdrXtd6R08kvs2qCN4C09miupktDitvh8jRFflwGFBQcxZRjbw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.21.5.tgz",
      "integrity": "sha512-5JcRxxRDUJLX8JXp/wcBCy3pENnCgBR9bN6JsY4OmhfUtIHe3ZW0mawA7+RDAcMLrMIZaf03NlQiX9DGyB8h4g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.21.5.tgz",
      "integrity": "sha512-J95kNBj1zkbMXtHVH29bBriQygMXqoVQOQYA+ISs0/2l3T9/kj42ow2mpqerRBxDJnmkUDCaQT/dfNXWX/ZZCQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.21.5.tgz",
      "integrity": "sha512-bPb5AHZtbeNGjCKVZ9UGqGwo8EUu4cLq68E95A53KlxAPRmUyYv2D6F0uUI65XisGOL1hBP5mTronbgo+0bFcA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.21.5.tgz",
      "integrity": "sha512-ibKvmyYzKsBeX8d8I7MH/TMfWDXBF3db4qM6sy+7re0YXya+K1cem3on9XgdT2EQGMu4hQyZhan7TeQ8XkGp4Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.21.5.tgz",
      "integrity": "sha512-YvjXDqLRqPDl2dvRODYmmhz4rPeVKYvppfGYKSNGdyZkA01046pLWyRKKI3ax8fbJoK5QbxblURkwK/MWY18Tg==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.21.5.tgz",
      "integrity": "sha512-uHf1BmMG8qEvzdrzAqg2SIG/02+4/DHB6a9Kbya0XDvwDEKCoC8ZRWI5JJvNdUjtciBGFQ5PuBlpEOXQj+JQSg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.21.5.tgz",
      "integrity": "sha512-IajOmO+KJK23bj52dFSNCMsz1QP1DqM6cwLUv3W1QwyxkyIWecfafnI555fvSGqEKwjMXVLokcV5ygHW5b3Jbg==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.21.5.tgz",
      "integrity": "sha512-1hHV/Z4OEfMwpLO8rp7CvlhBDnjsC3CttJXIhBi+5Aj5r+MBvy4egg7wCbe//hSsT+RvDAG7s81tAvpL2XAE4w==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.21.5.tgz",
      "integrity": "sha512-2HdXDMd9GMgTGrPWnJzP2ALSokE/0O5HhTUvWIbD3YdjME8JwvSCnNGBnTThKGEB91OZhzrJ4qIIxk/SBmyDDA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.21.5.tgz",
      "integrity": "sha512-zus5sxzqBJD3eXxwvjN1yQkRepANgxE9lgOW2qLnmr8ikMTphkjgXu1HR01K4FJg8h1kEEDAqDcZQtbrRnB41A==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.21.5.tgz",
      "integrity": "sha512-1rYdTpyv03iycF1+BhzrzQJCdOuAOtaqHTWJZCWvijKD2N5Xu0TtVC8/+1faWqcP9iBCWOmjmhoH94dH82BxPQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.21.5.tgz",
      "integrity": "sha512-Woi2MXzXjMULccIwMnLciyZH4nCIMpWQAs049KEeMvOcNADVxo0UBIQPfSmxB3CWKedngg7sWZdLvLczpe0tLg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.21.5.tgz",
      "integrity": "sha512-HLNNw99xsvx12lFBUwoT8EVCsSvRNDVxNpjZ7bPn947b8gJPzeHWyNVhFsaerc0n3TsbOINvRP2byTZ5LKezow==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.21.5.tgz",
      "integrity": "sha512-6+gjmFpfy0BHU5Tpptkuh8+uw3mnrvgs+dSPQXQOv3ekbordwnzTVEb4qnIvQcYXq6gzkyTnoZ9dZG+D4garKg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.21.5.tgz",
      "integrity": "sha512-Z0gOTd75VvXqyq7nsl93zwahcTROgqvuAcYDUr+vOv8uHhNSKROyU961kgtCD1e95IqPKSQKH7tBTslnS3tA8A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.21.5.tgz",
      "integrity": "sha512-SWXFF1CL2RVNMaVs+BBClwtfZSvDgtL//G/smwAc5oVK/UPu2Gu9tIaRgFmYFFKrmg3SyAjSrElf0TiJ1v8fYA==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.21.5.tgz",
      "integrity": "sha512-tQd/1efJuzPC6rCFwEvLtci/xNFcTZknmXs98FYDfGE4wP9ClFV98nyKrzJKVPMhdDnjzLhdUyMX4PsQAPjwIw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.4.0.tgz",
      "integrity": "sha512-1/sA4dwrzBAyeUoQ6oxahHKmrZvsnLCg4RfxW3ZFGGmQkSNQPFNLV9CUEFQP1x9EYXHTo5p6xdhZM1Ne9p/AfA==",
      "dev": true,
      "dependencies": {
        "eslint-visitor-keys": "^3.3.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.11.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.11.1.tgz",
      "integrity": "sha512-m4DVN9ZqskZoLU5GlWZadwDnYo3vAEydiUayB9widCl9ffWx2IvPnp6n3on5rJmziJSw9Bv+Z3ChDVdMwXCY8Q==",
      "dev": true,
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/config-array": {
      "version": "0.18.0",
      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.18.0.tgz",
      "integrity": "sha512-fTxvnS1sRMu3+JjXwJG0j/i4RT9u4qJ+lqS/yCGap4lH4zZGzQ7tu+xZqQmcMZq5OBZDL4QRxQzRjkWcGt8IVw==",
      "dev": true,
      "dependencies": {
        "@eslint/object-schema": "^2.1.4",
        "debug": "^4.3.1",
        "minimatch": "^3.1.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/core": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.6.0.tgz",
      "integrity": "sha512-8I2Q8ykA4J0x0o7cg67FPVnehcqWTBehu/lmY+bolPFHGjh49YzGBMXTvpqVgEbBdvNCSxj6iFgiIyHzf03lzg==",
      "dev": true,
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.1.0.tgz",
      "integrity": "sha512-4Bfj15dVJdoy3RfZmmo86RK1Fwzn6SstsvK9JS+BaVKqC6QQQQyXekNaC+g+LKNgkQ+2VhGAzm6hO40AhMR3zQ==",
      "dev": true,
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^10.0.1",
        "globals": "^14.0.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/globals": {
      "version": "14.0.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
      "dev": true,
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@eslint/js": {
      "version": "9.12.0",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.12.0.tgz",
      "integrity": "sha512-eohesHH8WFRUprDNyEREgqP6beG6htMeUYeCpkEgBCieCMme5r9zFWjzAJp//9S+Kub4rqE+jXe9Cp1a7IYIIA==",
      "dev": true,
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/object-schema": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.4.tgz",
      "integrity": "sha512-BsWiH1yFGjXXS2yvrf5LyuoSIIbPrGUWob917o+BTKuZ7qJdxX8aJLRxs1fS9n6r7vESrq1OUqb68dANcFXuQQ==",
      "dev": true,
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/plugin-kit": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.2.0.tgz",
      "integrity": "sha512-vH9PiIMMwvhCx31Af3HiGzsVNULDbyVkHXwlemn/B0TFj/00ho3y55efXrUZTfQipxoHC5u4xq6zblww1zm1Ig==",
      "dev": true,
      "dependencies": {
        "levn": "^0.4.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@humanfs/core": {
      "version": "0.19.0",
      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.0.tgz",
      "integrity": "sha512-2cbWIHbZVEweE853g8jymffCA+NCMiuqeECeBBLm8dg2oFdjuGJhgN4UAbI+6v0CKbbhvtXA4qV8YR5Ji86nmw==",
      "dev": true,
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node": {
      "version": "0.16.5",
      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.5.tgz",
      "integrity": "sha512-KSPA4umqSG4LHYRodq31VDwKAvaTF4xmVlzM8Aeh4PlU1JQ3IG0wiA8C25d3RQ9nJyM3mBHyI53K06VVL/oFFg==",
      "dev": true,
      "dependencies": {
        "@humanfs/core": "^0.19.0",
        "@humanwhocodes/retry": "^0.3.0"
      },
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/retry": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.3.1.tgz",
      "integrity": "sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==",
      "dev": true,
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@isaacs/cliui": {
      "version": "8.0.2",
      "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
      "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
      "dev": true,
      "dependencies": {
        "string-width": "^5.1.2",
        "string-width-cjs": "npm:string-width@^4.2.0",
        "strip-ansi": "^7.0.1",
        "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
        "wrap-ansi": "^8.1.0",
        "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.5.tgz",
      "integrity": "sha512-IzL8ZoEDIBRWEzlCcRhOaCupYyN5gdIK+Q6fbFdPDg6HqX6jpkItn7DFIpW9LQzXG6Df9sA7+OKnq0qlz/GaQg==",
      "dev": true,
      "dependencies": {
        "@jridgewell/set-array": "^1.2.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/set-array": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
      "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
      "dev": true,
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
      "dev": true
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.25",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
      "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
      "dev": true,
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@mistralai/mistralai": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/@mistralai/mistralai/-/mistralai-0.5.0.tgz",
      "integrity": "sha512-56xfoC/0CiT0RFHrRNoJYSKCNc922EyHzEPJYY6ttalQ5KZdrNVgXeOetIGX0lDx7IjbxAJrrae2MQgUIlL9+g==",
      "license": "ISC",
      "dependencies": {
        "node-fetch": "^2.6.7"
      }
    },
    "node_modules/@mistralai/mistralai/node_modules/node-fetch": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
      "license": "MIT",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "dev": true,
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "dev": true,
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "dev": true,
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@pkgjs/parseargs": {
      "version": "0.11.0",
      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
      "dev": true,
      "optional": true,
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@reduxjs/toolkit": {
      "version": "2.8.2",
      "resolved": "https://registry.npmjs.org/@reduxjs/toolkit/-/toolkit-2.8.2.tgz",
      "integrity": "sha512-MYlOhQ0sLdw4ud48FoC5w0dH9VfWQjtCjreKwYTT3l+r427qYC5Y8PihNutepr8XrNaBUDQo9khWUwQxZaqt5A==",
      "license": "MIT",
      "dependencies": {
        "@standard-schema/spec": "^1.0.0",
        "@standard-schema/utils": "^0.3.0",
        "immer": "^10.0.3",
        "redux": "^5.0.1",
        "redux-thunk": "^3.1.0",
        "reselect": "^5.1.0"
      },
      "peerDependencies": {
        "react": "^16.9.0 || ^17.0.0 || ^18 || ^19",
        "react-redux": "^7.2.1 || ^8.1.3 || ^9.0.0"
      },
      "peerDependenciesMeta": {
        "react": {
          "optional": true
        },
        "react-redux": {
          "optional": true
        }
      }
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.24.0.tgz",
      "integrity": "sha512-Q6HJd7Y6xdB48x8ZNVDOqsbh2uByBhgK8PiQgPhwkIw/HC/YX5Ghq2mQY5sRMZWHb3VsFkWooUVOZHKr7DmDIA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.24.0.tgz",
      "integrity": "sha512-ijLnS1qFId8xhKjT81uBHuuJp2lU4x2yxa4ctFPtG+MqEE6+C5f/+X/bStmxapgmwLwiL3ih122xv8kVARNAZA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.24.0.tgz",
      "integrity": "sha512-bIv+X9xeSs1XCk6DVvkO+S/z8/2AMt/2lMqdQbMrmVpgFvXlmde9mLcbQpztXm1tajC3raFDqegsH18HQPMYtA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.24.0.tgz",
      "integrity": "sha512-X6/nOwoFN7RT2svEQWUsW/5C/fYMBe4fnLK9DQk4SX4mgVBiTA9h64kjUYPvGQ0F/9xwJ5U5UfTbl6BEjaQdBQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.24.0.tgz",
      "integrity": "sha512-0KXvIJQMOImLCVCz9uvvdPgfyWo93aHHp8ui3FrtOP57svqrF/roSSR5pjqL2hcMp0ljeGlU4q9o/rQaAQ3AYA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.24.0.tgz",
      "integrity": "sha512-it2BW6kKFVh8xk/BnHfakEeoLPv8STIISekpoF+nBgWM4d55CZKc7T4Dx1pEbTnYm/xEKMgy1MNtYuoA8RFIWw==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.24.0.tgz",
      "integrity": "sha512-i0xTLXjqap2eRfulFVlSnM5dEbTVque/3Pi4g2y7cxrs7+a9De42z4XxKLYJ7+OhE3IgxvfQM7vQc43bwTgPwA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.24.0.tgz",
      "integrity": "sha512-9E6MKUJhDuDh604Qco5yP/3qn3y7SLXYuiC0Rpr89aMScS2UAmK1wHP2b7KAa1nSjWJc/f/Lc0Wl1L47qjiyQw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-powerpc64le-gnu": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.24.0.tgz",
      "integrity": "sha512-2XFFPJ2XMEiF5Zi2EBf4h73oR1V/lycirxZxHZNc93SqDN/IWhYYSYj8I9381ikUFXZrz2v7r2tOVk2NBwxrWw==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.24.0.tgz",
      "integrity": "sha512-M3Dg4hlwuntUCdzU7KjYqbbd+BLq3JMAOhCKdBE3TcMGMZbKkDdJ5ivNdehOssMCIokNHFOsv7DO4rlEOfyKpg==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.24.0.tgz",
      "integrity": "sha512-mjBaoo4ocxJppTorZVKWFpy1bfFj9FeCMJqzlMQGjpNPY9JwQi7OuS1axzNIk0nMX6jSgy6ZURDZ2w0QW6D56g==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.24.0.tgz",
      "integrity": "sha512-ZXFk7M72R0YYFN5q13niV0B7G8/5dcQ9JDp8keJSfr3GoZeXEoMHP/HlvqROA3OMbMdfr19IjCeNAnPUG93b6A==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.24.0.tgz",
      "integrity": "sha512-w1i+L7kAXZNdYl+vFvzSZy8Y1arS7vMgIy8wusXJzRrPyof5LAb02KGr1PD2EkRcl73kHulIID0M501lN+vobQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.24.0.tgz",
      "integrity": "sha512-VXBrnPWgBpVDCVY6XF3LEW0pOU51KbaHhccHw6AS6vBWIC60eqsH19DAeeObl+g8nKAz04QFdl/Cefta0xQtUQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.24.0.tgz",
      "integrity": "sha512-xrNcGDU0OxVcPTH/8n/ShH4UevZxKIO6HJFK0e15XItZP2UcaiLFd5kiX7hJnqCbSztUF8Qot+JWBC/QXRPYWQ==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.24.0.tgz",
      "integrity": "sha512-fbMkAF7fufku0N2dE5TBXcNlg0pt0cJue4xBRE2Qc5Vqikxr4VCgKj/ht6SMdFcOacVA9rqF70APJ8RN/4vMJw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@standard-schema/spec": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/@standard-schema/spec/-/spec-1.0.0.tgz",
      "integrity": "sha512-m2bOd0f2RT9k8QJx1JN85cZYyH1RqFBdlwtkSlf4tBDYLCiiZnv1fIIwacK6cqwXavOydf0NPToMQgpKq+dVlA==",
      "license": "MIT"
    },
    "node_modules/@standard-schema/utils": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/@standard-schema/utils/-/utils-0.3.0.tgz",
      "integrity": "sha512-e7Mew686owMaPJVNNLs55PUvgz371nKgwsc4vxE49zsODpJEnxgxRo2y/OKrqueavXgZNMDVj3DdHFlaSAeU8g==",
      "license": "MIT"
    },
    "node_modules/@supabase/auth-js": {
      "version": "2.71.0",
      "resolved": "https://registry.npmjs.org/@supabase/auth-js/-/auth-js-2.71.0.tgz",
      "integrity": "sha512-OMYNbhGa1Cj4stalJq0VoHm5l7Sj/xY0j9CiYEQCikbQmtiDG3c27EIFA4OD+NxuoHTZmjaW8VJlS3SP+yasEA==",
      "license": "MIT",
      "dependencies": {
        "@supabase/node-fetch": "^2.6.14"
      }
    },
    "node_modules/@supabase/functions-js": {
      "version": "2.4.5",
      "resolved": "https://registry.npmjs.org/@supabase/functions-js/-/functions-js-2.4.5.tgz",
      "integrity": "sha512-v5GSqb9zbosquTo6gBwIiq7W9eQ7rE5QazsK/ezNiQXdCbY+bH8D9qEaBIkhVvX4ZRW5rP03gEfw5yw9tiq4EQ==",
      "license": "MIT",
      "dependencies": {
        "@supabase/node-fetch": "^2.6.14"
      }
    },
    "node_modules/@supabase/node-fetch": {
      "version": "2.6.15",
      "resolved": "https://registry.npmjs.org/@supabase/node-fetch/-/node-fetch-2.6.15.tgz",
      "integrity": "sha512-1ibVeYUacxWYi9i0cf5efil6adJ9WRyZBLivgjs+AUpewx1F3xPi7gLgaASI2SmIQxPoCEjAsLAzKPgMJVgOUQ==",
      "license": "MIT",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      }
    },
    "node_modules/@supabase/postgrest-js": {
      "version": "1.19.4",
      "resolved": "https://registry.npmjs.org/@supabase/postgrest-js/-/postgrest-js-1.19.4.tgz",
      "integrity": "sha512-O4soKqKtZIW3olqmbXXbKugUtByD2jPa8kL2m2c1oozAO11uCcGrRhkZL0kVxjBLrXHE0mdSkFsMj7jDSfyNpw==",
      "license": "MIT",
      "dependencies": {
        "@supabase/node-fetch": "^2.6.14"
      }
    },
    "node_modules/@supabase/realtime-js": {
      "version": "2.11.15",
      "resolved": "https://registry.npmjs.org/@supabase/realtime-js/-/realtime-js-2.11.15.tgz",
      "integrity": "sha512-HQKRnwAqdVqJW/P9TjKVK+/ETpW4yQ8tyDPPtRMKOH4Uh3vQD74vmj353CYs8+YwVBKubeUOOEpI9CT8mT4obw==",
      "license": "MIT",
      "dependencies": {
        "@supabase/node-fetch": "^2.6.13",
        "@types/phoenix": "^1.6.6",
        "@types/ws": "^8.18.1",
        "isows": "^1.0.7",
        "ws": "^8.18.2"
      }
    },
    "node_modules/@supabase/storage-js": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/@supabase/storage-js/-/storage-js-2.7.1.tgz",
      "integrity": "sha512-asYHcyDR1fKqrMpytAS1zjyEfvxuOIp1CIXX7ji4lHHcJKqyk+sLl/Vxgm4sN6u8zvuUtae9e4kDxQP2qrwWBA==",
      "license": "MIT",
      "dependencies": {
        "@supabase/node-fetch": "^2.6.14"
      }
    },
    "node_modules/@supabase/supabase-js": {
      "version": "2.51.0",
      "resolved": "https://registry.npmjs.org/@supabase/supabase-js/-/supabase-js-2.51.0.tgz",
      "integrity": "sha512-jG70XoNFcX3z0h/No0t1Aoc3zoHPtMQk5zaM5v3+sCJ/v5Z3qyoHYkGIg1JUycINPsuuAASZ4ZS43YO6H5wMoA==",
      "license": "MIT",
      "dependencies": {
        "@supabase/auth-js": "2.71.0",
        "@supabase/functions-js": "2.4.5",
        "@supabase/node-fetch": "2.6.15",
        "@supabase/postgrest-js": "1.19.4",
        "@supabase/realtime-js": "2.11.15",
        "@supabase/storage-js": "2.7.1"
      }
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.6.8",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.6.8.tgz",
      "integrity": "sha512-ASsj+tpEDsEiFr1arWrlN6V3mdfjRMZt6LtK/Vp/kreFLnr5QH5+DhvD5nINYZXzwJvXeGq+05iUXcAzVrqWtw==",
      "dev": true,
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.20.6",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.6.tgz",
      "integrity": "sha512-r1bzfrm0tomOI8g1SzvCaQHo6Lcv6zu0EA+W2kHrt8dyrHQxGzBBL4kdkzIS+jBMV+EYcMAEAqXqYaLJq5rOZg==",
      "dev": true,
      "dependencies": {
        "@babel/types": "^7.20.7"
      }
    },
    "node_modules/@types/d3-array": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/@types/d3-array/-/d3-array-3.2.1.tgz",
      "integrity": "sha512-Y2Jn2idRrLzUfAKV2LyRImR+y4oa2AntrgID95SHJxuMUrkNXmanDSed71sRNZysveJVt1hLLemQZIady0FpEg==",
      "license": "MIT"
    },
    "node_modules/@types/d3-color": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/@types/d3-color/-/d3-color-3.1.3.tgz",
      "integrity": "sha512-iO90scth9WAbmgv7ogoq57O9YpKmFBbmoEoCHDB2xMBY0+/KVrqAaCDyCE16dUspeOvIxFFRI+0sEtqDqy2b4A==",
      "license": "MIT"
    },
    "node_modules/@types/d3-ease": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-ease/-/d3-ease-3.0.2.tgz",
      "integrity": "sha512-NcV1JjO5oDzoK26oMzbILE6HW7uVXOHLQvHshBUW4UMdZGfiY6v5BeQwh9a9tCzv+CeefZQHJt5SRgK154RtiA==",
      "license": "MIT"
    },
    "node_modules/@types/d3-interpolate": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/d3-interpolate/-/d3-interpolate-3.0.4.tgz",
      "integrity": "sha512-mgLPETlrpVV1YRJIglr4Ez47g7Yxjl1lj7YKsiMCb27VJH9W8NVM6Bb9d8kkpG/uAQS5AmbA48q2IAolKKo1MA==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-color": "*"
      }
    },
    "node_modules/@types/d3-path": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/@types/d3-path/-/d3-path-3.1.1.tgz",
      "integrity": "sha512-VMZBYyQvbGmWyWVea0EHs/BwLgxc+MKi1zLDCONksozI4YJMcTt8ZEuIR4Sb1MMTE8MMW49v0IwI5+b7RmfWlg==",
      "license": "MIT"
    },
    "node_modules/@types/d3-scale": {
      "version": "4.0.9",
      "resolved": "https://registry.npmjs.org/@types/d3-scale/-/d3-scale-4.0.9.tgz",
      "integrity": "sha512-dLmtwB8zkAeO/juAMfnV+sItKjlsw2lKdZVVy6LRr0cBmegxSABiLEpGVmSJJ8O08i4+sGR6qQtb6WtuwJdvVw==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-time": "*"
      }
    },
    "node_modules/@types/d3-shape": {
      "version": "3.1.7",
      "resolved": "https://registry.npmjs.org/@types/d3-shape/-/d3-shape-3.1.7.tgz",
      "integrity": "sha512-VLvUQ33C+3J+8p+Daf+nYSOsjB4GXp19/S/aGo60m9h1v6XaxjiT82lKVWJCfzhtuZ3yD7i/TPeC/fuKLLOSmg==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-path": "*"
      }
    },
    "node_modules/@types/d3-time": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/d3-time/-/d3-time-3.0.4.tgz",
      "integrity": "sha512-yuzZug1nkAAaBlBBikKZTgzCeA+k1uy4ZFwWANOfKw5z5LRhV0gNA7gNkKm7HoK+HRN0wX3EkxGk0fpbWhmB7g==",
      "license": "MIT"
    },
    "node_modules/@types/d3-timer": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-timer/-/d3-timer-3.0.2.tgz",
      "integrity": "sha512-Ps3T8E8dZDam6fUyNiMkekK3XUsaUEik+idO9/YjPtfj2qruF8tFBXS7XhtE4iIXBLxhmLjP3SXpLhVf21I9Lw==",
      "license": "MIT"
    },
    "node_modules/@types/estree": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.6.tgz",
      "integrity": "sha512-AYnb1nQyY49te+VRAVgmzfcgjYS91mY5P0TKUDCLEM+gNnA+3T6rWITXRLYCpahpqSQbN5cE+gHpnPyXjHWxcw==",
      "dev": true
    },
    "node_modules/@types/file-saver": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/@types/file-saver/-/file-saver-2.0.7.tgz",
      "integrity": "sha512-dNKVfHd/jk0SkR/exKGj2ggkB45MAkzvWCaqLUUgkyjITkGNzH8H+yUwr+BLJUBjZOe9w8X3wgmXhZDRg1ED6A==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "dev": true
    },
    "node_modules/@types/node": {
      "version": "24.0.14",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-24.0.14.tgz",
      "integrity": "sha512-4zXMWD91vBLGRtHK3YbIoFMia+1nqEz72coM42C5ETjnNCa/heoj7NT1G67iAfOqMmcfhuCZ4uNpyz8EjlAejw==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~7.8.0"
      }
    },
    "node_modules/@types/node-fetch": {
      "version": "2.6.12",
      "resolved": "https://registry.npmjs.org/@types/node-fetch/-/node-fetch-2.6.12.tgz",
      "integrity": "sha512-8nneRWKCg3rMtF69nLQJnOYUcbafYeFSjqkw3jCRLsqkWFlHaoQrr5mXmofFGOx3DKn7UfmBMyov8ySvLRVldA==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "form-data": "^4.0.0"
      }
    },
    "node_modules/@types/phoenix": {
      "version": "1.6.6",
      "resolved": "https://registry.npmjs.org/@types/phoenix/-/phoenix-1.6.6.tgz",
      "integrity": "sha512-PIzZZlEppgrpoT2QgbnDU+MMzuR6BbCjllj0bM70lWoejMeNJAxCchxnv7J3XFkI8MpygtRpzXrIlmWUBclP5A==",
      "license": "MIT"
    },
    "node_modules/@types/prop-types": {
      "version": "15.7.13",
      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.13.tgz",
      "integrity": "sha512-hCZTSvwbzWGvhqxp/RqVqwU999pBf2vp7hzIjiYOsl8wqOmUxkQ6ddw1cV3l8811+kdUFus/q4d1Y3E3SyEifA==",
      "devOptional": true
    },
    "node_modules/@types/react": {
      "version": "18.3.11",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-18.3.11.tgz",
      "integrity": "sha512-r6QZ069rFTjrEYgFdOck1gK7FLVsgJE7tTz0pQBczlBNUhBNk0MQH4UbnFSwjpQLMkLzgqvBBa+qGpLje16eTQ==",
      "devOptional": true,
      "dependencies": {
        "@types/prop-types": "*",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "18.3.0",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-18.3.0.tgz",
      "integrity": "sha512-EhwApuTmMBmXuFOikhQLIBUn6uFg81SwLMOAUgodJF14SOBOCMdU04gDoYi0WOJJHD144TL32z4yDqCW3dnkQg==",
      "dev": true,
      "dependencies": {
        "@types/react": "*"
      }
    },
    "node_modules/@types/use-sync-external-store": {
      "version": "0.0.6",
      "resolved": "https://registry.npmjs.org/@types/use-sync-external-store/-/use-sync-external-store-0.0.6.tgz",
      "integrity": "sha512-zFDAD+tlpf2r4asuHEj0XH6pY6i0g5NeAHPn+15wk3BV6JA69eERFXC1gyGThDkVa1zCyKr5jox1+2LbV/AMLg==",
      "license": "MIT"
    },
    "node_modules/@types/ws": {
      "version": "8.18.1",
      "resolved": "https://registry.npmjs.org/@types/ws/-/ws-8.18.1.tgz",
      "integrity": "sha512-ThVF6DCVhA8kUGy+aazFQ4kXQ7E1Ty7A3ypFOe0IcJV8O/M511G99AW24irKrW56Wt44yG9+ij8FaqoBGkuBXg==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@typescript-eslint/eslint-plugin": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-8.8.1.tgz",
      "integrity": "sha512-xfvdgA8AP/vxHgtgU310+WBnLB4uJQ9XdyP17RebG26rLtDrQJV3ZYrcopX91GrHmMoH8bdSwMRh2a//TiJ1jQ==",
      "dev": true,
      "dependencies": {
        "@eslint-community/regexpp": "^4.10.0",
        "@typescript-eslint/scope-manager": "8.8.1",
        "@typescript-eslint/type-utils": "8.8.1",
        "@typescript-eslint/utils": "8.8.1",
        "@typescript-eslint/visitor-keys": "8.8.1",
        "graphemer": "^1.4.0",
        "ignore": "^5.3.1",
        "natural-compare": "^1.4.0",
        "ts-api-utils": "^1.3.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "@typescript-eslint/parser": "^8.0.0 || ^8.0.0-alpha.0",
        "eslint": "^8.57.0 || ^9.0.0"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/parser": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-8.8.1.tgz",
      "integrity": "sha512-hQUVn2Lij2NAxVFEdvIGxT9gP1tq2yM83m+by3whWFsWC+1y8pxxxHUFE1UqDu2VsGi2i6RLcv4QvouM84U+ow==",
      "dev": true,
      "dependencies": {
        "@typescript-eslint/scope-manager": "8.8.1",
        "@typescript-eslint/types": "8.8.1",
        "@typescript-eslint/typescript-estree": "8.8.1",
        "@typescript-eslint/visitor-keys": "8.8.1",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/scope-manager": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-8.8.1.tgz",
      "integrity": "sha512-X4JdU+66Mazev/J0gfXlcC/dV6JI37h+93W9BRYXrSn0hrE64IoWgVkO9MSJgEzoWkxONgaQpICWg8vAN74wlA==",
      "dev": true,
      "dependencies": {
        "@typescript-eslint/types": "8.8.1",
        "@typescript-eslint/visitor-keys": "8.8.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/type-utils": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-8.8.1.tgz",
      "integrity": "sha512-qSVnpcbLP8CALORf0za+vjLYj1Wp8HSoiI8zYU5tHxRVj30702Z1Yw4cLwfNKhTPWp5+P+k1pjmD5Zd1nhxiZA==",
      "dev": true,
      "dependencies": {
        "@typescript-eslint/typescript-estree": "8.8.1",
        "@typescript-eslint/utils": "8.8.1",
        "debug": "^4.3.4",
        "ts-api-utils": "^1.3.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/types": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-8.8.1.tgz",
      "integrity": "sha512-WCcTP4SDXzMd23N27u66zTKMuEevH4uzU8C9jf0RO4E04yVHgQgW+r+TeVTNnO1KIfrL8ebgVVYYMMO3+jC55Q==",
      "dev": true,
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-8.8.1.tgz",
      "integrity": "sha512-A5d1R9p+X+1js4JogdNilDuuq+EHZdsH9MjTVxXOdVFfTJXunKJR/v+fNNyO4TnoOn5HqobzfRlc70NC6HTcdg==",
      "dev": true,
      "dependencies": {
        "@typescript-eslint/types": "8.8.1",
        "@typescript-eslint/visitor-keys": "8.8.1",
        "debug": "^4.3.4",
        "fast-glob": "^3.3.2",
        "is-glob": "^4.0.3",
        "minimatch": "^9.0.4",
        "semver": "^7.6.0",
        "ts-api-utils": "^1.3.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/brace-expansion": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
      "dev": true,
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "dev": true,
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/semver": {
      "version": "7.6.3",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.6.3.tgz",
      "integrity": "sha512-oVekP1cKtI+CTDvHWYFUcMtsK/00wmAEfyqKfNdARm8u1wNVhSgaX7A8d4UuIlUI5e84iEwOhs7ZPYRmzU9U6A==",
      "dev": true,
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@typescript-eslint/utils": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-8.8.1.tgz",
      "integrity": "sha512-/QkNJDbV0bdL7H7d0/y0qBbV2HTtf0TIyjSDTvvmQEzeVx8jEImEbLuOA4EsvE8gIgqMitns0ifb5uQhMj8d9w==",
      "dev": true,
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.4.0",
        "@typescript-eslint/scope-manager": "8.8.1",
        "@typescript-eslint/types": "8.8.1",
        "@typescript-eslint/typescript-estree": "8.8.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0"
      }
    },
    "node_modules/@typescript-eslint/visitor-keys": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-8.8.1.tgz",
      "integrity": "sha512-0/TdC3aeRAsW7MDvYRwEc1Uwm0TIBfzjPFgg60UU2Haj5qsCs9cc3zNgY71edqE3LbWfF/WoZQd3lJoDXFQpag==",
      "dev": true,
      "dependencies": {
        "@typescript-eslint/types": "8.8.1",
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/visitor-keys/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.3.2.tgz",
      "integrity": "sha512-hieu+o05v4glEBucTcKMK3dlES0OeJlD9YVOAPraVMOInBCwzumaIFiUjr4bHK7NPgnAHgiskUoceKercrN8vg==",
      "dev": true,
      "dependencies": {
        "@babel/core": "^7.25.2",
        "@babel/plugin-transform-react-jsx-self": "^7.24.7",
        "@babel/plugin-transform-react-jsx-source": "^7.24.7",
        "@types/babel__core": "^7.20.5",
        "react-refresh": "^0.14.2"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "peerDependencies": {
        "vite": "^4.2.0 || ^5.0.0"
      }
    },
    "node_modules/abort-controller": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/abort-controller/-/abort-controller-3.0.0.tgz",
      "integrity": "sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==",
      "license": "MIT",
      "dependencies": {
        "event-target-shim": "^5.0.0"
      },
      "engines": {
        "node": ">=6.5"
      }
    },
    "node_modules/acorn": {
      "version": "8.12.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.12.1.tgz",
      "integrity": "sha512-tcpGyI9zbizT9JbV6oYE477V6mTlXvvi0T0G3SNIYE2apm/G5huBa1+K89VGeovbg+jycCrfhl3ADxErOuO6Jg==",
      "dev": true,
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/adler-32": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/adler-32/-/adler-32-1.3.1.tgz",
      "integrity": "sha512-ynZ4w/nUUv5rrsR8UUGoe1VC9hZj6V5hU9Qw1HlMDJGEJw5S7TfTErWTjMys6M7vr0YWcPqs3qAr4ss0nDfP+A==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/agentkeepalive": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/agentkeepalive/-/agentkeepalive-4.6.0.tgz",
      "integrity": "sha512-kja8j7PjmncONqaTsB8fQ+wE2mSU2DJ9D4XKoJ5PFWIdRMa6SLSN1ff4mOr4jCbfRSsxR4keIiySJU0N9T5hIQ==",
      "license": "MIT",
      "dependencies": {
        "humanize-ms": "^1.2.1"
      },
      "engines": {
        "node": ">= 8.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-regex": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
      "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
      "dev": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/ansi-styles": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
      "dev": true,
      "dependencies": {
        "color-convert": "^1.9.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/any-promise": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/any-promise/-/any-promise-1.3.0.tgz",
      "integrity": "sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==",
      "dev": true
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dev": true,
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/arg": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/arg/-/arg-5.0.2.tgz",
      "integrity": "sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==",
      "dev": true
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/autoprefixer": {
      "version": "10.4.20",
      "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.20.tgz",
      "integrity": "sha512-XY25y5xSv/wEoqzDyXXME4AFfkZI0P23z6Fs3YgymDnKJkCGOnkL0iTxCa85UTqaSgfcqyf3UA6+c7wUvx/16g==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/autoprefixer"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "dependencies": {
        "browserslist": "^4.23.3",
        "caniuse-lite": "^1.0.30001646",
        "fraction.js": "^4.3.7",
        "normalize-range": "^0.1.2",
        "picocolors": "^1.0.1",
        "postcss-value-parser": "^4.2.0"
      },
      "bin": {
        "autoprefixer": "bin/autoprefixer"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true
    },
    "node_modules/binary-extensions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
      "dev": true,
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dev": true,
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "dev": true,
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browserslist": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.24.0.tgz",
      "integrity": "sha512-Rmb62sR1Zpjql25eSanFGEhAxcFwfA1K0GuQcLoaJBAcENegrQut3hYdhXFF1obQfiDyqIW/cLM5HSJ/9k884A==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "dependencies": {
        "caniuse-lite": "^1.0.30001663",
        "electron-to-chromium": "^1.5.28",
        "node-releases": "^2.0.18",
        "update-browserslist-db": "^1.1.0"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/camelcase-css": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/camelcase-css/-/camelcase-css-2.0.1.tgz",
      "integrity": "sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==",
      "dev": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001727",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001727.tgz",
      "integrity": "sha512-pB68nIHmbN6L/4C6MH1DokyR3bYqFwjaSs/sWDHGj4CTcFtQUQMuJftVwWkXq7mNWOybD3KhUv3oWHoGxgP14Q==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/cfb": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/cfb/-/cfb-1.2.2.tgz",
      "integrity": "sha512-KfdUZsSOw19/ObEWasvBP/Ac4reZvAGauZhs6S/gqNhXhI7cKwvlH7ulj+dOEYnca4bm4SGo8C1bTAQvnTjgQA==",
      "license": "Apache-2.0",
      "dependencies": {
        "adler-32": "~1.3.0",
        "crc-32": "~1.2.0"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/chalk": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
      "dev": true,
      "dependencies": {
        "ansi-styles": "^3.2.1",
        "escape-string-regexp": "^1.0.5",
        "supports-color": "^5.3.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/chokidar": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
      "dev": true,
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/chokidar/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/clsx": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
      "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/codepage": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/codepage/-/codepage-1.15.0.tgz",
      "integrity": "sha512-3g6NUTPd/YtuuGrhMnOMRjFc+LJw/bnMp3+0r/Wcz3IXUuCosKRJvMphm5+Q+bvTVGcJJuRvVLuYba+WojaFaA==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "dev": true,
      "dependencies": {
        "color-name": "1.1.3"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==",
      "dev": true
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/commander": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/commander/-/commander-4.1.1.tgz",
      "integrity": "sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==",
      "dev": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true
    },
    "node_modules/crc-32": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/crc-32/-/crc-32-1.2.2.tgz",
      "integrity": "sha512-ROmzCKrTnOwybPcJApAA6WBWij23HVfGVNKqqrZpuyZOHqK2CwHSvpGuyt/UNNvaIjEd8X5IFGp4Mh+Ie1IHJQ==",
      "license": "Apache-2.0",
      "bin": {
        "crc32": "bin/crc32.njs"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
      "dev": true,
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/cssesc": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/cssesc/-/cssesc-3.0.0.tgz",
      "integrity": "sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==",
      "dev": true,
      "bin": {
        "cssesc": "bin/cssesc"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw=="
    },
    "node_modules/d3-array": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/d3-array/-/d3-array-3.2.4.tgz",
      "integrity": "sha512-tdQAmyA18i4J7wprpYq8ClcxZy3SC31QMeByyCFyRt7BVHdREQZ5lpzoe5mFEYZUWe+oq8HBvk9JjpibyEV4Jg==",
      "license": "ISC",
      "dependencies": {
        "internmap": "1 - 2"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-color": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-color/-/d3-color-3.1.0.tgz",
      "integrity": "sha512-zg/chbXyeBtMQ1LbD/WSoW2DpC3I0mpmPdW+ynRTj/x2DAWYrIY7qeZIHidozwV24m4iavr15lNwIwLxRmOxhA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-ease": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-ease/-/d3-ease-3.0.1.tgz",
      "integrity": "sha512-wR/XK3D3XcLIZwpbvQwQ5fK+8Ykds1ip7A2Txe0yxncXSdq1L9skcG7blcedkOX+ZcgxGAmLX1FrRGbADwzi0w==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-format": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-format/-/d3-format-3.1.0.tgz",
      "integrity": "sha512-YyUI6AEuY/Wpt8KWLgZHsIU86atmikuoOmCfommt0LYHiQSPjvX2AcFc38PX0CBpr2RCyZhjex+NS/LPOv6YqA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-interpolate": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-interpolate/-/d3-interpolate-3.0.1.tgz",
      "integrity": "sha512-3bYs1rOD33uo8aqJfKP3JWPAibgw8Zm2+L9vBKEHJ2Rg+viTR7o5Mmv5mZcieN+FRYaAOWX5SJATX6k1PWz72g==",
      "license": "ISC",
      "dependencies": {
        "d3-color": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-path": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-path/-/d3-path-3.1.0.tgz",
      "integrity": "sha512-p3KP5HCf/bvjBSSKuXid6Zqijx7wIfNW+J/maPs+iwR35at5JCbLUT0LzF1cnjbCHWhqzQTIN2Jpe8pRebIEFQ==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-scale": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/d3-scale/-/d3-scale-4.0.2.tgz",
      "integrity": "sha512-GZW464g1SH7ag3Y7hXjf8RoUuAFIqklOAq3MRl4OaWabTFJY9PN/E1YklhXLh+OQ3fM9yS2nOkCoS+WLZ6kvxQ==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2.10.0 - 3",
        "d3-format": "1 - 3",
        "d3-interpolate": "1.2.0 - 3",
        "d3-time": "2.1.1 - 3",
        "d3-time-format": "2 - 4"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-shape": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/d3-shape/-/d3-shape-3.2.0.tgz",
      "integrity": "sha512-SaLBuwGm3MOViRq2ABk3eLoxwZELpH6zhl3FbAoJ7Vm1gofKx6El1Ib5z23NUEhF9AsGl7y+dzLe5Cw2AArGTA==",
      "license": "ISC",
      "dependencies": {
        "d3-path": "^3.1.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-time/-/d3-time-3.1.0.tgz",
      "integrity": "sha512-VqKjzBLejbSMT4IgbmVgDjpkYrNWUYJnbCGo874u7MMKIWsILRX+OpX/gTk8MqjpT1A/c6HY2dCA77ZN0lkQ2Q==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time-format": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/d3-time-format/-/d3-time-format-4.1.0.tgz",
      "integrity": "sha512-dJxPBlzC7NugB2PDLwo9Q8JiTR3M3e4/XANkreKSUxF8vvXKqm1Yfq4Q5dl8budlunRVlUUaDUgFt7eA8D6NLg==",
      "license": "ISC",
      "dependencies": {
        "d3-time": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-timer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-timer/-/d3-timer-3.0.1.tgz",
      "integrity": "sha512-ndfJ/JxxMd3nw31uyKoY2naivF+r29V+Lc0svZxe1JvvIRmi8hUsrMvdOwgS1o6uBHmiz91geQ0ylPP0aj1VUA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/data-uri-to-buffer": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/data-uri-to-buffer/-/data-uri-to-buffer-4.0.1.tgz",
      "integrity": "sha512-0R9ikRb668HB7QDxT1vkpuUBtqc53YyAwMwGeUFKRojY/NWKvdZ+9UYtRfGmhqNbRkTSVpMbmyhXipFFv2cb/A==",
      "license": "MIT",
      "engines": {
        "node": ">= 12"
      }
    },
    "node_modules/date-fns": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-4.1.0.tgz",
      "integrity": "sha512-Ukq0owbQXxa/U3EGtsdVBkR1w7KOQ5gIBqdH2hkvknzZPYvBxb/aa6E8L7tmjFtkwZBu3UXBbjIgPo/Ez4xaNg==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/kossnocorp"
      }
    },
    "node_modules/debug": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.7.tgz",
      "integrity": "sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==",
      "dev": true,
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/decimal.js-light": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/decimal.js-light/-/decimal.js-light-2.5.1.tgz",
      "integrity": "sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg==",
      "license": "MIT"
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/didyoumean": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/didyoumean/-/didyoumean-1.2.2.tgz",
      "integrity": "sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==",
      "dev": true
    },
    "node_modules/dlv": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/dlv/-/dlv-1.1.3.tgz",
      "integrity": "sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==",
      "dev": true
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/eastasianwidth": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
      "dev": true
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.33",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.33.tgz",
      "integrity": "sha512-+cYTcFB1QqD4j4LegwLfpCNxifb6dDFUAwk6RsLusCwIaZI6or2f+q8rs5tTB2YC53HhOlIbEaqHMAAC8IOIwA==",
      "dev": true
    },
    "node_modules/emoji-regex": {
      "version": "9.2.2",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
      "dev": true
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-toolkit": {
      "version": "1.39.7",
      "resolved": "https://registry.npmjs.org/es-toolkit/-/es-toolkit-1.39.7.tgz",
      "integrity": "sha512-ek/wWryKouBrZIjkwW2BFf91CWOIMvoy2AE5YYgUrfWsJQM2Su1LoLtrw8uusEpN9RfqLlV/0FVNjT0WMv8Bxw==",
      "license": "MIT",
      "workspaces": [
        "docs",
        "benchmarks"
      ]
    },
    "node_modules/esbuild": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.21.5.tgz",
      "integrity": "sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==",
      "dev": true,
      "hasInstallScript": true,
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=12"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.21.5",
        "@esbuild/android-arm": "0.21.5",
        "@esbuild/android-arm64": "0.21.5",
        "@esbuild/android-x64": "0.21.5",
        "@esbuild/darwin-arm64": "0.21.5",
        "@esbuild/darwin-x64": "0.21.5",
        "@esbuild/freebsd-arm64": "0.21.5",
        "@esbuild/freebsd-x64": "0.21.5",
        "@esbuild/linux-arm": "0.21.5",
        "@esbuild/linux-arm64": "0.21.5",
        "@esbuild/linux-ia32": "0.21.5",
        "@esbuild/linux-loong64": "0.21.5",
        "@esbuild/linux-mips64el": "0.21.5",
        "@esbuild/linux-ppc64": "0.21.5",
        "@esbuild/linux-riscv64": "0.21.5",
        "@esbuild/linux-s390x": "0.21.5",
        "@esbuild/linux-x64": "0.21.5",
        "@esbuild/netbsd-x64": "0.21.5",
        "@esbuild/openbsd-x64": "0.21.5",
        "@esbuild/sunos-x64": "0.21.5",
        "@esbuild/win32-arm64": "0.21.5",
        "@esbuild/win32-ia32": "0.21.5",
        "@esbuild/win32-x64": "0.21.5"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
      "dev": true,
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/eslint": {
      "version": "9.12.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.12.0.tgz",
      "integrity": "sha512-UVIOlTEWxwIopRL1wgSQYdnVDcEvs2wyaO6DGo5mXqe3r16IoCNWkR29iHhyaP4cICWjbgbmFUGAhh0GJRuGZw==",
      "dev": true,
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@eslint-community/regexpp": "^4.11.0",
        "@eslint/config-array": "^0.18.0",
        "@eslint/core": "^0.6.0",
        "@eslint/eslintrc": "^3.1.0",
        "@eslint/js": "9.12.0",
        "@eslint/plugin-kit": "^0.2.0",
        "@humanfs/node": "^0.16.5",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@humanwhocodes/retry": "^0.3.1",
        "@types/estree": "^1.0.6",
        "@types/json-schema": "^7.0.15",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.2",
        "debug": "^4.3.2",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^8.1.0",
        "eslint-visitor-keys": "^4.1.0",
        "espree": "^10.2.0",
        "esquery": "^1.5.0",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^8.0.0",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3",
        "text-table": "^0.2.0"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      },
      "peerDependencies": {
        "jiti": "*"
      },
      "peerDependenciesMeta": {
        "jiti": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-plugin-react-hooks": {
      "version": "5.1.0-rc-fb9a90fa48-20240614",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-5.1.0-rc-fb9a90fa48-20240614.tgz",
      "integrity": "sha512-xsiRwaDNF5wWNC4ZHLut+x/YcAxksUd9Rizt7LaEn3bV8VyYRpXnRJQlLOfYaVy9esk4DFP4zPPnoNVjq5Gc0w==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0 || ^9.0.0"
      }
    },
    "node_modules/eslint-plugin-react-refresh": {
      "version": "0.4.12",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-refresh/-/eslint-plugin-react-refresh-0.4.12.tgz",
      "integrity": "sha512-9neVjoGv20FwYtCP6CB1dzR1vr57ZDNOXst21wd2xJ/cTlM2xLq0GWVlSNTdMn/4BtP6cHYBMCSp1wFBJ9jBsg==",
      "dev": true,
      "peerDependencies": {
        "eslint": ">=7"
      }
    },
    "node_modules/eslint-scope": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.1.0.tgz",
      "integrity": "sha512-14dSvlhaVhKKsa9Fx1l8A17s7ah7Ef7wCakJ10LYk6+GYmP9yDti2oq2SEwcyndt6knfcZyhyxwY3i9yL78EQw==",
      "dev": true,
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.1.0.tgz",
      "integrity": "sha512-Q7lok0mqMUSf5a/AdAZkA5a/gHcO6snwQClVNNvFKCAVlxXucdU8pKydU5ZVZjBx5xr37vGbFFWtLQYreLzrZg==",
      "dev": true,
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/eslint/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/eslint/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/eslint/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true
    },
    "node_modules/eslint/node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/eslint/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/espree": {
      "version": "10.2.0",
      "resolved": "https://registry.npmjs.org/espree/-/espree-10.2.0.tgz",
      "integrity": "sha512-upbkBJbckcCNBDBDXEbuhjbP68n+scUd3k/U2EkyM9nw+I/jPiL4cLF/Al06CF96wRltFda16sxDFrxsI1v0/g==",
      "dev": true,
      "dependencies": {
        "acorn": "^8.12.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^4.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/event-target-shim": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/event-target-shim/-/event-target-shim-5.0.1.tgz",
      "integrity": "sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/eventemitter3": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-5.0.1.tgz",
      "integrity": "sha512-GWkBvjiSZK87ELrYOSESUYeVIc9mvLLf/nXalMOS5dYrgZq9o5OVkbZAVM06CVxYsCwH9BDZFPlQTlPA1j4ahA==",
      "license": "MIT"
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "dev": true
    },
    "node_modules/fast-glob": {
      "version": "3.3.2",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.2.tgz",
      "integrity": "sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==",
      "dev": true,
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.4"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/fast-glob/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true
    },
    "node_modules/fastq": {
      "version": "1.17.1",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.17.1.tgz",
      "integrity": "sha512-sRVD3lWVIXWg6By68ZN7vho9a1pQcN/WBFaAAsDDFzlJjvoGx0P8z7V1t72grFJfJhu3YPZBuu25f7Kaw2jN1w==",
      "dev": true,
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/fetch-blob": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/fetch-blob/-/fetch-blob-3.2.0.tgz",
      "integrity": "sha512-7yAQpD2UMJzLi1Dqv7qFYnPbaPx7ZfFK6PiIxQ4PfkGPyNyl2Ugx+a/umUonmKqjhM4DnfbMvdX6otXq83soQQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/jimmywarting"
        },
        {
          "type": "paypal",
          "url": "https://paypal.me/jimmywarting"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "node-domexception": "^1.0.0",
        "web-streams-polyfill": "^3.0.3"
      },
      "engines": {
        "node": "^12.20 || >= 14.13"
      }
    },
    "node_modules/file-entry-cache": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz",
      "integrity": "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==",
      "dev": true,
      "dependencies": {
        "flat-cache": "^4.0.0"
      },
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/file-saver": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/file-saver/-/file-saver-2.0.5.tgz",
      "integrity": "sha512-P9bmyZ3h/PRG+Nzga+rbdI4OEpNDzAVyy74uVO9ATgzLK6VtAsYybF/+TOCvrc0MO793d6+42lLyZTw7/ArVzA==",
      "license": "MIT"
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "dev": true,
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/flat-cache": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz",
      "integrity": "sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==",
      "dev": true,
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.4"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.1.tgz",
      "integrity": "sha512-X8cqMLLie7KsNUDSdzeN8FYK9rEt4Dt67OsG/DNGnYTSDBG4uFAJFBnUeiV+zCVAvwFy56IjM9sH51jVaEhNxw==",
      "dev": true
    },
    "node_modules/foreground-child": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.0.tgz",
      "integrity": "sha512-Ld2g8rrAyMYFXBhEqMz8ZAHBi4J4uS1i/CxGMDnjyFWddMXLVcDp051DZfu+t7+ab7Wv6SMqpWmyFIj5UbfFvg==",
      "dev": true,
      "dependencies": {
        "cross-spawn": "^7.0.0",
        "signal-exit": "^4.0.1"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/form-data": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.3.tgz",
      "integrity": "sha512-qsITQPfmvMOSAdeyZ+12I1c+CKSstAFAwu+97zrnWAbIr5u8wfsExUzCesVLC8NgHuRUqNN4Zy6UPWUTRGslcA==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "hasown": "^2.0.2",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/form-data-encoder": {
      "version": "1.7.2",
      "resolved": "https://registry.npmjs.org/form-data-encoder/-/form-data-encoder-1.7.2.tgz",
      "integrity": "sha512-qfqtYan3rxrnCk1VYaA4H+Ms9xdpPqvLZa6xmMgFvhO32x7/3J/ExcTd6qpxM0vH2GdMI+poehyBZvqfMTto8A==",
      "license": "MIT"
    },
    "node_modules/formdata-node": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/formdata-node/-/formdata-node-4.4.1.tgz",
      "integrity": "sha512-0iirZp3uVDjVGt9p49aTaqjk84TrglENEDuqfdlZQ1roC9CWlPk6Avf8EEnZNcAqPonwkG35x4n3ww/1THYAeQ==",
      "license": "MIT",
      "dependencies": {
        "node-domexception": "1.0.0",
        "web-streams-polyfill": "4.0.0-beta.3"
      },
      "engines": {
        "node": ">= 12.20"
      }
    },
    "node_modules/formdata-node/node_modules/web-streams-polyfill": {
      "version": "4.0.0-beta.3",
      "resolved": "https://registry.npmjs.org/web-streams-polyfill/-/web-streams-polyfill-4.0.0-beta.3.tgz",
      "integrity": "sha512-QW95TCTaHmsYfHDybGMwO5IJIM93I/6vTRk+daHTWFPhwh+C8Cg7j7XyKrwrj8Ib6vYXe0ocYNrmzY4xAAN6ug==",
      "license": "MIT",
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/formdata-polyfill": {
      "version": "4.0.10",
      "resolved": "https://registry.npmjs.org/formdata-polyfill/-/formdata-polyfill-4.0.10.tgz",
      "integrity": "sha512-buewHzMvYL29jdeQTVILecSaZKnt/RJWjoZCF5OW60Z67/GmSLBkOFM7qh1PI3zFNtJbaZL5eQu1vLfazOwj4g==",
      "license": "MIT",
      "dependencies": {
        "fetch-blob": "^3.1.2"
      },
      "engines": {
        "node": ">=12.20.0"
      }
    },
    "node_modules/frac": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/frac/-/frac-1.1.2.tgz",
      "integrity": "sha512-w/XBfkibaTl3YDqASwfDUqkna4Z2p9cFSr1aHDt0WoMTECnRfBOv2WArlZILlqgWlmdIlALXGpM2AOhEk5W3IA==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/fraction.js": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/fraction.js/-/fraction.js-4.3.7.tgz",
      "integrity": "sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==",
      "dev": true,
      "engines": {
        "node": "*"
      },
      "funding": {
        "type": "patreon",
        "url": "https://github.com/sponsors/rawify"
      }
    },
    "node_modules/framer-motion": {
      "version": "12.23.6",
      "resolved": "https://registry.npmjs.org/framer-motion/-/framer-motion-12.23.6.tgz",
      "integrity": "sha512-dsJ389QImVE3lQvM8Mnk99/j8tiZDM/7706PCqvkQ8sSCnpmWxsgX+g0lj7r5OBVL0U36pIecCTBoIWcM2RuKw==",
      "license": "MIT",
      "dependencies": {
        "motion-dom": "^12.23.6",
        "motion-utils": "^12.23.6",
        "tslib": "^2.4.0"
      },
      "peerDependencies": {
        "@emotion/is-prop-valid": "*",
        "react": "^18.0.0 || ^19.0.0",
        "react-dom": "^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@emotion/is-prop-valid": {
          "optional": true
        },
        "react": {
          "optional": true
        },
        "react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/glob": {
      "version": "10.4.5",
      "resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
      "integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
      "dev": true,
      "dependencies": {
        "foreground-child": "^3.1.0",
        "jackspeak": "^3.1.2",
        "minimatch": "^9.0.4",
        "minipass": "^7.1.2",
        "package-json-from-dist": "^1.0.0",
        "path-scurry": "^1.11.1"
      },
      "bin": {
        "glob": "dist/esm/bin.mjs"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/glob/node_modules/brace-expansion": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
      "dev": true,
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/glob/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "dev": true,
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/globals": {
      "version": "15.11.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-15.11.0.tgz",
      "integrity": "sha512-yeyNSjdbyVaWurlwCpcA6XNBrHTMIeDdj0/hnvX/OLJ9ekOXYbLsLinH/MucQyGvNnXhidTdNhTtJaffL2sMfw==",
      "dev": true,
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/goober": {
      "version": "2.1.16",
      "resolved": "https://registry.npmjs.org/goober/-/goober-2.1.16.tgz",
      "integrity": "sha512-erjk19y1U33+XAMe1VTvIONHYoSqE4iS7BYUZfHaqeohLmnC0FdxEh7rQU+6MZ4OajItzjZFSRtVANrQwNq6/g==",
      "license": "MIT",
      "peerDependencies": {
        "csstype": "^3.0.10"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/graphemer": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
      "dev": true
    },
    "node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/humanize-ms": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/humanize-ms/-/humanize-ms-1.2.1.tgz",
      "integrity": "sha512-Fl70vYtsAFb/C06PTS9dZBo7ihau+Tu/DNCk/OyHhea07S+aeMWpFFkUaXRa8fI+ScZbEI8dfSxwY7gxZ9SAVQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.0.0"
      }
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/immer": {
      "version": "10.1.1",
      "resolved": "https://registry.npmjs.org/immer/-/immer-10.1.1.tgz",
      "integrity": "sha512-s2MPrmjovJcoMaHtx6K11Ra7oD05NT97w1IC5zpMkT6Atjr7H8LjaDd81iIxUYpMKSRRNMJE703M1Fhr/TctHw==",
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/immer"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz",
      "integrity": "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
      "dev": true,
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/internmap": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/internmap/-/internmap-2.0.3.tgz",
      "integrity": "sha512-5Hh7Y1wQbvY5ooGgPbDaL5iYLAPzMTUrjMulskHLH6wnv/A+1q5rgEaiuqEjB+oxGXIVZs1FF+R/KPN3ZSQYYg==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.15.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.15.1.tgz",
      "integrity": "sha512-z0vtXSwucUJtANQWldhbtbt7BnL0vxiFjIdDLAatwhDYty2bad6s+rijD6Ri4YuYJubLzIJLUidCh09e1djEVQ==",
      "dev": true,
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true
    },
    "node_modules/isows": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/isows/-/isows-1.0.7.tgz",
      "integrity": "sha512-I1fSfDCZL5P0v33sVqeTDSpcstAg/N+wF5HS033mogOVIp4B+oHC7oOCsA3axAbBSGTJ8QubbNmnIRN/h8U7hg==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/wevm"
        }
      ],
      "license": "MIT",
      "peerDependencies": {
        "ws": "*"
      }
    },
    "node_modules/jackspeak": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-3.4.3.tgz",
      "integrity": "sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==",
      "dev": true,
      "dependencies": {
        "@isaacs/cliui": "^8.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      },
      "optionalDependencies": {
        "@pkgjs/parseargs": "^0.11.0"
      }
    },
    "node_modules/jiti": {
      "version": "1.21.6",
      "resolved": "https://registry.npmjs.org/jiti/-/jiti-1.21.6.tgz",
      "integrity": "sha512-2yTgeWTWzMWkHu6Jp9NKgePDaYHbntiwvYuuJLbbN9vl7DC9DvXKOB2BC3ZZ92D3cvV/aflH0osDfwpHepQ53w==",
      "dev": true,
      "bin": {
        "jiti": "bin/jiti.js"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ=="
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.0.2.tgz",
      "integrity": "sha512-xKqzzWXDttJuOcawBt4KnKHHIf5oQ/Cxax+0PWFG+DFDgHNAdi+TXECADI+RYiFUMmx8792xsMbbgXj4CwnP4g==",
      "dev": true,
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/lilconfig": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-3.1.3.tgz",
      "integrity": "sha512-/vlFKAoH5Cgt3Ie+JLhRbwOsCQePABiU3tJ1egGvyQ+33R/vcwM2Zl2QR/LzjsBeItPt3oSVXapn+m4nQDvpzw==",
      "dev": true,
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/antonk52"
      }
    },
    "node_modules/lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
      "dev": true
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/lucide-react": {
      "version": "0.525.0",
      "resolved": "https://registry.npmjs.org/lucide-react/-/lucide-react-0.525.0.tgz",
      "integrity": "sha512-Tm1txJ2OkymCGkvwoHt33Y2JpN5xucVq1slHcgE6Lk0WjDfjgKWor5CdVER8U6DvcfMwh4M8XxmpTiyzfmfDYQ==",
      "license": "ISC",
      "peerDependencies": {
        "react": "^16.5.1 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
      "dev": true,
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
      "dev": true,
      "dependencies": {
        "braces": "^3.0.3",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minipass": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
      "dev": true,
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/motion-dom": {
      "version": "12.23.6",
      "resolved": "https://registry.npmjs.org/motion-dom/-/motion-dom-12.23.6.tgz",
      "integrity": "sha512-G2w6Nw7ZOVSzcQmsdLc0doMe64O/Sbuc2bVAbgMz6oP/6/pRStKRiVRV4bQfHp5AHYAKEGhEdVHTM+R3FDgi5w==",
      "license": "MIT",
      "dependencies": {
        "motion-utils": "^12.23.6"
      }
    },
    "node_modules/motion-utils": {
      "version": "12.23.6",
      "resolved": "https://registry.npmjs.org/motion-utils/-/motion-utils-12.23.6.tgz",
      "integrity": "sha512-eAWoPgr4eFEOFfg2WjIsMoqJTW6Z8MTUCgn/GZ3VRpClWBdnbjryiA3ZSNLyxCTmCQx4RmYX6jX1iWHbenUPNQ==",
      "license": "MIT"
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/mz": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/mz/-/mz-2.7.0.tgz",
      "integrity": "sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==",
      "dev": true,
      "dependencies": {
        "any-promise": "^1.0.0",
        "object-assign": "^4.0.1",
        "thenify-all": "^1.0.0"
      }
    },
    "node_modules/nanoid": {
      "version": "3.3.7",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.7.tgz",
      "integrity": "sha512-eSRppjcPIatRIMC1U6UngP8XFcz8MQWGQdt1MTBQ7NaAmvXDfvNxbvWV3x2y6CdEUciCSsDHDQZbhYaB8QEo2g==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true
    },
    "node_modules/node-domexception": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/node-domexception/-/node-domexception-1.0.0.tgz",
      "integrity": "sha512-/jKZoMpw0F8GRwl4/eLROPA3cfcXtLApP0QzLmUT/HuPCZWyB7IY9ZrMeKw2O/nFIqPQB3PVM9aYm0F312AXDQ==",
      "deprecated": "Use your platform's native DOMException instead",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/jimmywarting"
        },
        {
          "type": "github",
          "url": "https://paypal.me/jimmywarting"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=10.5.0"
      }
    },
    "node_modules/node-fetch": {
      "version": "3.3.2",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-3.3.2.tgz",
      "integrity": "sha512-dRB78srN/l6gqWulah9SrxeYnxeddIG30+GOqK/9OlLVyLg3HPnr6SqOWTWOXKRwC2eGYCkZ59NNuSgvSrpgOA==",
      "license": "MIT",
      "dependencies": {
        "data-uri-to-buffer": "^4.0.0",
        "fetch-blob": "^3.1.4",
        "formdata-polyfill": "^4.0.10"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/node-fetch"
      }
    },
    "node_modules/node-releases": {
      "version": "2.0.18",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.18.tgz",
      "integrity": "sha512-d9VeXT4SJ7ZeOqGX6R5EM022wpL+eWPooLI+5UpWn2jCT1aosUQEhQP214x33Wkwx3JQMvIm+tIoVOdodFS40g==",
      "dev": true
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/normalize-range": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/normalize-range/-/normalize-range-0.1.2.tgz",
      "integrity": "sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-hash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-3.0.0.tgz",
      "integrity": "sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==",
      "dev": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/openai": {
      "version": "4.104.0",
      "resolved": "https://registry.npmjs.org/openai/-/openai-4.104.0.tgz",
      "integrity": "sha512-p99EFNsA/yX6UhVO93f5kJsDRLAg+CTA2RBqdHK4RtK8u5IJw32Hyb2dTGKbnnFmnuoBv5r7Z2CURI9sGZpSuA==",
      "license": "Apache-2.0",
      "dependencies": {
        "@types/node": "^18.11.18",
        "@types/node-fetch": "^2.6.4",
        "abort-controller": "^3.0.0",
        "agentkeepalive": "^4.2.1",
        "form-data-encoder": "1.7.2",
        "formdata-node": "^4.3.2",
        "node-fetch": "^2.6.7"
      },
      "bin": {
        "openai": "bin/cli"
      },
      "peerDependencies": {
        "ws": "^8.18.0",
        "zod": "^3.23.8"
      },
      "peerDependenciesMeta": {
        "ws": {
          "optional": true
        },
        "zod": {
          "optional": true
        }
      }
    },
    "node_modules/openai/node_modules/@types/node": {
      "version": "18.19.119",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-18.19.119.tgz",
      "integrity": "sha512-d0F6m9itIPaKnrvEMlzE48UjwZaAnFW7Jwibacw9MNdqadjKNpUm9tfJYDwmShJmgqcoqYUX3EMKO1+RWiuuNg==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~5.26.4"
      }
    },
    "node_modules/openai/node_modules/node-fetch": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
      "license": "MIT",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/openai/node_modules/undici-types": {
      "version": "5.26.5",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-5.26.5.tgz",
      "integrity": "sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==",
      "license": "MIT"
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/package-json-from-dist": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/package-json-from-dist/-/package-json-from-dist-1.0.1.tgz",
      "integrity": "sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==",
      "dev": true
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "dev": true
    },
    "node_modules/path-scurry": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
      "integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
      "dev": true,
      "dependencies": {
        "lru-cache": "^10.2.0",
        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
      },
      "engines": {
        "node": ">=16 || 14 >=14.18"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/path-scurry/node_modules/lru-cache": {
      "version": "10.4.3",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
      "integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
      "dev": true
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "dev": true
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pify": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
      "integrity": "sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/pirates": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.6.tgz",
      "integrity": "sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==",
      "dev": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/postcss": {
      "version": "8.4.47",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.47.tgz",
      "integrity": "sha512-56rxCq7G/XfB4EkXq9Egn5GCqugWvDFjafDOThIdMBsI15iqPqR5r15TfSr1YPYeEI19YeaXMCbY6u88Y76GLQ==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "dependencies": {
        "nanoid": "^3.3.7",
        "picocolors": "^1.1.0",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/postcss-import": {
      "version": "15.1.0",
      "resolved": "https://registry.npmjs.org/postcss-import/-/postcss-import-15.1.0.tgz",
      "integrity": "sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==",
      "dev": true,
      "dependencies": {
        "postcss-value-parser": "^4.0.0",
        "read-cache": "^1.0.0",
        "resolve": "^1.1.7"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "postcss": "^8.0.0"
      }
    },
    "node_modules/postcss-js": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/postcss-js/-/postcss-js-4.0.1.tgz",
      "integrity": "sha512-dDLF8pEO191hJMtlHFPRa8xsizHaM82MLfNkUHdUtVEV3tgTp5oj+8qbEqYM57SLfc74KSbw//4SeJma2LRVIw==",
      "dev": true,
      "dependencies": {
        "camelcase-css": "^2.0.1"
      },
      "engines": {
        "node": "^12 || ^14 || >= 16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/postcss/"
      },
      "peerDependencies": {
        "postcss": "^8.4.21"
      }
    },
    "node_modules/postcss-load-config": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/postcss-load-config/-/postcss-load-config-4.0.2.tgz",
      "integrity": "sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "dependencies": {
        "lilconfig": "^3.0.0",
        "yaml": "^2.3.4"
      },
      "engines": {
        "node": ">= 14"
      },
      "peerDependencies": {
        "postcss": ">=8.0.9",
        "ts-node": ">=9.0.0"
      },
      "peerDependenciesMeta": {
        "postcss": {
          "optional": true
        },
        "ts-node": {
          "optional": true
        }
      }
    },
    "node_modules/postcss-nested": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/postcss-nested/-/postcss-nested-6.2.0.tgz",
      "integrity": "sha512-HQbt28KulC5AJzG+cZtj9kvKB93CFCdLvog1WFLf1D+xmMvPGlBstkpTEZfK5+AN9hfJocyBFCNiqyS48bpgzQ==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "dependencies": {
        "postcss-selector-parser": "^6.1.1"
      },
      "engines": {
        "node": ">=12.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.14"
      }
    },
    "node_modules/postcss-selector-parser": {
      "version": "6.1.2",
      "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.1.2.tgz",
      "integrity": "sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==",
      "dev": true,
      "dependencies": {
        "cssesc": "^3.0.0",
        "util-deprecate": "^1.0.2"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/postcss-value-parser": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
      "dev": true
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/react": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react/-/react-18.3.1.tgz",
      "integrity": "sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==",
      "dependencies": {
        "loose-envify": "^1.1.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-18.3.1.tgz",
      "integrity": "sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "scheduler": "^0.23.2"
      },
      "peerDependencies": {
        "react": "^18.3.1"
      }
    },
    "node_modules/react-hot-toast": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/react-hot-toast/-/react-hot-toast-2.5.2.tgz",
      "integrity": "sha512-Tun3BbCxzmXXM7C+NI4qiv6lT0uwGh4oAfeJyNOjYUejTsm35mK9iCaYLGv8cBz9L5YxZLx/2ii7zsIwPtPUdw==",
      "license": "MIT",
      "dependencies": {
        "csstype": "^3.1.3",
        "goober": "^2.1.16"
      },
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "react": ">=16",
        "react-dom": ">=16"
      }
    },
    "node_modules/react-is": {
      "version": "19.1.0",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-19.1.0.tgz",
      "integrity": "sha512-Oe56aUPnkHyyDxxkvqtd7KkdQP5uIUfHxd5XTb3wE9d/kRnZLmKbDB0GWk919tdQ+mxxPtG6EAs6RMT6i1qtHg==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/react-redux": {
      "version": "9.2.0",
      "resolved": "https://registry.npmjs.org/react-redux/-/react-redux-9.2.0.tgz",
      "integrity": "sha512-ROY9fvHhwOD9ySfrF0wmvu//bKCQ6AeZZq1nJNtbDC+kk5DuSuNX/n6YWYF/SYy7bSba4D4FSz8DJeKY/S/r+g==",
      "license": "MIT",
      "dependencies": {
        "@types/use-sync-external-store": "^0.0.6",
        "use-sync-external-store": "^1.4.0"
      },
      "peerDependencies": {
        "@types/react": "^18.2.25 || ^19",
        "react": "^18.0 || ^19",
        "redux": "^5.0.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "redux": {
          "optional": true
        }
      }
    },
    "node_modules/react-refresh": {
      "version": "0.14.2",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.14.2.tgz",
      "integrity": "sha512-jCvmsr+1IUSMUyzOkRcvnVbX3ZYC6g9TDrDbFuFmRDq7PD4yaGbLKNQL6k2jnArV8hjYxh7hVhAZB6s9HDGpZA==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/read-cache": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/read-cache/-/read-cache-1.0.0.tgz",
      "integrity": "sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==",
      "dev": true,
      "dependencies": {
        "pify": "^2.3.0"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/recharts": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/recharts/-/recharts-3.1.0.tgz",
      "integrity": "sha512-NqAqQcGBmLrfDs2mHX/bz8jJCQtG2FeXfE0GqpZmIuXIjkpIwj8sd9ad0WyvKiBKPd8ZgNG0hL85c8sFDwascw==",
      "license": "MIT",
      "dependencies": {
        "@reduxjs/toolkit": "1.x.x || 2.x.x",
        "clsx": "^2.1.1",
        "decimal.js-light": "^2.5.1",
        "es-toolkit": "^1.39.3",
        "eventemitter3": "^5.0.1",
        "immer": "^10.1.1",
        "react-redux": "8.x.x || 9.x.x",
        "reselect": "5.1.1",
        "tiny-invariant": "^1.3.3",
        "use-sync-external-store": "^1.2.2",
        "victory-vendor": "^37.0.2"
      },
      "engines": {
        "node": ">=18"
      },
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-is": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/redux": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/redux/-/redux-5.0.1.tgz",
      "integrity": "sha512-M9/ELqF6fy8FwmkpnF0S3YKOqMyoWJ4+CS5Efg2ct3oY9daQvd/Pc71FpGZsVsbl3Cpb+IIcjBDUnnyBdQbq4w==",
      "license": "MIT"
    },
    "node_modules/redux-thunk": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/redux-thunk/-/redux-thunk-3.1.0.tgz",
      "integrity": "sha512-NW2r5T6ksUKXCabzhL9z+h206HQw/NJkcLm1GPImRQ8IzfXwRGqjVhKJGauHirT0DAuyy6hjdnMZaRoAcy0Klw==",
      "license": "MIT",
      "peerDependencies": {
        "redux": "^5.0.0"
      }
    },
    "node_modules/reselect": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/reselect/-/reselect-5.1.1.tgz",
      "integrity": "sha512-K/BG6eIky/SBpzfHZv/dd+9JBFiS4SWV7FIujVyJRux6e45+73RaUHXLmIR1f7WOMaQ0U1km6qwklRQxpJJY0w==",
      "license": "MIT"
    },
    "node_modules/resolve": {
      "version": "1.22.8",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.8.tgz",
      "integrity": "sha512-oKWePCxqpd6FlLvGV1VU0x7bkPmmCNolxzjMf4NczoDnQcIWrAF+cPtZn5i6n+RfD2d9i0tzpKnG6Yk168yIyw==",
      "dev": true,
      "dependencies": {
        "is-core-module": "^2.13.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/reusify": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz",
      "integrity": "sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==",
      "dev": true,
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rollup": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.24.0.tgz",
      "integrity": "sha512-DOmrlGSXNk1DM0ljiQA+i+o0rSLhtii1je5wgk60j49d1jHT5YYttBv1iWOnYSTG+fZZESUOSNiAl89SIet+Cg==",
      "dev": true,
      "dependencies": {
        "@types/estree": "1.0.6"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.24.0",
        "@rollup/rollup-android-arm64": "4.24.0",
        "@rollup/rollup-darwin-arm64": "4.24.0",
        "@rollup/rollup-darwin-x64": "4.24.0",
        "@rollup/rollup-linux-arm-gnueabihf": "4.24.0",
        "@rollup/rollup-linux-arm-musleabihf": "4.24.0",
        "@rollup/rollup-linux-arm64-gnu": "4.24.0",
        "@rollup/rollup-linux-arm64-musl": "4.24.0",
        "@rollup/rollup-linux-powerpc64le-gnu": "4.24.0",
        "@rollup/rollup-linux-riscv64-gnu": "4.24.0",
        "@rollup/rollup-linux-s390x-gnu": "4.24.0",
        "@rollup/rollup-linux-x64-gnu": "4.24.0",
        "@rollup/rollup-linux-x64-musl": "4.24.0",
        "@rollup/rollup-win32-arm64-msvc": "4.24.0",
        "@rollup/rollup-win32-ia32-msvc": "4.24.0",
        "@rollup/rollup-win32-x64-msvc": "4.24.0",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/scheduler": {
      "version": "0.23.2",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.23.2.tgz",
      "integrity": "sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==",
      "dependencies": {
        "loose-envify": "^1.1.0"
      }
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/signal-exit": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
      "dev": true,
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/sonner": {
      "version": "1.7.4",
      "resolved": "https://registry.npmjs.org/sonner/-/sonner-1.7.4.tgz",
      "integrity": "sha512-DIS8z4PfJRbIyfVFDVnK9rO3eYDtse4Omcm6bt0oEr5/jtLgysmjuBl1frJ9E/EQZrFmKx2A8m/s5s9CRXIzhw==",
      "license": "MIT",
      "peerDependencies": {
        "react": "^18.0.0 || ^19.0.0 || ^19.0.0-rc",
        "react-dom": "^18.0.0 || ^19.0.0 || ^19.0.0-rc"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ssf": {
      "version": "0.11.2",
      "resolved": "https://registry.npmjs.org/ssf/-/ssf-0.11.2.tgz",
      "integrity": "sha512-+idbmIXoYET47hH+d7dfm2epdOMUDjqcB4648sTZ+t2JwoyBFL/insLfB/racrDmsKB3diwsDA696pZMieAC5g==",
      "license": "Apache-2.0",
      "dependencies": {
        "frac": "~1.1.2"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/string-width": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
      "dev": true,
      "dependencies": {
        "eastasianwidth": "^0.2.0",
        "emoji-regex": "^9.2.2",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/string-width-cjs": {
      "name": "string-width",
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dev": true,
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width-cjs/node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width-cjs/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true
    },
    "node_modules/string-width-cjs/node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dev": true,
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
      "dev": true,
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/strip-ansi-cjs": {
      "name": "strip-ansi",
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dev": true,
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi-cjs/node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/sucrase": {
      "version": "3.35.0",
      "resolved": "https://registry.npmjs.org/sucrase/-/sucrase-3.35.0.tgz",
      "integrity": "sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==",
      "dev": true,
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.2",
        "commander": "^4.0.0",
        "glob": "^10.3.10",
        "lines-and-columns": "^1.1.6",
        "mz": "^2.7.0",
        "pirates": "^4.0.1",
        "ts-interface-checker": "^0.1.9"
      },
      "bin": {
        "sucrase": "bin/sucrase",
        "sucrase-node": "bin/sucrase-node"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dev": true,
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "dev": true,
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/tailwindcss": {
      "version": "3.4.17",
      "resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-3.4.17.tgz",
      "integrity": "sha512-w33E2aCvSDP0tW9RZuNXadXlkHXqFzSkQew/aIa2i/Sj8fThxwovwlXHSPXTbAHwEIhBFXAedUhP2tueAKP8Og==",
      "dev": true,
      "dependencies": {
        "@alloc/quick-lru": "^5.2.0",
        "arg": "^5.0.2",
        "chokidar": "^3.6.0",
        "didyoumean": "^1.2.2",
        "dlv": "^1.1.3",
        "fast-glob": "^3.3.2",
        "glob-parent": "^6.0.2",
        "is-glob": "^4.0.3",
        "jiti": "^1.21.6",
        "lilconfig": "^3.1.3",
        "micromatch": "^4.0.8",
        "normalize-path": "^3.0.0",
        "object-hash": "^3.0.0",
        "picocolors": "^1.1.1",
        "postcss": "^8.4.47",
        "postcss-import": "^15.1.0",
        "postcss-js": "^4.0.1",
        "postcss-load-config": "^4.0.2",
        "postcss-nested": "^6.2.0",
        "postcss-selector-parser": "^6.1.2",
        "resolve": "^1.22.8",
        "sucrase": "^3.35.0"
      },
      "bin": {
        "tailwind": "lib/cli.js",
        "tailwindcss": "lib/cli.js"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/text-table": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
      "integrity": "sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==",
      "dev": true
    },
    "node_modules/thenify": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/thenify/-/thenify-3.3.1.tgz",
      "integrity": "sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==",
      "dev": true,
      "dependencies": {
        "any-promise": "^1.0.0"
      }
    },
    "node_modules/thenify-all": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/thenify-all/-/thenify-all-1.6.0.tgz",
      "integrity": "sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==",
      "dev": true,
      "dependencies": {
        "thenify": ">= 3.1.0 < 4"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/tiny-invariant": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/tiny-invariant/-/tiny-invariant-1.3.3.tgz",
      "integrity": "sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==",
      "license": "MIT"
    },
    "node_modules/to-fast-properties": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-2.0.0.tgz",
      "integrity": "sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
      "license": "MIT"
    },
    "node_modules/ts-api-utils": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-1.3.0.tgz",
      "integrity": "sha512-UQMIo7pb8WRomKR1/+MFVLTroIvDVtMX3K6OUir8ynLyzB8Jeriont2bTAtmNPa1ekAgN7YPDyf6V+ygrdU+eQ==",
      "dev": true,
      "engines": {
        "node": ">=16"
      },
      "peerDependencies": {
        "typescript": ">=4.2.0"
      }
    },
    "node_modules/ts-interface-checker": {
      "version": "0.1.13",
      "resolved": "https://registry.npmjs.org/ts-interface-checker/-/ts-interface-checker-0.1.13.tgz",
      "integrity": "sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==",
      "dev": true
    },
    "node_modules/tslib": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
      "license": "0BSD"
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/typescript": {
      "version": "5.6.3",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.6.3.tgz",
      "integrity": "sha512-hjcS1mhfuyi4WW8IWtjP7brDrG2cuDZukyrYrSauoXGNgx0S7zceP07adYkJycEr56BOUTNPzbInooiN3fn1qw==",
      "dev": true,
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/typescript-eslint": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/typescript-eslint/-/typescript-eslint-8.8.1.tgz",
      "integrity": "sha512-R0dsXFt6t4SAFjUSKFjMh4pXDtq04SsFKCVGDP3ZOzNP7itF0jBcZYU4fMsZr4y7O7V7Nc751dDeESbe4PbQMQ==",
      "dev": true,
      "dependencies": {
        "@typescript-eslint/eslint-plugin": "8.8.1",
        "@typescript-eslint/parser": "8.8.1",
        "@typescript-eslint/utils": "8.8.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/undici-types": {
      "version": "7.8.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-7.8.0.tgz",
      "integrity": "sha512-9UJ2xGDvQ43tYyVMpuHlsgApydB8ZKfVYTsLDhXkFL/6gfkp+U8xTGdh8pMJv1SpZna0zxG1DwsKZsreLbXBxw==",
      "license": "MIT"
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.1.tgz",
      "integrity": "sha512-R8UzCaa9Az+38REPiJ1tXlImTJXlVfgHZsglwBD/k6nj76ctsH1E3q4doGrukiLQd3sGQYu56r5+lo5r94l29A==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.0"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dev": true,
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/use-sync-external-store": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/use-sync-external-store/-/use-sync-external-store-1.5.0.tgz",
      "integrity": "sha512-Rb46I4cGGVBmjamjphe8L/UnvJD+uPPtTkNvX5mZgqdbavhI4EbgIWJiIHXJ8bc/i9EQGPRh4DwEURJ552Do0A==",
      "license": "MIT",
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
      "dev": true
    },
    "node_modules/victory-vendor": {
      "version": "37.3.6",
      "resolved": "https://registry.npmjs.org/victory-vendor/-/victory-vendor-37.3.6.tgz",
      "integrity": "sha512-SbPDPdDBYp+5MJHhBCAyI7wKM3d5ivekigc2Dk2s7pgbZ9wIgIBYGVw4zGHBml/qTFbexrofXW6Gu4noGxrOwQ==",
      "license": "MIT AND ISC",
      "dependencies": {
        "@types/d3-array": "^3.0.3",
        "@types/d3-ease": "^3.0.0",
        "@types/d3-interpolate": "^3.0.1",
        "@types/d3-scale": "^4.0.2",
        "@types/d3-shape": "^3.1.0",
        "@types/d3-time": "^3.0.0",
        "@types/d3-timer": "^3.0.0",
        "d3-array": "^3.1.6",
        "d3-ease": "^3.0.1",
        "d3-interpolate": "^3.0.1",
        "d3-scale": "^4.0.2",
        "d3-shape": "^3.1.0",
        "d3-time": "^3.0.0",
        "d3-timer": "^3.0.1"
      }
    },
    "node_modules/vite": {
      "version": "5.4.8",
      "resolved": "https://registry.npmjs.org/vite/-/vite-5.4.8.tgz",
      "integrity": "sha512-FqrItQ4DT1NC4zCUqMB4c4AZORMKIa0m8/URVCZ77OZ/QSNeJ54bU1vrFADbDsuwfIPcgknRkmqakQcgnL4GiQ==",
      "dev": true,
      "dependencies": {
        "esbuild": "^0.21.3",
        "postcss": "^8.4.43",
        "rollup": "^4.20.0"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^18.0.0 || >=20.0.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^18.0.0 || >=20.0.0",
        "less": "*",
        "lightningcss": "^1.21.0",
        "sass": "*",
        "sass-embedded": "*",
        "stylus": "*",
        "sugarss": "*",
        "terser": "^5.4.0"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        }
      }
    },
    "node_modules/web-streams-polyfill": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/web-streams-polyfill/-/web-streams-polyfill-3.3.3.tgz",
      "integrity": "sha512-d2JWLCivmZYTSIoge9MsgFCZrt571BikcWGYkjC1khllbTeDlGqZ2D8vD8E/lJa8WGWbb7Plm8/XJYV7IJHZZw==",
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
      "license": "BSD-2-Clause"
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "license": "MIT",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/wmf": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wmf/-/wmf-1.0.2.tgz",
      "integrity": "sha512-/p9K7bEh0Dj6WbXg4JG0xvLQmIadrner1bi45VMJTfnbVHsc7yIajZyoSoK60/dtVBs12Fm6WkUI5/3WAVsNMw==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/word": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/word/-/word-0.3.0.tgz",
      "integrity": "sha512-OELeY0Q61OXpdUfTp+oweA/vtLVg5VDOXh+3he3PNzLGG/y0oylSOC1xRVj0+l4vQ3tj/bB1HVHv1ocXkQceFA==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
      "dev": true,
      "dependencies": {
        "ansi-styles": "^6.1.0",
        "string-width": "^5.0.1",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs": {
      "name": "wrap-ansi",
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "dev": true,
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true
    },
    "node_modules/wrap-ansi-cjs/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true
    },
    "node_modules/wrap-ansi-cjs/node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dev": true,
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dev": true,
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wrap-ansi/node_modules/ansi-styles": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
      "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
      "dev": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/ws": {
      "version": "8.18.3",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.3.tgz",
      "integrity": "sha512-PEIGCY5tSlUt50cqyMXfCzX+oOPqN0vuGqWzbcJ2xvnkzkq46oOpz7dQaTDBdfICb4N14+GARUDw2XV2N4tvzg==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/xlsx": {
      "version": "0.18.5",
      "resolved": "https://registry.npmjs.org/xlsx/-/xlsx-0.18.5.tgz",
      "integrity": "sha512-dmg3LCjBPHZnQp5/F/+nnTa+miPJxUXB6vtk42YjBBKayDNagxGEeIdWApkYPOf3Z3pm3k62Knjzp7lMeTEtFQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "adler-32": "~1.3.0",
        "cfb": "~1.2.1",
        "codepage": "~1.15.0",
        "crc-32": "~1.2.1",
        "ssf": "~0.11.2",
        "wmf": "~1.0.1",
        "word": "~0.3.0"
      },
      "bin": {
        "xlsx": "bin/xlsx.njs"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true
    },
    "node_modules/yaml": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.5.1.tgz",
      "integrity": "sha512-bLQOjaX/ADgQ20isPJRvF0iRUHIxVhYvr53Of7wGcWlO2jvtUlH5m87DsmulFVxRpNLOnI4tB6p/oh8D7kpn9Q==",
      "dev": true,
      "bin": {
        "yaml": "bin.mjs"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  }
}


# ==============================================================================
# ARQUIVO: package.json
# ==============================================================================

{
  "name": "erasmoinvest",
  "private": true,
  "version": "2.0.0",
  "description": "🚀 Sistema Inteligente de Gestão de Investimentos com IA - Comandos de voz, Mistral AI, OpenAI integrados",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "type-check": "tsc --noEmit",
    "build:check": "npm run type-check && npm run lint && npm run build"
  },
  "dependencies": {
    "@mistralai/mistralai": "^0.5.0",
    "@supabase/supabase-js": "^2.51.0",
    "date-fns": "^4.1.0",
    "file-saver": "^2.0.5",
    "form-data": "^4.0.0",
    "framer-motion": "^12.23.6",
    "lucide-react": "^0.525.0",
    "node-fetch": "^3.3.2",
    "openai": "^4.47.1",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hot-toast": "^2.5.2",
    "recharts": "^3.1.0",
    "sonner": "^1.6.1",
    "xlsx": "^0.18.5"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.1",
    "@types/file-saver": "^2.0.7",
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.18",
    "eslint": "^9.9.1",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.11",
    "globals": "^15.9.0",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.3.0",
    "vite": "^5.4.2"
  }
}


# ==============================================================================
# ARQUIVO: postcss.config.js
# ==============================================================================

export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};


# ==============================================================================
# ARQUIVO: SUPABASE_FIX_RLS.sql
# ==============================================================================

-- ===================================================
-- SCRIPT PARA DESABILITAR RLS - ERASMO INVEST
-- Execute este SQL no Supabase Dashboard > SQL Editor
-- ===================================================

-- 1. Ver políticas atuais
SELECT schemaname, tablename, policyname, permissive, roles, cmd, qual 
FROM pg_policies 
WHERE tablename = 'investments';

-- 2. Remover todas as políticas RLS da tabela investments
DROP POLICY IF EXISTS "Users can manage own investments" ON investments;
DROP POLICY IF EXISTS "Public read access for investments" ON investments;
DROP POLICY IF EXISTS "Authenticated users can manage investments" ON investments;

-- 3. Desabilitar RLS completamente
ALTER TABLE investments DISABLE ROW LEVEL SECURITY;

-- 4. Garantir permissões públicas
GRANT ALL ON investments TO public;
GRANT ALL ON investments TO anon;
GRANT ALL ON investments TO authenticated;

-- 5. Verificar se RLS foi desabilitado
SELECT 
    schemaname,
    tablename,
    rowsecurity as rls_enabled,
    hasoids
FROM pg_tables 
WHERE tablename = 'investments';

-- 6. Testar exclusão (opcional - descomente para testar)
-- DELETE FROM investments WHERE ticker = 'BBAS3' AND quantidade = 1 LIMIT 1;

-- 7. Verificar total de registros
SELECT 
    ticker,
    COUNT(*) as total_registros,
    SUM(quantidade) as total_cotas
FROM investments 
WHERE ticker = 'BBAS3'
GROUP BY ticker;

COMMENT ON TABLE investments IS 'RLS DESABILITADO - Permite exclusões livres - ' || now(); 

# ==============================================================================
# ARQUIVO: tailwind.config.js
# ==============================================================================

/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {},
  },
  plugins: [],
};


# ==============================================================================
# ARQUIVO: test-brapi-exchange.js
# ==============================================================================

// Teste da API de Câmbio - BRAPI
// Execute este arquivo no console do navegador para testar

const BRAPI_API_KEY = 'iM7qSWmznjW7iNPwMEoAK4';

async function testBRAPIExchange() {
  console.log('🔄 Testando API de Câmbio BRAPI...');
  
  const url = `https://brapi.dev/api/v2/currency?currency=USD-BRL&token=${BRAPI_API_KEY}`;
  console.log('📡 URL:', url);
  
  try {
    const response = await fetch(url);
    console.log('📊 Status:', response.status, response.statusText);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const data = await response.json();
    console.log('📋 Resposta completa:', data);
    
    const exchangeRate = data.currency?.[0]?.bidPrice;
    console.log('💲 Taxa de câmbio USD-BRL:', exchangeRate);
    
    if (exchangeRate) {
      const rate = parseFloat(exchangeRate);
      console.log('✅ Taxa convertida:', rate);
      console.log('🧮 Teste: $100 USD = R$', (100 * rate).toFixed(2));
      return rate;
    } else {
      console.warn('⚠️ Estrutura da resposta inesperada');
      return null;
    }
    
  } catch (error) {
    console.error('❌ Erro ao buscar câmbio:', error);
    return null;
  }
}

// Executar teste
testBRAPIExchange().then(rate => {
  if (rate) {
    console.log(`🎉 Teste concluído com sucesso! Taxa: ${rate}`);
  } else {
    console.log('💥 Teste falhou!');
  }
});

/* 
COMO USAR:
1. Abra o DevTools (F12) no navegador
2. Cole este código no Console
3. Pressione Enter
4. Verifique se a API retorna a taxa de câmbio corretamente

RESULTADO ESPERADO:
✅ Taxa de câmbio USD-BRL: "5.xxxx"
✅ Taxa convertida: 5.xxxx
🧮 Teste: $100 USD = R$ xxx.xx
🎉 Teste concluído com sucesso!
*/


# ==============================================================================
# ARQUIVO: test-tesouro-direto.js
# ==============================================================================

// Teste da API do Tesouro Direto
// Execute este arquivo no console do navegador para testar

async function testTesouroDiretoAPI() {
  console.log('🏛️ Testando API do Tesouro Direto...');
  
  const url = 'https://www.tesourodireto.com.br/json/br/com/b3/tesourodireto/service/api/v2/tesouros.json';
  console.log('📡 URL:', url);
  
  try {
    const response = await fetch(url);
    console.log('📊 Status:', response.status, response.statusText);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const data = await response.json();
    console.log('📋 Estrutura da resposta:', Object.keys(data));
    
    if (data.response && data.response.TrsrBdTradgList) {
      const titulos = data.response.TrsrBdTradgList;
      console.log(`📈 Total de títulos encontrados: ${titulos.length}`);
      
      // Mostrar os primeiros 5 títulos como exemplo
      console.log('🔍 Primeiros 5 títulos disponíveis:');
      titulos.slice(0, 5).forEach((titulo, index) => {
        const nome = titulo.TrsrBd?.nm;
        const valor = titulo.TrsrBd?.untrRedVal || titulo.TrsrBd?.minInvstmtAmt;
        console.log(`${index + 1}. ${nome} - R$ ${valor}`);
      });
      
      // Testar busca específica
      console.log('\\n🔎 Testando busca por palavras-chave:');
      
      const testKeys = ['SELIC', 'IPCA', 'PREFIXADO'];
      testKeys.forEach(key => {
        const found = titulos.filter(t => 
          t.TrsrBd?.nm?.toUpperCase().includes(key)
        );
        console.log(`- Títulos com "${key}": ${found.length} encontrados`);
        if (found.length > 0) {
          console.log(`  Exemplo: ${found[0].TrsrBd?.nm} - R$ ${found[0].TrsrBd?.untrRedVal}`);
        }
      });
      
      return true;
    } else {
      console.warn('⚠️ Estrutura da resposta inesperada');
      console.log('📋 Resposta completa:', data);
      return false;
    }
    
  } catch (error) {
    console.error('❌ Erro ao buscar dados do Tesouro:', error);
    return false;
  }
}

// Função para testar busca específica de um título
async function testSpecificTitle(searchTerm) {
  console.log(`\\n🎯 Testando busca específica: "${searchTerm}"`);
  
  try {
    const response = await fetch('https://www.tesourodireto.com.br/json/br/com/b3/tesourodireto/service/api/v2/tesouros.json');
    const data = await response.json();
    
    const titulo = data.response?.TrsrBdTradgList?.find((t) => 
      t.TrsrBd?.nm?.includes(searchTerm) ||
      t.TrsrBd?.nm === searchTerm ||
      searchTerm.includes(t.TrsrBd?.nm)
    );
    
    if (titulo) {
      console.log('✅ Título encontrado:');
      console.log(`   Nome: ${titulo.TrsrBd?.nm}`);
      console.log(`   Valor: R$ ${titulo.TrsrBd?.untrRedVal || titulo.TrsrBd?.minInvstmtAmt}`);
      console.log(`   Vencimento: ${titulo.TrsrBd?.mtrtyDt || 'N/A'}`);
      return titulo;
    } else {
      console.log('❌ Título não encontrado');
      return null;
    }
  } catch (error) {
    console.error('❌ Erro na busca específica:', error);
    return null;
  }
}

// Executar testes
testTesouroDiretoAPI().then(success => {
  if (success) {
    console.log('\\n🎉 Teste da API do Tesouro Direto concluído com sucesso!');
    
    // Testes adicionais com termos específicos
    console.log('\\n🔬 Executando testes específicos...');
    testSpecificTitle('SELIC');
    testSpecificTitle('IPCA');
    testSpecificTitle('PREFIXADO');
  } else {
    console.log('💥 Teste da API do Tesouro Direto falhou!');
  }
});

/* 
COMO USAR:
1. Abra o DevTools (F12) no navegador
2. Cole este código no Console
3. Pressione Enter
4. Verifique se a API retorna os títulos corretamente

RESULTADO ESPERADO:
✅ Total de títulos encontrados: XX
🔍 Primeiros 5 títulos disponíveis:
1. Tesouro Selic 2029 - R$ XXX.XX
2. Tesouro IPCA+ 2029 - R$ XXX.XX
...
🎉 Teste da API do Tesouro Direto concluído com sucesso!
*/


# ==============================================================================
# ARQUIVO: tsconfig.app.json
# ==============================================================================

{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "strict": false,
    "noImplicitAny": false,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}

# ==============================================================================
# ARQUIVO: tsconfig.json
# ==============================================================================

{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "skipLibCheck": true,
    "strict": false,
    "noImplicitAny": false
  }
}

# ==============================================================================
# ARQUIVO: tsconfig.node.json
# ==============================================================================

{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}


# ==============================================================================
# ARQUIVO: vite.config.ts
# ==============================================================================

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  optimizeDeps: {
    exclude: ['lucide-react'],
  },
  server: {
    hmr: {
      overlay: false
    }
  }
});

