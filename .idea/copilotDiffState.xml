<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/generate-tree.ps1">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/generate-tree.ps1" />
              <option name="originalContent" value="# Script para gerar árvore de arquivos do projeto&#10;# Exclui pastas de build, dependências e arquivos temporários&#10;&#10;param(&#10;    [string]$Path = &quot;.&quot;,&#10;    [string]$OutputFile = &quot;project-tree.txt&quot;&#10;)&#10;&#10;function Get-ProjectTree {&#10;    param(&#10;        [string]$CurrentPath,&#10;        [string]$Prefix = &quot;&quot;,&#10;        [int]$Depth = 0&#10;    )&#10;&#10;    # Pastas e arquivos a serem excluídos&#10;    $ExcludedFolders = @(&#10;        &quot;node_modules&quot;, &quot;dist&quot;, &quot;build&quot;, &quot;.git&quot;, &quot;.vscode&quot;, &quot;.idea&quot;,&#10;        &quot;.next&quot;, &quot;.nuxt&quot;, &quot;coverage&quot;, &quot;.nyc_output&quot;, &quot;tmp&quot;, &quot;temp&quot;,&#10;        &quot;.cache&quot;, &quot;.parcel-cache&quot;, &quot;.claude&quot;&#10;    )&#10;&#10;    $ExcludedFiles = @(&#10;        &quot;*.log&quot;, &quot;*.tmp&quot;, &quot;*.lock&quot;, &quot;package-lock.json&quot;, &quot;yarn.lock&quot;,&#10;        &quot;*.cache&quot;, &quot;*.pid&quot;, &quot;*.seed&quot;, &quot;*.pid.lock&quot;, &quot;*.tgz&quot;, &quot;*.tar.gz&quot;&#10;    )&#10;&#10;    # Limita a profundidade para evitar loops infinitos&#10;    if ($Depth -gt 10) { return }&#10;&#10;    try {&#10;        $Items = Get-ChildItem -Path $CurrentPath -Force | Where-Object {&#10;            $item = $_&#10;&#10;            # Verifica se é pasta excluída&#10;            if ($item.PSIsContainer) {&#10;                return $ExcludedFolders -notcontains $item.Name&#10;            }&#10;&#10;            # Verifica se é arquivo excluído&#10;            $isExcluded = $false&#10;            foreach ($pattern in $ExcludedFiles) {&#10;                if ($item.Name -like $pattern) {&#10;                    $isExcluded = $true&#10;                    break&#10;                }&#10;            }&#10;            return -not $isExcluded&#10;        }&#10;&#10;        $Items = $Items | Sort-Object PSIsContainer, Name&#10;&#10;        for ($i = 0; $i -lt $Items.Count; $i++) {&#10;            $item = $Items[$i]&#10;            $isLast = ($i -eq ($Items.Count - 1))&#10;&#10;            if ($isLast) {&#10;                $currentPrefix = &quot;└── &quot;&#10;                $nextPrefix = $Prefix + &quot;    &quot;&#10;            } else {&#10;                $currentPrefix = &quot;├── &quot;&#10;                $nextPrefix = $Prefix + &quot;│   &quot;&#10;            }&#10;&#10;            if ($item.PSIsContainer) {&#10;                Write-Output &quot;$Prefix$currentPrefix$($item.Name)/&quot;&#10;                Get-ProjectTree -CurrentPath $item.FullName -Prefix $nextPrefix -Depth ($Depth + 1)&#10;            } else {&#10;                Write-Output &quot;$Prefix$currentPrefix$($item.Name)&quot;&#10;            }&#10;        }&#10;    }&#10;    catch {&#10;        Write-Warning &quot;Erro ao acessar: $CurrentPath - $($_.Exception.Message)&quot;&#10;    }&#10;}&#10;&#10;# Gera o cabeçalho&#10;$ProjectName = Split-Path -Leaf (Get-Location)&#10;$Header = @&quot;&#10;ESTRUTURA DO PROJETO: $ProjectName&#10;Gerado em: $(Get-Date -Format &quot;dd/MM/yyyy HH:mm:ss&quot;)&#10;===============================================&#10;&#10;$ProjectName/&#10;&quot;@&#10;&#10;# Gera a árvore&#10;Write-Host &quot;Gerando estrutura em árvore do projeto...&quot; -ForegroundColor Green&#10;$TreeOutput = Get-ProjectTree -CurrentPath $Path&#10;&#10;# Combina cabeçalho e árvore&#10;$FullOutput = $Header + &quot;`n&quot; + ($TreeOutput -join &quot;`n&quot;)&#10;&#10;# Salva no arquivo&#10;$FullOutput | Out-File -FilePath $OutputFile -Encoding UTF8&#10;&#10;Write-Host &quot;Estrutura salva em: $OutputFile&quot; -ForegroundColor Green&#10;Write-Host &quot;Total de linhas: $($TreeOutput.Count + 4)&quot; -ForegroundColor Cyan&#10;&#10;# Mostra preview das primeiras linhas&#10;Write-Host &quot;`nPreview das primeiras linhas:&quot; -ForegroundColor Yellow&#10;$FullOutput -split &quot;`n&quot; | Select-Object -First 20 | ForEach-Object { Write-Host $_ }&#10;&#10;if ($TreeOutput.Count -gt 16) {&#10;    Write-Host &quot;...&quot; -ForegroundColor Gray&#10;    Write-Host &quot;Arquivo completo salvo em $OutputFile&quot; -ForegroundColor Green&#10;}&#10;" />
              <option name="updatedContent" value="# Script para gerar árvore de arquivos do projeto&#10;# Exclui pastas de build, dependências e arquivos temporários&#10;&#10;param(&#10;    [string]$Path = &quot;.&quot;,&#10;    [string]$OutputFile = &quot;project-tree.txt&quot;&#10;)&#10;&#10;function Get-ProjectTree {&#10;    param(&#10;        [string]$CurrentPath,&#10;        [string]$Prefix = &quot;&quot;,&#10;        [int]$Depth = 0&#10;    )&#10;    &#10;    # Pastas e arquivos a serem excluídos&#10;    $ExcludedFolders = @(&#10;        &quot;node_modules&quot;, &quot;dist&quot;, &quot;build&quot;, &quot;.git&quot;, &quot;.vscode&quot;, &quot;.idea&quot;, &#10;        &quot;.next&quot;, &quot;.nuxt&quot;, &quot;coverage&quot;, &quot;.nyc_output&quot;, &quot;tmp&quot;, &quot;temp&quot;,&#10;        &quot;.cache&quot;, &quot;.parcel-cache&quot;, &quot;.claude&quot;&#10;    )&#10;    &#10;    $ExcludedFiles = @(&#10;        &quot;*.log&quot;, &quot;*.tmp&quot;, &quot;*.lock&quot;, &quot;package-lock.json&quot;, &quot;yarn.lock&quot;,&#10;        &quot;*.cache&quot;, &quot;*.pid&quot;, &quot;*.seed&quot;, &quot;*.pid.lock&quot;, &quot;*.tgz&quot;, &quot;*.tar.gz&quot;&#10;    )&#10;    &#10;    # Limita a profundidade para evitar loops infinitos&#10;    if ($Depth -gt 10) { return }&#10;    &#10;    try {&#10;        $Items = Get-ChildItem -Path $CurrentPath -Force | Where-Object {&#10;            $item = $_&#10;            &#10;            # Verifica se é pasta excluída&#10;            if ($item.PSIsContainer) {&#10;                return $ExcludedFolders -notcontains $item.Name&#10;            }&#10;            &#10;            # Verifica se é arquivo excluído&#10;            $isExcluded = $false&#10;            foreach ($pattern in $ExcludedFiles) {&#10;                if ($item.Name -like $pattern) {&#10;                    $isExcluded = $true&#10;                    break&#10;                }&#10;            }&#10;            return -not $isExcluded&#10;        }&#10;        &#10;        $Items = $Items | Sort-Object PSIsContainer, Name&#10;        &#10;        for ($i = 0; $i -lt $Items.Count; $i++) {&#10;            $item = $Items[$i]&#10;            $isLast = ($i -eq ($Items.Count - 1))&#10;            &#10;            if ($isLast) {&#10;                $currentPrefix = &quot;+-- &quot;&#10;                $nextPrefix = $Prefix + &quot;    &quot;&#10;            } else {&#10;                $currentPrefix = &quot;|-- &quot;&#10;                $nextPrefix = $Prefix + &quot;|   &quot;&#10;            }&#10;            &#10;            if ($item.PSIsContainer) {&#10;                Write-Output &quot;$Prefix$currentPrefix$($item.Name)/&quot;&#10;                Get-ProjectTree -CurrentPath $item.FullName -Prefix $nextPrefix -Depth ($Depth + 1)&#10;            } else {&#10;                Write-Output &quot;$Prefix$currentPrefix$($item.Name)&quot;&#10;            }&#10;        }&#10;    }&#10;    catch {&#10;        Write-Warning &quot;Erro ao acessar: $CurrentPath - $($_.Exception.Message)&quot;&#10;    }&#10;}&#10;&#10;# Gera o cabeçalho&#10;$ProjectName = Split-Path -Leaf (Get-Location)&#10;$Header = @&quot;&#10;ESTRUTURA DO PROJETO: $ProjectName&#10;Gerado em: $(Get-Date -Format &quot;dd/MM/yyyy HH:mm:ss&quot;)&#10;===============================================&#10;&#10;$ProjectName/&#10;&quot;@&#10;&#10;# Gera a árvore&#10;Write-Host &quot;Gerando estrutura em árvore do projeto...&quot; -ForegroundColor Green&#10;$TreeOutput = Get-ProjectTree -CurrentPath $Path&#10;&#10;# Combina cabeçalho e árvore&#10;$FullOutput = $Header + &quot;`n&quot; + ($TreeOutput -join &quot;`n&quot;)&#10;&#10;# Salva no arquivo&#10;$FullOutput | Out-File -FilePath $OutputFile -Encoding UTF8&#10;&#10;Write-Host &quot;Estrutura salva em: $OutputFile&quot; -ForegroundColor Green&#10;Write-Host &quot;Total de linhas: $($TreeOutput.Count + 4)&quot; -ForegroundColor Cyan&#10;&#10;# Mostra preview das primeiras linhas&#10;Write-Host &quot;`nPreview das primeiras linhas:&quot; -ForegroundColor Yellow&#10;$FullOutput -split &quot;`n&quot; | Select-Object -First 20 | ForEach-Object { Write-Host $_ }&#10;&#10;if ($TreeOutput.Count -gt 16) {&#10;    Write-Host &quot;...&quot; -ForegroundColor Gray&#10;    Write-Host &quot;Arquivo completo salvo em $OutputFile&quot; -ForegroundColor Green&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/ChartsTab.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/ChartsTab.tsx" />
              <option name="originalContent" value="import React, { useMemo, useState, useRef, useEffect, useCallback } from 'react';&#10;import {&#10;    Bar,&#10;    BarChart,&#10;    CartesianGrid,&#10;    Cell,&#10;    Legend,&#10;    Pie,&#10;    PieChart,&#10;    ResponsiveContainer,&#10;    Tooltip,&#10;    XAxis,&#10;    YAxis,&#10;    LineChart,&#10;    Line,&#10;    Area,&#10;    AreaChart,&#10;    RadarChart,&#10;    PolarGrid,&#10;    PolarAngleAxis,&#10;    PolarRadiusAxis,&#10;    Radar,&#10;    Treemap,&#10;    Sankey,&#10;    ComposedChart,&#10;    Scatter,&#10;    ScatterChart,&#10;    ZAxis,&#10;    ReferenceLine,&#10;    ReferenceArea,&#10;    Brush,&#10;    FunnelChart,&#10;    Funnel,&#10;    LabelList&#10;} from 'recharts';&#10;import { Portfolio } from '../types/investment';&#10;import { ASSET_TYPE_COLORS, ASSET_TYPE_NAMES, getAssetType, CanonicalAssetType, QUICK_FILTER_MAP } from '../utils/assetType';&#10;import { benchmarkService, BenchmarkData, BENCHMARK_CONFIGS } from '../services/benchmarkService';&#10;import { WeightedReturnService, WeightedReturnPoint } from '../services/weightedReturnService';&#10;import { Investment } from &quot;../services/supabaseService&quot;;&#10;import { motion, AnimatePresence } from 'framer-motion';&#10;import voiceService from '../services/voiceCommandService';&#10;import {&#10;    TrendingUp,&#10;    TrendingDown,&#10;    DollarSign,&#10;    PieChart as PieChartIcon,&#10;    BarChart3,&#10;    Calendar,&#10;    Activity,&#10;    Target,&#10;    Award,&#10;    AlertCircle,&#10;    Download,&#10;    Filter,&#10;    ChevronUp,&#10;    ChevronDown,&#10;    Zap,&#10;    Shield,&#10;    Percent,&#10;    Trophy,&#10;    Info,&#10;    X,&#10;    Loader,&#10;    Sparkles,&#10;    Play,&#10;    Volume2,&#10;    VolumeX,&#10;    Search,&#10;    SlidersHorizontal,&#10;    Eye,&#10;    EyeOff,&#10;    BarChart2,&#10;    LineChart as LineChartIcon,&#10;    Settings,&#10;    Maximize2,&#10;    TrendingFlat,&#10;    ArrowUpDown,&#10;    Building2,&#10;    Coins,&#10;    Banknote,&#10;    Layers,&#10;    PlusCircle,&#10;    MinusCircle,&#10;    RotateCcw,&#10;    CheckCircle2,&#10;    ArrowRight,&#10;    ArrowLeft,&#10;    Split,&#10;    Merge,&#10;    MousePointer,&#10;    ZoomIn,&#10;    ZoomOut,&#10;    Grid3X3,&#10;    Map,&#10;    BarChart4,&#10;    Gauge,&#10;    TrendingFlat as TrendingFlatIcon,&#10;    Crosshair,&#10;    Focus,&#10;    Layers3,&#10;    Users,&#10;    Clock,&#10;    Cpu,&#10;    Database,&#10;    Globe,&#10;    Home,&#10;    BookOpen,&#10;    Briefcase&#10;} from 'lucide-react';&#10;&#10;// ====================== TYPES &amp; INTERFACES ======================&#10;interface ChartsTabProps {&#10;    portfolios: Portfolio[];&#10;    rawInvestments: Investment[];&#10;}&#10;&#10;interface MetricCardProps {&#10;    title: string;&#10;    value: string | number;&#10;    change?: number;&#10;    icon: React.ReactNode;&#10;    color: string;&#10;    subtitle?: string;&#10;}&#10;&#10;interface ChartFilter {&#10;    assetTypes: CanonicalAssetType[];&#10;    specificAssets: string[];&#10;    comparison: 'none' | 'benchmark' | 'peer' | 'sector';&#10;    selectedBenchmarks: string[];&#10;    showOnlyPositive: boolean;&#10;    showOnlyNegative: boolean;&#10;    showOnlyWithDividends: boolean;&#10;    minValue: number;&#10;    maxValue: number;&#10;}&#10;&#10;interface DrillDownState {&#10;    isActive: boolean;&#10;    level: 'portfolio' | 'assetType' | 'individual';&#10;    selectedAssetType?: string;&#10;    selectedAsset?: string;&#10;    title: string;&#10;    data: any[];&#10;}&#10;&#10;// ====================== ENHANCED COLORS &amp; STYLING ======================&#10;const ENHANCED_COLORS = {&#10;    primary: ['#6366f1', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981', '#3b82f6', '#ef4444', '#8b5cf6', '#06b6d4', '#84cc16'],&#10;    gradient: {&#10;        profit: ['#10b981', '#34d399', '#6ee7b7'],&#10;        loss: ['#ef4444', '#f87171', '#fca5a5'],&#10;        neutral: ['#6b7280', '#9ca3af', '#d1d5db'],&#10;        premium: ['#6366f1', '#8b5cf6', '#a78bfa'],&#10;        gold: ['#f59e0b', '#fbbf24', '#fde047'],&#10;        ocean: ['#0891b2', '#06b6d4', '#22d3ee'],&#10;        sunset: ['#ea580c', '#f97316', '#fb923c'],&#10;        emerald: ['#059669', '#10b981', '#34d399'],&#10;        purple: ['#7c3aed', '#8b5cf6', '#a78bfa'],&#10;        rose: ['#e11d48', '#f43f5e', '#fb7185']&#10;    },&#10;    chart: {&#10;        background: 'rgba(17, 24, 39, 0.95)',&#10;        surface: 'rgba(31, 41, 55, 0.9)',&#10;        border: 'rgba(75, 85, 99, 0.3)',&#10;        grid: 'rgba(156, 163, 175, 0.15)',&#10;        text: '#e5e7eb',&#10;        textMuted: '#9ca3af'&#10;    }&#10;};&#10;&#10;// ====================== SUPER ADVANCED FILTER COMPONENT ======================&#10;const SuperAdvancedFilters: React.FC&lt;{&#10;    filter: ChartFilter;&#10;    setFilter: (filter: ChartFilter) =&gt; void;&#10;    portfolios: Portfolio[];&#10;    onQuickFilter: (type: string) =&gt; void;&#10;    benchmarkData: BenchmarkData[];&#10;    loadingBenchmarks: boolean;&#10;}&gt; = ({ filter, setFilter, portfolios, onQuickFilter, benchmarkData, loadingBenchmarks }) =&gt; {&#10;    const [isExpanded, setIsExpanded] = useState(false);&#10;    const [searchTerm, setSearchTerm] = useState('');&#10;&#10;    const availableAssetTypes = useMemo(() =&gt; {&#10;        const types = new Set(portfolios.map(p =&gt; getAssetType(p.ticker, p.metadata)));&#10;        return Array.from(types);&#10;    }, [portfolios]);&#10;&#10;    const availableAssets = useMemo(() =&gt; {&#10;        return portfolios&#10;            .filter(p =&gt; p.ticker.toLowerCase().includes(searchTerm.toLowerCase()))&#10;            .map(p =&gt; ({&#10;                ticker: p.ticker,&#10;                name: p.metadata?.nome || p.ticker,&#10;                type: getAssetType(p.ticker, p.metadata),&#10;                value: p.marketValue || p.totalInvested || 0,&#10;                profit: p.profitPercent || 0&#10;            }))&#10;            .sort((a, b) =&gt; b.value - a.value);&#10;    }, [portfolios, searchTerm]);&#10;&#10;    const updateFilter = (updates: Partial&lt;ChartFilter&gt;) =&gt; {&#10;        setFilter({ ...filter, ...updates });&#10;    };&#10;&#10;    const clearFilters = () =&gt; {&#10;        setFilter({&#10;            assetTypes: [],&#10;            specificAssets: [],&#10;            comparison: 'none',&#10;            selectedBenchmarks: [],&#10;            showOnlyPositive: false,&#10;            showOnlyNegative: false,&#10;            showOnlyWithDividends: false,&#10;            minValue: 0,&#10;            maxValue: Infinity&#10;        });&#10;    };&#10;&#10;    return (&#10;        &lt;motion.div&#10;            initial={{ opacity: 0, y: -20 }}&#10;            animate={{ opacity: 1, y: 0 }}&#10;            className=&quot;bg-gray-900/50 backdrop-blur-xl rounded-2xl border border-gray-700/50 p-6 mb-6 shadow-2xl&quot;&#10;        &gt;&#10;            &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                &lt;h3 className=&quot;text-xl font-bold text-white flex items-center gap-3&quot;&gt;&#10;                    &lt;SlidersHorizontal className=&quot;h-6 w-6 text-indigo-400&quot; /&gt;&#10;                    Filtros Profissionais Ultra-Avançados&#10;                    &lt;span className=&quot;text-sm text-gray-400 font-normal&quot;&gt;&#10;                        ({portfolios.length} ativos disponíveis)&#10;                    &lt;/span&gt;&#10;                &lt;/h3&gt;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                    &lt;motion.button&#10;                        whileHover={{ scale: 1.05 }}&#10;                        whileTap={{ scale: 0.95 }}&#10;                        onClick={() =&gt; setIsExpanded(!isExpanded)}&#10;                        className={`px-4 py-2 rounded-lg text-sm font-medium transition-all ${&#10;                            isExpanded&#10;                                ? 'bg-indigo-600 text-white shadow-lg'&#10;                                : 'bg-gray-800/50 text-gray-300 hover:bg-gray-700/50'&#10;                        }`}&#10;                    &gt;&#10;                        {isExpanded ? &lt;EyeOff className=&quot;h-4 w-4 mr-2&quot; /&gt; : &lt;Eye className=&quot;h-4 w-4 mr-2&quot; /&gt;}&#10;                        {isExpanded ? 'Simplificar' : 'Expandir'}&#10;                    &lt;/motion.button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Quick Action Buttons - Always Visible */}&#10;            &lt;div className=&quot;grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-2 mb-4&quot;&gt;&#10;                &lt;motion.button&#10;                    whileHover={{ scale: 1.02 }}&#10;                    whileTap={{ scale: 0.98 }}&#10;                    onClick={() =&gt; onQuickFilter('acoes')}&#10;                    className=&quot;px-3 py-2 bg-blue-600/20 text-blue-400 rounded-lg text-sm font-medium hover:bg-blue-600/30 transition-all flex items-center gap-2&quot;&#10;                &gt;&#10;                    &lt;TrendingUp className=&quot;h-4 w-4&quot; /&gt;&#10;                    Só Ações&#10;                &lt;/motion.button&gt;&#10;&#10;                &lt;motion.button&#10;                    whileHover={{ scale: 1.02 }}&#10;                    whileTap={{ scale: 0.98 }}&#10;                    onClick={() =&gt; onQuickFilter('fiis')}&#10;                    className=&quot;px-3 py-2 bg-green-600/20 text-green-400 rounded-lg text-sm font-medium hover:bg-green-600/30 transition-all flex items-center gap-2&quot;&#10;                &gt;&#10;                    &lt;Building2 className=&quot;h-4 w-4&quot; /&gt;&#10;                    Só FIIs&#10;                &lt;/motion.button&gt;&#10;&#10;                &lt;motion.button&#10;                    whileHover={{ scale: 1.02 }}&#10;                    whileTap={{ scale: 0.98 }}&#10;                    onClick={() =&gt; onQuickFilter('crypto')}&#10;                    className=&quot;px-3 py-2 bg-amber-600/20 text-amber-400 rounded-lg text-sm font-medium hover:bg-amber-600/30 transition-all flex items-center gap-2&quot;&#10;                &gt;&#10;                    &lt;Coins className=&quot;h-4 w-4&quot; /&gt;&#10;                    Cripto&#10;                &lt;/motion.button&gt;&#10;&#10;                &lt;motion.button&#10;                    whileHover={{ scale: 1.02 }}&#10;                    whileTap={{ scale: 0.98 }}&#10;                    onClick={() =&gt; onQuickFilter('renda-fixa')}&#10;                    className=&quot;px-3 py-2 bg-purple-600/20 text-purple-400 rounded-lg text-sm font-medium hover:bg-purple-600/30 transition-all flex items-center gap-2&quot;&#10;                &gt;&#10;                    &lt;Shield className=&quot;h-4 w-4&quot; /&gt;&#10;                    Renda Fixa&#10;                &lt;/motion.button&gt;&#10;&#10;                &lt;motion.button&#10;                    whileHover={{ scale: 1.02 }}&#10;                    whileTap={{ scale: 0.98 }}&#10;                    onClick={() =&gt; onQuickFilter('proventos')}&#10;                    className=&quot;px-3 py-2 bg-emerald-600/20 text-emerald-400 rounded-lg text-sm font-medium hover:bg-emerald-600/30 transition-all flex items-center gap-2&quot;&#10;                &gt;&#10;                    &lt;DollarSign className=&quot;h-4 w-4&quot; /&gt;&#10;                    Proventos&#10;                &lt;/motion.button&gt;&#10;&#10;                &lt;motion.button&#10;                    whileHover={{ scale: 1.02 }}&#10;                    whileTap={{ scale: 0.98 }}&#10;                    onClick={() =&gt; onQuickFilter('lucro')}&#10;                    className=&quot;px-3 py-2 bg-green-600/20 text-green-400 rounded-lg text-sm font-medium hover:bg-green-600/30 transition-all flex items-center gap-2&quot;&#10;                &gt;&#10;                    &lt;TrendingUp className=&quot;h-4 w-4&quot; /&gt;&#10;                    Em Lucro&#10;                &lt;/motion.button&gt;&#10;&#10;                &lt;motion.button&#10;                    whileHover={{ scale: 1.02 }}&#10;                    whileTap={{ scale: 0.98 }}&#10;                    onClick={() =&gt; onQuickFilter('prejuizo')}&#10;                    className=&quot;px-3 py-2 bg-red-600/20 text-red-400 rounded-lg text-sm font-medium hover:bg-red-600/30 transition-all flex items-center gap-2&quot;&#10;                &gt;&#10;                    &lt;TrendingDown className=&quot;h-4 w-4&quot; /&gt;&#10;                    Em Prejuízo&#10;                &lt;/motion.button&gt;&#10;&#10;                &lt;motion.button&#10;                    whileHover={{ scale: 1.02 }}&#10;                    whileTap={{ scale: 0.98 }}&#10;                    onClick={clearFilters}&#10;                    className=&quot;px-3 py-2 bg-gray-600/20 text-gray-400 rounded-lg text-sm font-medium hover:bg-gray-600/30 transition-all flex items-center gap-2&quot;&#10;                &gt;&#10;                    &lt;RotateCcw className=&quot;h-4 w-4&quot; /&gt;&#10;                    Limpar&#10;                &lt;/motion.button&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Advanced Filters - Expandable */}&#10;            &lt;AnimatePresence&gt;&#10;                {isExpanded &amp;&amp; (&#10;                    &lt;motion.div&#10;                        initial={{ opacity: 0, height: 0 }}&#10;                        animate={{ opacity: 1, height: 'auto' }}&#10;                        exit={{ opacity: 0, height: 0 }}&#10;                        className=&quot;space-y-6&quot;&#10;                    &gt;&#10;                        {/* Search Bar */}&#10;                        &lt;div className=&quot;relative&quot;&gt;&#10;                            &lt;Search className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5&quot; /&gt;&#10;                            &lt;input&#10;                                type=&quot;text&quot;&#10;                                placeholder=&quot;Buscar ativos (ex: VALE3, ITUB4, BBAS3...)&quot;&#10;                                value={searchTerm}&#10;                                onChange={(e) =&gt; setSearchTerm(e.target.value)}&#10;                                className=&quot;w-full pl-10 pr-4 py-3 bg-gray-800/50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:ring-2 focus:ring-indigo-500 focus:border-transparent&quot;&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6&quot;&gt;&#10;                            {/* Asset Types Filter */}&#10;                            &lt;div&gt;&#10;                                &lt;label className=&quot;block text-sm font-medium text-gray-300 mb-3&quot;&gt;Tipos de Ativo&lt;/label&gt;&#10;                                &lt;div className=&quot;space-y-2 max-h-40 overflow-y-auto bg-gray-800/30 p-3 rounded-lg&quot;&gt;&#10;                                    {availableAssetTypes.map(type =&gt; (&#10;                                        &lt;label key={type} className=&quot;flex items-center gap-3 cursor-pointer hover:bg-gray-700/30 p-2 rounded&quot;&gt;&#10;                                            &lt;input&#10;                                                type=&quot;checkbox&quot;&#10;                                                checked={filter.assetTypes.includes(type)}&#10;                                                onChange={(e) =&gt; {&#10;                                                    const newTypes = e.target.checked&#10;                                                        ? [...filter.assetTypes, type]&#10;                                                        : filter.assetTypes.filter(t =&gt; t !== type);&#10;                                                    updateFilter({ assetTypes: newTypes });&#10;                                                }}&#10;                                                className=&quot;rounded border-gray-600 bg-gray-800 text-indigo-600 focus:ring-indigo-500&quot;&#10;                                            /&gt;&#10;                                            &lt;span className=&quot;text-sm text-gray-300 flex-1&quot;&gt;&#10;                                                {ASSET_TYPE_NAMES[type as keyof typeof ASSET_TYPE_NAMES] || type}&#10;                                            &lt;/span&gt;&#10;                                            &lt;span className=&quot;text-xs text-gray-500&quot;&gt;&#10;                                                {portfolios.filter(p =&gt; getAssetType(p.ticker, p.metadata) === type).length}&#10;                                            &lt;/span&gt;&#10;                                        &lt;/label&gt;&#10;                                    ))}&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            {/* Specific Assets Filter */}&#10;                            &lt;div&gt;&#10;                                &lt;label className=&quot;block text-sm font-medium text-gray-300 mb-3&quot;&gt;&#10;                                    Ativos Específicos&#10;                                    &lt;span className=&quot;text-gray-500&quot;&gt;({availableAssets.length})&lt;/span&gt;&#10;                                &lt;/label&gt;&#10;                                &lt;div className=&quot;space-y-2 max-h-40 overflow-y-auto bg-gray-800/30 p-3 rounded-lg&quot;&gt;&#10;                                    {availableAssets.slice(0, 20).map(asset =&gt; (&#10;                                        &lt;label key={asset.ticker} className=&quot;flex items-center gap-3 cursor-pointer hover:bg-gray-700/30 p-2 rounded&quot;&gt;&#10;                                            &lt;input&#10;                                                type=&quot;checkbox&quot;&#10;                                                checked={filter.specificAssets.includes(asset.ticker)}&#10;                                                onChange={(e) =&gt; {&#10;                                                    const newAssets = e.target.checked&#10;                                                        ? [...filter.specificAssets, asset.ticker]&#10;                                                        : filter.specificAssets.filter(a =&gt; a !== asset.ticker);&#10;                                                    updateFilter({ specificAssets: newAssets });&#10;                                                }}&#10;                                                className=&quot;rounded border-gray-600 bg-gray-800 text-indigo-600 focus:ring-indigo-500&quot;&#10;                                            /&gt;&#10;                                            &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                                                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                                    &lt;span className=&quot;text-sm font-medium text-white&quot;&gt;{asset.ticker}&lt;/span&gt;&#10;                                                    &lt;span className={`text-xs px-2 py-1 rounded ${&#10;                                                        asset.profit &gt;= 0 ? 'bg-green-600/20 text-green-400' : 'bg-red-600/20 text-red-400'&#10;                                                    }`}&gt;&#10;                                                        {asset.profit &gt;= 0 ? '+' : ''}{asset.profit.toFixed(1)}%&#10;                                                    &lt;/span&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;p className=&quot;text-xs text-gray-400 truncate&quot;&gt;{asset.name}&lt;/p&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/label&gt;&#10;                                    ))}&#10;                                    {availableAssets.length &gt; 20 &amp;&amp; (&#10;                                        &lt;p className=&quot;text-xs text-gray-500 text-center p-2&quot;&gt;&#10;                                            E mais {availableAssets.length - 20} ativos...&#10;                                        &lt;/p&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            {/* Metrics Filter */}&#10;                            &lt;div&gt;&#10;                                &lt;label className=&quot;block text-sm font-medium text-gray-300 mb-3&quot;&gt;Filtros de Valor&lt;/label&gt;&#10;                                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                                    &lt;div&gt;&#10;                                        &lt;label className=&quot;block text-xs text-gray-400 mb-2&quot;&gt;Valor Mínimo (R$)&lt;/label&gt;&#10;                                        &lt;input&#10;                                            type=&quot;number&quot;&#10;                                            value={filter.minValue === 0 ? '' : filter.minValue}&#10;                                            onChange={(e) =&gt; updateFilter({ minValue: Number(e.target.value) || 0 })}&#10;                                            placeholder=&quot;0&quot;&#10;                                            className=&quot;w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent&quot;&#10;                                        /&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div&gt;&#10;                                        &lt;label className=&quot;block text-xs text-gray-400 mb-2&quot;&gt;Valor Máximo (R$)&lt;/label&gt;&#10;                                        &lt;input&#10;                                            type=&quot;number&quot;&#10;                                            value={filter.maxValue === Infinity ? '' : filter.maxValue}&#10;                                            onChange={(e) =&gt; updateFilter({ maxValue: Number(e.target.value) || Infinity })}&#10;                                            placeholder=&quot;Sem limite&quot;&#10;                                            className=&quot;w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent&quot;&#10;                                        /&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            {/* Benchmark Comparison */}&#10;                            &lt;div&gt;&#10;                                &lt;label className=&quot;block text-sm font-medium text-gray-300 mb-3&quot;&gt;&#10;                                    Comparar com Benchmarks&#10;                                    {loadingBenchmarks &amp;&amp; &lt;span className=&quot;text-xs text-amber-400 ml-2&quot;&gt;(Carregando...)&lt;/span&gt;}&#10;                                &lt;/label&gt;&#10;                                &lt;div className=&quot;space-y-2 max-h-40 overflow-y-auto bg-gray-800/30 p-3 rounded-lg&quot;&gt;&#10;                                    {BENCHMARK_CONFIGS.map(benchmark =&gt; (&#10;                                        &lt;label key={benchmark.symbol} className=&quot;flex items-center gap-3 cursor-pointer hover:bg-gray-700/30 p-2 rounded&quot;&gt;&#10;                                            &lt;input&#10;                                                type=&quot;checkbox&quot;&#10;                                                checked={filter.selectedBenchmarks.includes(benchmark.symbol)}&#10;                                                onChange={(e) =&gt; {&#10;                                                    const newBenchmarks = e.target.checked&#10;                                                        ? [...filter.selectedBenchmarks, benchmark.symbol]&#10;                                                        : filter.selectedBenchmarks.filter(b =&gt; b !== benchmark.symbol);&#10;                                                    updateFilter({ selectedBenchmarks: newBenchmarks });&#10;                                                }}&#10;                                                className=&quot;rounded border-gray-600 bg-gray-800 text-blue-600 focus:ring-blue-500&quot;&#10;                                            /&gt;&#10;                                            &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                                                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                                    &lt;span className=&quot;text-sm font-medium text-white&quot;&gt;{benchmark.symbol}&lt;/span&gt;&#10;                                                    &lt;span className={`text-xs px-2 py-1 rounded ${&#10;                                                        benchmark.type === 'index' ? 'bg-blue-600/20 text-blue-400' :&#10;                                                        benchmark.type === 'rate' ? 'bg-green-600/20 text-green-400' :&#10;                                                        'bg-purple-600/20 text-purple-400'&#10;                                                    }`}&gt;&#10;                                                        {benchmark.type === 'index' ? 'Índice' : &#10;                                                         benchmark.type === 'rate' ? 'Taxa' : 'ETF'}&#10;                                                    &lt;/span&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div className=&quot;text-xs text-gray-400&quot;&gt;{benchmark.name}&lt;/div&gt;&#10;                                                {benchmarkData.find(b =&gt; b.symbol === benchmark.symbol) &amp;&amp; (&#10;                                                    &lt;div className=&quot;flex justify-between items-center text-xs mt-1&quot;&gt;&#10;                                                        &lt;span className=&quot;text-gray-400&quot;&gt;Atual:&lt;/span&gt;&#10;                                                        &lt;span className={`font-medium ${&#10;                                                            (benchmarkData.find(b =&gt; b.symbol === benchmark.symbol)?.changePercent || 0) &gt;= 0 &#10;                                                                ? 'text-green-400' : 'text-red-400'&#10;                                                        }`}&gt;&#10;                                                            {(benchmarkData.find(b =&gt; b.symbol === benchmark.symbol)?.changePercent || 0) &gt;= 0 ? '+' : ''}&#10;                                                            {(benchmarkData.find(b =&gt; b.symbol === benchmark.symbol)?.changePercent || 0).toFixed(2)}%&#10;                                                        &lt;/span&gt;&#10;                                                    &lt;/div&gt;&#10;                                                )}&#10;                                            &lt;/div&gt;&#10;                                        &lt;/label&gt;&#10;                                    ))}&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            {/* Advanced Options */}&#10;                            &lt;div&gt;&#10;                                &lt;label className=&quot;block text-sm font-medium text-gray-300 mb-3&quot;&gt;Opções Avançadas&lt;/label&gt;&#10;                                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                                    {/* Comparison */}&#10;                                    &lt;div&gt;&#10;                                        &lt;label className=&quot;block text-xs text-gray-400 mb-1&quot;&gt;Comparação&lt;/label&gt;&#10;                                        &lt;select&#10;                                            value={filter.comparison}&#10;                                            onChange={(e) =&gt; updateFilter({ comparison: e.target.value as any })}&#10;                                            className=&quot;w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white text-sm&quot;&#10;                                        &gt;&#10;                                            &lt;option value=&quot;none&quot;&gt;Nenhuma&lt;/option&gt;&#10;                                            &lt;option value=&quot;benchmark&quot;&gt;vs IBOVESPA&lt;/option&gt;&#10;                                            &lt;option value=&quot;peer&quot;&gt;vs Pares do Setor&lt;/option&gt;&#10;                                            &lt;option value=&quot;sector&quot;&gt;vs Média Setorial&lt;/option&gt;&#10;                                        &lt;/select&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    {/* Toggle Filters */}&#10;                                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                                        &lt;label className=&quot;flex items-center gap-2 cursor-pointer&quot;&gt;&#10;                                            &lt;input&#10;                                                type=&quot;checkbox&quot;&#10;                                                checked={filter.showOnlyPositive}&#10;                                                onChange={(e) =&gt; updateFilter({&#10;                                                    showOnlyPositive: e.target.checked,&#10;                                                    showOnlyNegative: e.target.checked ? false : filter.showOnlyNegative&#10;                                                })}&#10;                                                className=&quot;rounded border-gray-600 bg-gray-800 text-green-600&quot;&#10;                                            /&gt;&#10;                                            &lt;span className=&quot;text-sm text-gray-300&quot;&gt;Apenas em Lucro&lt;/span&gt;&#10;                                        &lt;/label&gt;&#10;&#10;                                        &lt;label className=&quot;flex items-center gap-2 cursor-pointer&quot;&gt;&#10;                                            &lt;input&#10;                                                type=&quot;checkbox&quot;&#10;                                                checked={filter.showOnlyNegative}&#10;                                                onChange={(e) =&gt; updateFilter({&#10;                                                    showOnlyNegative: e.target.checked,&#10;                                                    showOnlyPositive: e.target.checked ? false : filter.showOnlyPositive&#10;                                                })}&#10;                                                className=&quot;rounded border-gray-600 bg-gray-800 text-red-600&quot;&#10;                                            /&gt;&#10;                                            &lt;span className=&quot;text-sm text-gray-300&quot;&gt;Apenas em Prejuízo&lt;/span&gt;&#10;                                        &lt;/label&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        {/* Active Filters Summary */}&#10;                        {(filter.assetTypes.length &gt; 0 || filter.specificAssets.length &gt; 0 || filter.showOnlyPositive || filter.showOnlyNegative || filter.showOnlyWithDividends) &amp;&amp; (&#10;                            &lt;div className=&quot;border-t border-gray-700/50 pt-4&quot;&gt;&#10;                                &lt;h4 className=&quot;text-sm font-medium text-gray-300 mb-2&quot;&gt;Filtros Ativos:&lt;/h4&gt;&#10;                                &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                                    {filter.assetTypes.map(type =&gt; (&#10;                                        &lt;span key={type} className=&quot;px-3 py-1 bg-indigo-600/20 text-indigo-400 rounded-full text-xs flex items-center gap-2&quot;&gt;&#10;                                            {ASSET_TYPE_NAMES[type as keyof typeof ASSET_TYPE_NAMES] || type}&#10;                                            &lt;button&#10;                                                onClick={() =&gt; updateFilter({ assetTypes: filter.assetTypes.filter(t =&gt; t !== type) })}&#10;                                                className=&quot;hover:text-indigo-300&quot;&#10;                                            &gt;&#10;                                                &lt;X className=&quot;h-3 w-3&quot; /&gt;&#10;                                            &lt;/button&gt;&#10;                                        &lt;/span&gt;&#10;                                    ))}&#10;                                    {filter.specificAssets.map(asset =&gt; (&#10;                                        &lt;span key={asset} className=&quot;px-3 py-1 bg-green-600/20 text-green-400 rounded-full text-xs flex items-center gap-2&quot;&gt;&#10;                                            {asset}&#10;                                            &lt;button&#10;                                                onClick={() =&gt; updateFilter({ specificAssets: filter.specificAssets.filter(a =&gt; a !== asset) })}&#10;                                                className=&quot;hover:text-green-300&quot;&#10;                                            &gt;&#10;                                                &lt;X className=&quot;h-3 w-3&quot; /&gt;&#10;                                            &lt;/button&gt;&#10;                                        &lt;/span&gt;&#10;                                    ))}&#10;                                    {filter.showOnlyPositive &amp;&amp; (&#10;                                        &lt;span className=&quot;px-3 py-1 bg-green-600/20 text-green-400 rounded-full text-xs&quot;&gt;Em Lucro&lt;/span&gt;&#10;                                    )}&#10;                                    {filter.showOnlyNegative &amp;&amp; (&#10;                                        &lt;span className=&quot;px-3 py-1 bg-red-600/20 text-red-400 rounded-full text-xs&quot;&gt;Em Prejuízo&lt;/span&gt;&#10;                                    )}&#10;                                    {filter.showOnlyWithDividends &amp;&amp; (&#10;                                        &lt;span className=&quot;px-3 py-1 bg-amber-600/20 text-amber-400 rounded-full text-xs&quot;&gt;Com Proventos&lt;/span&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/motion.div&gt;&#10;                )}&#10;            &lt;/AnimatePresence&gt;&#10;        &lt;/motion.div&gt;&#10;    );&#10;};&#10;&#10;// ====================== ENHANCED METRIC CARD ======================&#10;const EnhancedMetricCard: React.FC&lt;MetricCardProps&gt; = ({ title, value, change, icon, color, subtitle }) =&gt; {&#10;    return (&#10;        &lt;motion.div&#10;            initial={{ opacity: 0, y: 20 }}&#10;            animate={{ opacity: 1, y: 0 }}&#10;            transition={{ duration: 0.5 }}&#10;            whileHover={{ scale: 1.02, y: -5 }}&#10;            className={`bg-gradient-to-br ${color} p-6 rounded-2xl shadow-2xl border border-gray-700/50 backdrop-blur-lg relative overflow-hidden group cursor-pointer`}&#10;        &gt;&#10;            {/* Background Pattern */}&#10;            &lt;div className=&quot;absolute inset-0 opacity-10&quot;&gt;&#10;                &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-white/5 to-transparent&quot;&gt;&lt;/div&gt;&#10;                &lt;div className=&quot;absolute top-0 right-0 w-32 h-32 bg-white/5 rounded-full -translate-y-16 translate-x-16&quot;&gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;relative z-10&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                    &lt;div className=&quot;p-3 bg-white/10 rounded-xl backdrop-blur-sm group-hover:bg-white/20 transition-all&quot;&gt;&#10;                        {icon}&#10;                    &lt;/div&gt;&#10;                    {change !== undefined &amp;&amp; (&#10;                        &lt;div className={`flex items-center gap-1 text-sm font-bold ${&#10;                            change &gt;= 0 ? 'text-green-400' : 'text-red-400'&#10;                        } bg-black/20 px-2 py-1 rounded-lg`}&gt;&#10;                            {change &gt;= 0 ? &lt;ChevronUp className=&quot;h-4 w-4&quot; /&gt; : &lt;ChevronDown className=&quot;h-4 w-4&quot; /&gt;}&#10;                            {Math.abs(change).toFixed(1)}%&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;                &lt;h3 className=&quot;text-gray-300 text-sm font-medium mb-1&quot;&gt;{title}&lt;/h3&gt;&#10;                &lt;p className=&quot;text-3xl font-bold text-white mb-1&quot;&gt;&#10;                    {value}&#10;                &lt;/p&gt;&#10;                {subtitle &amp;&amp; &lt;p className=&quot;text-gray-400 text-xs&quot;&gt;{subtitle}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;        &lt;/motion.div&gt;&#10;    );&#10;};&#10;&#10;// ====================== ENHANCED TOOLTIP ======================&#10;const UltraPremiumTooltip = ({ active, payload, label }: any) =&gt; {&#10;    if (!active || !payload || !payload.length) return null;&#10;&#10;    return (&#10;        &lt;motion.div&#10;            initial={{ opacity: 0, scale: 0.9 }}&#10;            animate={{ opacity: 1, scale: 1 }}&#10;            className=&quot;bg-gray-900/95 backdrop-blur-xl p-4 rounded-2xl shadow-2xl border border-gray-700/50 min-w-[200px]&quot;&#10;        &gt;&#10;            {label &amp;&amp; (&#10;                &lt;p className=&quot;text-gray-400 text-sm mb-3 font-medium border-b border-gray-700/50 pb-2&quot;&gt;&#10;                    {label}&#10;                &lt;/p&gt;&#10;            )}&#10;            {payload.map((entry: any, index: number) =&gt; (&#10;                &lt;div key={index} className=&quot;flex items-center justify-between gap-4 mb-2 last:mb-0&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                        &lt;div&#10;                            className=&quot;w-3 h-3 rounded-full shadow-lg&quot;&#10;                            style={{ backgroundColor: entry.color }}&#10;                        &gt;&lt;/div&gt;&#10;                        &lt;span className=&quot;text-gray-300 text-sm font-medium&quot;&gt;{entry.name}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;span className=&quot;text-white font-bold text-sm&quot;&gt;&#10;                        {typeof entry.value === 'number'&#10;                            ? entry.name === 'Rentabilidade' || entry.name === 'Performance' || entry.name?.includes('%')&#10;                                ? `${entry.value.toFixed(2)}%`&#10;                                : entry.value &gt; 1000&#10;                                    ? `R$ ${entry.value.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`&#10;                                    : entry.value.toLocaleString('pt-BR', { minimumFractionDigits: 2 })&#10;                            : entry.value&#10;                        }&#10;                    &lt;/span&gt;&#10;                &lt;/div&gt;&#10;            ))}&#10;        &lt;/motion.div&gt;&#10;    );&#10;};&#10;&#10;// ====================== INDIVIDUAL ASSET DRILL-DOWN COMPONENT ======================&#10;const IndividualAssetAnalysis: React.FC&lt;{&#10;    asset: Portfolio;&#10;    onBack: () =&gt; void;&#10;    rawInvestments: Investment[];&#10;}&gt; = ({ asset, onBack, rawInvestments }) =&gt; {&#10;    const [selectedPeriod, setSelectedPeriod] = useState&lt;'1M' | '3M' | '6M' | '1Y' | 'ALL'&gt;('6M');&#10;&#10;    // Generate historical data for the asset&#10;    const assetHistory = useMemo(() =&gt; {&#10;        const months = [];&#10;        const today = new Date();&#10;        const periodMonths = selectedPeriod === '1M' ? 1 : selectedPeriod === '3M' ? 3 : selectedPeriod === '6M' ? 6 : selectedPeriod === '1Y' ? 12 : 24;&#10;&#10;        for (let i = periodMonths; i &gt;= 0; i--) {&#10;            const date = new Date(today.getFullYear(), today.getMonth() - i, 1);&#10;            const monthKey = date.toISOString().substring(0, 7);&#10;            const progress = (periodMonths - i) / periodMonths;&#10;&#10;            months.push({&#10;                month: monthKey,&#10;                monthLabel: date.toLocaleDateString('pt-BR', { month: 'short', year: 'numeric' }),&#10;                value: (asset.marketValue || asset.totalInvested || 0) * (0.7 + progress * 0.6 + Math.random() * 0.2),&#10;                invested: (asset.totalInvested || 0) * (0.8 + progress * 0.4),&#10;                dividends: Math.random() * 500,&#10;                volume: Math.random() * 10000,&#10;            });&#10;        }&#10;&#10;        return months;&#10;    }, [asset, selectedPeriod]);&#10;&#10;    const assetMetrics = useMemo(() =&gt; {&#10;        const totalInvested = asset.totalInvested || 0;&#10;        const marketValue = asset.marketValue || totalInvested;&#10;        const profit = marketValue - totalInvested;&#10;        const profitPercent = totalInvested &gt; 0 ? (profit / totalInvested) * 100 : 0;&#10;        const totalDividends = (asset.totalDividends || 0) + (asset.totalJuros || 0);&#10;        const dividendYield = asset.totalYield || 0;&#10;&#10;        return {&#10;            totalInvested,&#10;            marketValue,&#10;            profit,&#10;            profitPercent,&#10;            totalDividends,&#10;            dividendYield,&#10;            quantity: asset.quantidade || 0,&#10;            averagePrice: asset.quantidade &gt; 0 ? totalInvested / asset.quantidade : 0&#10;        };&#10;    }, [asset]);&#10;&#10;    return (&#10;        &lt;motion.div&#10;            initial={{ opacity: 0, x: 300 }}&#10;            animate={{ opacity: 1, x: 0 }}&#10;            exit={{ opacity: 0, x: -300 }}&#10;            className=&quot;space-y-6&quot;&#10;        &gt;&#10;            {/* Header */}&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#10;                    &lt;motion.button&#10;                        whileHover={{ scale: 1.05 }}&#10;                        whileTap={{ scale: 0.95 }}&#10;                        onClick={onBack}&#10;                        className=&quot;p-3 bg-gray-800 rounded-xl text-gray-300 hover:text-white hover:bg-gray-700 transition-all&quot;&#10;                    &gt;&#10;                        &lt;ArrowLeft className=&quot;h-5 w-5&quot; /&gt;&#10;                    &lt;/motion.button&gt;&#10;                    &lt;div&gt;&#10;                        &lt;h2 className=&quot;text-3xl font-bold text-white flex items-center gap-3&quot;&gt;&#10;                            &lt;Focus className=&quot;h-8 w-8 text-indigo-400&quot; /&gt;&#10;                            Análise Individual: {asset.ticker}&#10;                        &lt;/h2&gt;&#10;                        &lt;p className=&quot;text-gray-400&quot;&gt;{asset.metadata?.nome || 'Análise detalhada do ativo'}&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                    {['1M', '3M', '6M', '1Y', 'ALL'].map(period =&gt; (&#10;                        &lt;button&#10;                            key={period}&#10;                            onClick={() =&gt; setSelectedPeriod(period as any)}&#10;                            className={`px-4 py-2 rounded-lg font-medium transition-all ${&#10;                                selectedPeriod === period&#10;                                    ? 'bg-indigo-600 text-white shadow-lg'&#10;                                    : 'bg-gray-800/50 text-gray-400 hover:bg-gray-700/50'&#10;                            }`}&#10;                        &gt;&#10;                            {period}&#10;                        &lt;/button&gt;&#10;                    ))}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Asset Metrics */}&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4&quot;&gt;&#10;                &lt;EnhancedMetricCard&#10;                    title=&quot;Valor Atual&quot;&#10;                    value={`R$ ${assetMetrics.marketValue.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`}&#10;                    change={assetMetrics.profitPercent}&#10;                    icon={&lt;DollarSign className=&quot;h-6 w-6 text-white&quot; /&gt;}&#10;                    color=&quot;from-indigo-600 to-purple-600&quot;&#10;                    subtitle={`${assetMetrics.quantity} unidades`}&#10;                /&gt;&#10;                &lt;EnhancedMetricCard&#10;                    title=&quot;Lucro/Prejuízo&quot;&#10;                    value={`R$ ${assetMetrics.profit.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`}&#10;                    change={assetMetrics.profitPercent}&#10;                    icon={&lt;TrendingUp className=&quot;h-6 w-6 text-white&quot; /&gt;}&#10;                    color={assetMetrics.profit &gt;= 0 ? &quot;from-green-600 to-emerald-600&quot; : &quot;from-red-600 to-pink-600&quot;}&#10;                    subtitle={`${assetMetrics.profitPercent &gt;= 0 ? '+' : ''}${assetMetrics.profitPercent.toFixed(2)}%`}&#10;                /&gt;&#10;                &lt;EnhancedMetricCard&#10;                    title=&quot;Proventos Recebidos&quot;&#10;                    value={`R$ ${assetMetrics.totalDividends.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`}&#10;                    icon={&lt;Award className=&quot;h-6 w-6 text-white&quot; /&gt;}&#10;                    color=&quot;from-amber-600 to-orange-600&quot;&#10;                    subtitle={`DY: ${assetMetrics.dividendYield.toFixed(2)}%`}&#10;                /&gt;&#10;                &lt;EnhancedMetricCard&#10;                    title=&quot;Preço Médio&quot;&#10;                    value={`R$ ${assetMetrics.averagePrice.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`}&#10;                    icon={&lt;BarChart3 className=&quot;h-6 w-6 text-white&quot; /&gt;}&#10;                    color=&quot;from-cyan-600 to-blue-600&quot;&#10;                    subtitle={`Investido: R$ ${assetMetrics.totalInvested.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`}&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Charts */}&#10;            &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-6&quot;&gt;&#10;                {/* Price Evolution */}&#10;                &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-bold text-white mb-4 flex items-center gap-2&quot;&gt;&#10;                        &lt;LineChartIcon className=&quot;h-5 w-5 text-green-400&quot; /&gt;&#10;                        Evolução do Valor - {asset.ticker}&#10;                    &lt;/h3&gt;&#10;                    &lt;div className=&quot;h-80&quot;&gt;&#10;                        &lt;ResponsiveContainer&gt;&#10;                            &lt;ComposedChart data={assetHistory}&gt;&#10;                                &lt;defs&gt;&#10;                                    &lt;linearGradient id={`colorValue-${asset.ticker}`} x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;0&quot; y2=&quot;1&quot;&gt;&#10;                                        &lt;stop offset=&quot;5%&quot; stopColor=&quot;#10b981&quot; stopOpacity={0.8}/&gt;&#10;                                        &lt;stop offset=&quot;95%&quot; stopColor=&quot;#10b981&quot; stopOpacity={0.1}/&gt;&#10;                                    &lt;/linearGradient&gt;&#10;                                &lt;/defs&gt;&#10;                                &lt;CartesianGrid strokeDasharray=&quot;3 3&quot; stroke=&quot;rgba(255, 255, 255, 0.1)&quot; /&gt;&#10;                                &lt;XAxis dataKey=&quot;monthLabel&quot; stroke=&quot;#9ca3af&quot; /&gt;&#10;                                &lt;YAxis stroke=&quot;#9ca3af&quot; /&gt;&#10;                                &lt;Tooltip content={&lt;UltraPremiumTooltip /&gt;} /&gt;&#10;                                &lt;Legend /&gt;&#10;                                &lt;Area&#10;                                    type=&quot;monotone&quot;&#10;                                    dataKey=&quot;value&quot;&#10;                                    stroke=&quot;#10b981&quot;&#10;                                    strokeWidth={3}&#10;                                    fillOpacity={1}&#10;                                    fill={`url(#colorValue-${asset.ticker})`}&#10;                                    name=&quot;Valor de Mercado&quot;&#10;                                /&gt;&#10;                                &lt;Line&#10;                                    type=&quot;monotone&quot;&#10;                                    dataKey=&quot;invested&quot;&#10;                                    stroke=&quot;#3b82f6&quot;&#10;                                    strokeWidth={2}&#10;                                    strokeDasharray=&quot;5 5&quot;&#10;                                    name=&quot;Valor Investido&quot;&#10;                                    dot={false}&#10;                                /&gt;&#10;                            &lt;/ComposedChart&gt;&#10;                        &lt;/ResponsiveContainer&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/motion.div&gt;&#10;&#10;                {/* Dividends History */}&#10;                &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-bold text-white mb-4 flex items-center gap-2&quot;&gt;&#10;                        &lt;DollarSign className=&quot;h-5 w-5 text-amber-400&quot; /&gt;&#10;                        Histórico de Proventos - {asset.ticker}&#10;                    &lt;/h3&gt;&#10;                    &lt;div className=&quot;h-80&quot;&gt;&#10;                        &lt;ResponsiveContainer&gt;&#10;                            &lt;BarChart data={assetHistory}&gt;&#10;                                &lt;defs&gt;&#10;                                    &lt;linearGradient id={`colorDividends-${asset.ticker}`} x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;0&quot; y2=&quot;1&quot;&gt;&#10;                                        &lt;stop offset=&quot;5%&quot; stopColor=&quot;#f59e0b&quot; stopOpacity={0.8}/&gt;&#10;                                        &lt;stop offset=&quot;95%&quot; stopColor=&quot;#f59e0b&quot; stopOpacity={0.3}/&gt;&#10;                                    &lt;/linearGradient&gt;&#10;                                &lt;/defs&gt;&#10;                                &lt;CartesianGrid strokeDasharray=&quot;3 3&quot; stroke=&quot;rgba(255, 255, 255, 0.1)&quot; /&gt;&#10;                                &lt;XAxis dataKey=&quot;monthLabel&quot; stroke=&quot;#9ca3af&quot; /&gt;&#10;                                &lt;YAxis stroke=&quot;#9ca3af&quot; /&gt;&#10;                                &lt;Tooltip content={&lt;UltraPremiumTooltip /&gt;} /&gt;&#10;                                &lt;Bar&#10;                                    dataKey=&quot;dividends&quot;&#10;                                    fill={`url(#colorDividends-${asset.ticker})`}&#10;                                    radius={[8, 8, 0, 0]}&#10;                                    name=&quot;Proventos&quot;&#10;                                /&gt;&#10;                            &lt;/BarChart&gt;&#10;                        &lt;/ResponsiveContainer&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/motion.div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Asset Details */}&#10;            &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-6&quot;&gt;&#10;                {/* Basic Info */}&#10;                &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-bold text-white mb-4 flex items-center gap-2&quot;&gt;&#10;                        &lt;Info className=&quot;h-5 w-5 text-blue-400&quot; /&gt;&#10;                        Informações Básicas&#10;                    &lt;/h3&gt;&#10;                    &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center p-3 bg-gray-800/30 rounded-lg&quot;&gt;&#10;                            &lt;span className=&quot;text-gray-400&quot;&gt;Ticker&lt;/span&gt;&#10;                            &lt;span className=&quot;text-white font-bold&quot;&gt;{asset.ticker}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center p-3 bg-gray-800/30 rounded-lg&quot;&gt;&#10;                            &lt;span className=&quot;text-gray-400&quot;&gt;Tipo&lt;/span&gt;&#10;                            &lt;span className=&quot;text-white&quot;&gt;{getAssetType(asset.ticker, asset.metadata)}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center p-3 bg-gray-800/30 rounded-lg&quot;&gt;&#10;                            &lt;span className=&quot;text-gray-400&quot;&gt;Setor&lt;/span&gt;&#10;                            &lt;span className=&quot;text-white&quot;&gt;{asset.metadata?.setor || 'N/A'}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center p-3 bg-gray-800/30 rounded-lg&quot;&gt;&#10;                            &lt;span className=&quot;text-gray-400&quot;&gt;Quantidade&lt;/span&gt;&#10;                            &lt;span className=&quot;text-white&quot;&gt;{assetMetrics.quantity}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/motion.div&gt;&#10;&#10;                {/* Performance Metrics */}&#10;                &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-bold text-white mb-4 flex items-center gap-2&quot;&gt;&#10;                        &lt;Target className=&quot;h-5 w-5 text-purple-400&quot; /&gt;&#10;                        Métricas de Performance&#10;                    &lt;/h3&gt;&#10;                    &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center p-3 bg-gray-800/30 rounded-lg&quot;&gt;&#10;                            &lt;span className=&quot;text-gray-400&quot;&gt;ROI&lt;/span&gt;&#10;                            &lt;span className={`font-bold ${assetMetrics.profitPercent &gt;= 0 ? 'text-green-400' : 'text-red-400'}`}&gt;&#10;                                {assetMetrics.profitPercent &gt;= 0 ? '+' : ''}{assetMetrics.profitPercent.toFixed(2)}%&#10;                            &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center p-3 bg-gray-800/30 rounded-lg&quot;&gt;&#10;                            &lt;span className=&quot;text-gray-400&quot;&gt;Dividend Yield&lt;/span&gt;&#10;                            &lt;span className=&quot;text-blue-400 font-bold&quot;&gt;{assetMetrics.dividendYield.toFixed(2)}%&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center p-3 bg-gray-800/30 rounded-lg&quot;&gt;&#10;                            &lt;span className=&quot;text-gray-400&quot;&gt;Volatilidade&lt;/span&gt;&#10;                            &lt;span className=&quot;text-amber-400 font-bold&quot;&gt;{(Math.random() * 30 + 10).toFixed(1)}%&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center p-3 bg-gray-800/30 rounded-lg&quot;&gt;&#10;                            &lt;span className=&quot;text-gray-400&quot;&gt;Beta&lt;/span&gt;&#10;                            &lt;span className=&quot;text-cyan-400 font-bold&quot;&gt;{(Math.random() * 2 + 0.5).toFixed(2)}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/motion.div&gt;&#10;&#10;                {/* Risk Analysis */}&#10;                &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-bold text-white mb-4 flex items-center gap-2&quot;&gt;&#10;                        &lt;Shield className=&quot;h-5 w-5 text-red-400&quot; /&gt;&#10;                        Análise de Risco&#10;                    &lt;/h3&gt;&#10;                    &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center p-3 bg-gray-800/30 rounded-lg&quot;&gt;&#10;                            &lt;span className=&quot;text-gray-400&quot;&gt;Nível de Risco&lt;/span&gt;&#10;                            &lt;span className=&quot;text-amber-400 font-bold&quot;&gt;Médio&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center p-3 bg-gray-800/30 rounded-lg&quot;&gt;&#10;                            &lt;span className=&quot;text-gray-400&quot;&gt;VaR (95%)&lt;/span&gt;&#10;                            &lt;span className=&quot;text-red-400 font-bold&quot;&gt;-{(Math.random() * 15 + 5).toFixed(1)}%&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center p-3 bg-gray-800/30 rounded-lg&quot;&gt;&#10;                            &lt;span className=&quot;text-gray-400&quot;&gt;Sharpe Ratio&lt;/span&gt;&#10;                            &lt;span className=&quot;text-green-400 font-bold&quot;&gt;{(Math.random() * 2 + 0.5).toFixed(2)}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center p-3 bg-gray-800/30 rounded-lg&quot;&gt;&#10;                            &lt;span className=&quot;text-gray-400&quot;&gt;Correlação c/ IBOV&lt;/span&gt;&#10;                            &lt;span className=&quot;text-purple-400 font-bold&quot;&gt;{(Math.random() * 0.8 + 0.1).toFixed(2)}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/motion.div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/motion.div&gt;&#10;    );&#10;};&#10;&#10;// ====================== ASSET TYPE DRILL-DOWN COMPONENT ======================&#10;const AssetTypeAnalysis: React.FC&lt;{&#10;    assetType: string;&#10;    portfolios: Portfolio[];&#10;    onBack: () =&gt; void;&#10;    onAssetClick: (asset: Portfolio) =&gt; void;&#10;}&gt; = ({ assetType, portfolios, onBack, onAssetClick }) =&gt; {&#10;    const filteredAssets = useMemo(() =&gt; {&#10;        return portfolios.filter(p =&gt; getAssetType(p.ticker, p.metadata) === assetType);&#10;    }, [portfolios, assetType]);&#10;&#10;    const typeMetrics = useMemo(() =&gt; {&#10;        const totalInvested = filteredAssets.reduce((sum, p) =&gt; sum + (p.totalInvested || 0), 0);&#10;        const totalValue = filteredAssets.reduce((sum, p) =&gt; sum + (p.marketValue || p.totalInvested || 0), 0);&#10;        const totalDividends = filteredAssets.reduce((sum, p) =&gt; sum + ((p.totalDividends || 0) + (p.totalJuros || 0)), 0);&#10;        const totalProfit = totalValue - totalInvested;&#10;        const profitPercent = totalInvested &gt; 0 ? (totalProfit / totalInvested) * 100 : 0;&#10;&#10;        return {&#10;            totalInvested,&#10;            totalValue,&#10;            totalDividends,&#10;            totalProfit,&#10;            profitPercent,&#10;            assetCount: filteredAssets.length,&#10;            averageDividendYield: filteredAssets.reduce((sum, p) =&gt; sum + (p.totalYield || 0), 0) / filteredAssets.length&#10;        };&#10;    }, [filteredAssets]);&#10;&#10;    const chartData = useMemo(() =&gt; {&#10;        return filteredAssets&#10;            .map(p =&gt; ({&#10;                name: p.ticker,&#10;                value: p.marketValue || p.totalInvested || 0,&#10;                profit: p.profitPercent || 0,&#10;                dividends: (p.totalDividends || 0) + (p.totalJuros || 0),&#10;                dividendYield: p.totalYield || 0&#10;            }))&#10;            .sort((a, b) =&gt; b.value - a.value);&#10;    }, [filteredAssets]);&#10;&#10;    return (&#10;        &lt;motion.div&#10;            initial={{ opacity: 0, x: 300 }}&#10;            animate={{ opacity: 1, x: 0 }}&#10;            exit={{ opacity: 0, x: -300 }}&#10;            className=&quot;space-y-6&quot;&#10;        &gt;&#10;            {/* Header */}&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#10;                    &lt;motion.button&#10;                        whileHover={{ scale: 1.05 }}&#10;                        whileTap={{ scale: 0.95 }}&#10;                        onClick={onBack}&#10;                        className=&quot;p-3 bg-gray-800 rounded-xl text-gray-300 hover:text-white hover:bg-gray-700 transition-all&quot;&#10;                    &gt;&#10;                        &lt;ArrowLeft className=&quot;h-5 w-5&quot; /&gt;&#10;                    &lt;/motion.button&gt;&#10;                    &lt;div&gt;&#10;                        &lt;h2 className=&quot;text-3xl font-bold text-white flex items-center gap-3&quot;&gt;&#10;                            &lt;Layers className=&quot;h-8 w-8 text-purple-400&quot; /&gt;&#10;                            Análise de {ASSET_TYPE_NAMES[assetType as keyof typeof ASSET_TYPE_NAMES] || assetType}&#10;                        &lt;/h2&gt;&#10;                        &lt;p className=&quot;text-gray-400&quot;&gt;{typeMetrics.assetCount} ativos nesta categoria&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Type Metrics */}&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4&quot;&gt;&#10;                &lt;EnhancedMetricCard&#10;                    title=&quot;Valor Total&quot;&#10;                    value={`R$ ${typeMetrics.totalValue.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`}&#10;                    change={typeMetrics.profitPercent}&#10;                    icon={&lt;DollarSign className=&quot;h-6 w-6 text-white&quot; /&gt;}&#10;                    color=&quot;from-indigo-600 to-purple-600&quot;&#10;                    subtitle={`${typeMetrics.assetCount} ativos`}&#10;                /&gt;&#10;                &lt;EnhancedMetricCard&#10;                    title=&quot;Lucro Total&quot;&#10;                    value={`R$ ${typeMetrics.totalProfit.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`}&#10;                    change={typeMetrics.profitPercent}&#10;                    icon={&lt;TrendingUp className=&quot;h-6 w-6 text-white&quot; /&gt;}&#10;                    color={typeMetrics.totalProfit &gt;= 0 ? &quot;from-green-600 to-emerald-600&quot; : &quot;from-red-600 to-pink-600&quot;}&#10;                    subtitle={`${typeMetrics.profitPercent &gt;= 0 ? '+' : ''}${typeMetrics.profitPercent.toFixed(2)}%`}&#10;                /&gt;&#10;                &lt;EnhancedMetricCard&#10;                    title=&quot;Proventos&quot;&#10;                    value={`R$ ${typeMetrics.totalDividends.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`}&#10;                    icon={&lt;Award className=&quot;h-6 w-6 text-white&quot; /&gt;}&#10;                    color=&quot;from-amber-600 to-orange-600&quot;&#10;                    subtitle={`DY Médio: ${typeMetrics.averageDividendYield.toFixed(2)}%`}&#10;                /&gt;&#10;                &lt;EnhancedMetricCard&#10;                    title=&quot;Ticket Médio&quot;&#10;                    value={`R$ ${(typeMetrics.totalValue / typeMetrics.assetCount).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`}&#10;                    icon={&lt;BarChart3 className=&quot;h-6 w-6 text-white&quot; /&gt;}&#10;                    color=&quot;from-cyan-600 to-blue-600&quot;&#10;                    subtitle=&quot;Por ativo&quot;&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Charts */}&#10;            &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-6&quot;&gt;&#10;                {/* Performance Chart */}&#10;                &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-bold text-white mb-4 flex items-center gap-2&quot;&gt;&#10;                        &lt;BarChart3 className=&quot;h-5 w-5 text-green-400&quot; /&gt;&#10;                        Performance por Ativo&#10;                    &lt;/h3&gt;&#10;                    &lt;div className=&quot;h-80&quot;&gt;&#10;                        &lt;ResponsiveContainer&gt;&#10;                            &lt;BarChart data={chartData} layout=&quot;horizontal&quot;&gt;&#10;                                &lt;CartesianGrid strokeDasharray=&quot;3 3&quot; stroke=&quot;rgba(255, 255, 255, 0.1)&quot; /&gt;&#10;                                &lt;XAxis type=&quot;number&quot; stroke=&quot;#9ca3af&quot; /&gt;&#10;                                &lt;YAxis&#10;                                    type=&quot;category&quot;&#10;                                    dataKey=&quot;name&quot;&#10;                                    stroke=&quot;#9ca3af&quot;&#10;                                    width={60}&#10;                                /&gt;&#10;                                &lt;Tooltip content={&lt;UltraPremiumTooltip /&gt;} /&gt;&#10;                                &lt;Bar&#10;                                    dataKey=&quot;profit&quot;&#10;                                    radius={[0, 8, 8, 0]}&#10;                                    name=&quot;Rentabilidade (%)&quot;&#10;                                    onClick={(data) =&gt; {&#10;                                        const asset = filteredAssets.find(p =&gt; p.ticker === data.name);&#10;                                        if (asset) onAssetClick(asset);&#10;                                    }}&#10;                                    style={{ cursor: 'pointer' }}&#10;                                &gt;&#10;                                    {chartData.map((entry, index) =&gt; (&#10;                                        &lt;Cell&#10;                                            key={`cell-${index}`}&#10;                                            fill={entry.profit &gt;= 0 ? '#10b981' : '#ef4444'}&#10;                                        /&gt;&#10;                                    ))}&#10;                                &lt;/Bar&gt;&#10;                            &lt;/BarChart&gt;&#10;                        &lt;/ResponsiveContainer&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/motion.div&gt;&#10;&#10;                {/* Distribution Chart */}&#10;                &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-bold text-white mb-4 flex items-center gap-2&quot;&gt;&#10;                        &lt;PieChartIcon className=&quot;h-5 w-5 text-purple-400&quot; /&gt;&#10;                        Distribuição de Valor&#10;                    &lt;/h3&gt;&#10;                    &lt;div className=&quot;h-80&quot;&gt;&#10;                        &lt;ResponsiveContainer&gt;&#10;                            &lt;PieChart&gt;&#10;                                &lt;Pie&#10;                                    data={chartData}&#10;                                    cx=&quot;50%&quot;&#10;                                    cy=&quot;50%&quot;&#10;                                    outerRadius={120}&#10;                                    innerRadius={40}&#10;                                    paddingAngle={2}&#10;                                    dataKey=&quot;value&quot;&#10;                                    onClick={(data) =&gt; {&#10;                                        const asset = filteredAssets.find(p =&gt; p.ticker === data.name);&#10;                                        if (asset) onAssetClick(asset);&#10;                                    }}&#10;                                    style={{ cursor: 'pointer' }}&#10;                                &gt;&#10;                                    {chartData.map((entry, index) =&gt; (&#10;                                        &lt;Cell key={`cell-${index}`} fill={ENHANCED_COLORS.primary[index % ENHANCED_COLORS.primary.length]} /&gt;&#10;                                    ))}&#10;                                &lt;/Pie&gt;&#10;                                &lt;Tooltip content={&lt;UltraPremiumTooltip /&gt;} /&gt;&#10;                            &lt;/PieChart&gt;&#10;                        &lt;/ResponsiveContainer&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/motion.div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Asset List */}&#10;            &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                &lt;h3 className=&quot;text-xl font-bold text-white mb-4 flex items-center gap-2&quot;&gt;&#10;                    &lt;Database className=&quot;h-5 w-5 text-cyan-400&quot; /&gt;&#10;                    Lista Detalhada de Ativos&#10;                &lt;/h3&gt;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4&quot;&gt;&#10;                    {filteredAssets.map((asset, index) =&gt; (&#10;                        &lt;motion.div&#10;                            key={asset.ticker}&#10;                            initial={{ opacity: 0, y: 20 }}&#10;                            animate={{ opacity: 1, y: 0 }}&#10;                            transition={{ delay: index * 0.05 }}&#10;                            whileHover={{ scale: 1.02, y: -2 }}&#10;                            onClick={() =&gt; onAssetClick(asset)}&#10;                            className=&quot;bg-gray-800/50 p-4 rounded-xl border border-gray-700/50 cursor-pointer hover:border-indigo-500/50 transition-all group&quot;&#10;                        &gt;&#10;                            &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                                &lt;h4 className=&quot;font-bold text-white group-hover:text-indigo-400 transition-colors&quot;&gt;{asset.ticker}&lt;/h4&gt;&#10;                                &lt;span className={`text-sm font-bold px-2 py-1 rounded ${&#10;                                    (asset.profitPercent || 0) &gt;= 0 ? 'bg-green-600/20 text-green-400' : 'bg-red-600/20 text-red-400'&#10;                                }`}&gt;&#10;                                    {(asset.profitPercent || 0) &gt;= 0 ? '+' : ''}{(asset.profitPercent || 0).toFixed(1)}%&#10;                                &lt;/span&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;p className=&quot;text-xs text-gray-400 mb-3 line-clamp-2&quot;&gt;{asset.metadata?.nome || asset.ticker}&lt;/p&gt;&#10;&#10;                            &lt;div className=&quot;space-y-2&quot;&gt;&#10;                                &lt;div className=&quot;flex justify-between items-center text-sm&quot;&gt;&#10;                                    &lt;span className=&quot;text-gray-400&quot;&gt;Valor&lt;/span&gt;&#10;                                    &lt;span className=&quot;text-white font-medium&quot;&gt;&#10;                                        R$ {(asset.marketValue || asset.totalInvested || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}&#10;                                    &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;flex justify-between items-center text-sm&quot;&gt;&#10;                                    &lt;span className=&quot;text-gray-400&quot;&gt;DY&lt;/span&gt;&#10;                                    &lt;span className=&quot;text-blue-400 font-medium&quot;&gt;{(asset.totalYield || 0).toFixed(2)}%&lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;flex justify-between items-center text-sm&quot;&gt;&#10;                                    &lt;span className=&quot;text-gray-400&quot;&gt;Proventos&lt;/span&gt;&#10;                                    &lt;span className=&quot;text-amber-400 font-medium&quot;&gt;&#10;                                        R$ {((asset.totalDividends || 0) + (asset.totalJuros || 0)).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}&#10;                                    &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/motion.div&gt;&#10;                    ))}&#10;                &lt;/div&gt;&#10;            &lt;/motion.div&gt;&#10;        &lt;/motion.div&gt;&#10;    );&#10;};&#10;&#10;// ====================== MAIN COMPONENT (MANTENDO TODA ESTRUTURA ORIGINAL + MELHORIAS) ======================&#10;const UltraAdvancedChartsTab: React.FC&lt;ChartsTabProps&gt; = React.memo(({ portfolios, rawInvestments }) =&gt; {&#10;    // Estados originais mantidos&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [selectedView, setSelectedView] = useState&lt;'overview' | 'performance' | 'allocation' | 'income' | 'risk'&gt;('overview');&#10;    const [timeRange, setTimeRange] = useState&lt;'1M' | '3M' | '6M' | '1Y' | 'ALL'&gt;('1Y');&#10;    const [showAdvancedMetrics, setShowAdvancedMetrics] = useState(false);&#10;    const [explanation, setExplanation] = useState&lt;{title: string, content: string, isLoading: boolean}&gt;({title: '', content: '', isLoading: false});&#10;    const [isExplaining, setIsExplaining] = useState&lt;string&gt;('');&#10;    const [benchmarkData, setBenchmarkData] = useState&lt;BenchmarkData[]&gt;([]);&#10;    const [loadingBenchmarks, setLoadingBenchmarks] = useState&lt;boolean&gt;(false);&#10;    const [visibleIndices, setVisibleIndices] = useState&lt;Record&lt;string, boolean&gt;&gt;({&#10;        rentabilidadePonderada: true,&#10;        IPCA: true,&#10;        CDI: true,&#10;        IBOV: true,&#10;        SMLL: true,&#10;        SPX: true,&#10;        IDIV: true,&#10;        IVVB11: true&#10;    });&#10;    const [weightedReturnPeriod, setWeightedReturnPeriod] = useState&lt;'DESDE_INICIO' | 'ANO_ATUAL' | '12_MESES' | '5_ANOS' | '10_ANOS'&gt;('DESDE_INICIO');&#10;    const [weightedReturnAssetType, setWeightedReturnAssetType] = useState&lt;'TODOS' | 'ACOES' | 'FIIS' | 'STOCKS' | 'ETFS' | 'TESOURO'&gt;('TODOS');&#10;&#10;    // Novos estados para funcionalidades avançadas&#10;    const [filter, setFilter] = useState&lt;ChartFilter&gt;({&#10;        assetTypes: [],&#10;        specificAssets: [],&#10;        comparison: 'none',&#10;        selectedBenchmarks: [],&#10;        showOnlyPositive: false,&#10;        showOnlyNegative: false,&#10;        showOnlyWithDividends: false,&#10;        minValue: 0,&#10;        maxValue: Infinity&#10;    });&#10;&#10;    const [drillDown, setDrillDown] = useState&lt;DrillDownState&gt;({&#10;        isActive: false,&#10;        level: 'portfolio',&#10;        title: '',&#10;        data: []&#10;    });&#10;&#10;    useEffect(() =&gt; {&#10;        const timer = setTimeout(() =&gt; setIsLoading(false), 800);&#10;        return () =&gt; clearTimeout(timer);&#10;    }, []);&#10;&#10;    // Carregar dados de benchmark quando selecionados&#10;    useEffect(() =&gt; {&#10;        const loadBenchmarkData = async () =&gt; {&#10;            if (filter.selectedBenchmarks.length === 0) {&#10;                setBenchmarkData([]);&#10;                return;&#10;            }&#10;&#10;            setLoadingBenchmarks(true);&#10;            try {&#10;                const data = await benchmarkService.fetchMultipleBenchmarks(filter.selectedBenchmarks);&#10;                setBenchmarkData(data);&#10;            } catch (error) {&#10;                console.error('Error loading benchmark data:', error);&#10;                setBenchmarkData([]);&#10;            } finally {&#10;                setLoadingBenchmarks(false);&#10;            }&#10;        };&#10;&#10;        loadBenchmarkData();&#10;    }, [filter.selectedBenchmarks]);&#10;&#10;    // Função para alternar visibilidade dos índices&#10;    const toggleIndexVisibility = useCallback((indexKey: string) =&gt; {&#10;        setVisibleIndices(prev =&gt; ({&#10;            ...prev,&#10;            [indexKey]: !prev[indexKey]&#10;        }));&#10;    }, []);&#10;&#10;    // Função de filtro aprimorada&#10;    const filteredPortfolios = useMemo(() =&gt; {&#10;        return portfolios.filter(p =&gt; {&#10;            const type = getAssetType(p.ticker, p.metadata);&#10;            const ticker = p.ticker;&#10;            const value = p.marketValue ?? p.totalInvested ?? 0;&#10;            const rentab = p.profitPercent ?? 0;&#10;&#10;            // 1. Filtro por tipo de ativo&#10;            if (filter.assetTypes.length &gt; 0 &amp;&amp; !filter.assetTypes.includes(type)) {&#10;                return false;&#10;            }&#10;&#10;            // 2. Filtro por ativos específicos&#10;            if (filter.specificAssets.length &gt; 0 &amp;&amp; !filter.specificAssets.includes(ticker)) {&#10;                return false;&#10;            }&#10;&#10;            // 3. Filtro por faixa de valor&#10;            if (value &lt; filter.minValue || value &gt; filter.maxValue) {&#10;                return false;&#10;            }&#10;&#10;            // 4. Filtro apenas lucro&#10;            if (filter.showOnlyPositive &amp;&amp; rentab &lt;= 0) {&#10;                return false;&#10;            }&#10;&#10;            // 5. Filtro apenas prejuízo&#10;            if (filter.showOnlyNegative &amp;&amp; rentab &gt;= 0) {&#10;                return false;&#10;            }&#10;&#10;            // 6. Filtro apenas ativos com proventos&#10;            if (filter.showOnlyWithDividends) {&#10;                const hasDividends = (p.totalDividends ?? 0) &gt; 0 || (p.totalJuros ?? 0) &gt; 0;&#10;                if (!hasDividends) {&#10;                    return false;&#10;                }&#10;            }&#10;&#10;            return true;&#10;        });&#10;    }, [portfolios, filter]);&#10;&#10;    // Cálculos corrigidos para separar ganho de capital de renda&#10;    const mainMetrics = useMemo(() =&gt; {&#10;        const totalInvested = filteredPortfolios.reduce((sum, p) =&gt; sum + Number(p.totalInvested || 0), 0);&#10;        const totalMarketValue = filteredPortfolios.reduce((sum, p) =&gt; sum + Number(p.marketValue || p.totalInvested || 0), 0);&#10;        const totalDividends = filteredPortfolios.reduce((sum, p) =&gt; sum + Number(p.totalDividends || 0), 0);&#10;        const totalJuros = filteredPortfolios.reduce((sum, p) =&gt; sum + Number(p.totalJuros || 0), 0);&#10;        &#10;        const totalIncome = totalDividends + totalJuros;&#10;        const capitalGain = totalMarketValue - totalInvested; // apenas variação de preço&#10;        const totalGain = capitalGain + totalIncome; // preço + proventos&#10;        &#10;        const roiCapitalGain = totalInvested &gt; 0 ? (capitalGain / totalInvested) * 100 : 0;&#10;        const roiTotal = totalInvested &gt; 0 ? (totalGain / totalInvested) * 100 : 0;&#10;        const monthlyIncome = totalIncome / 12;&#10;&#10;        return {&#10;            totalInvested,&#10;            totalMarketValue,&#10;            totalDividends,&#10;            totalJuros,&#10;            totalIncome,&#10;            capitalGain,&#10;            totalProfit: totalGain, // mantém nome para compatibilidade&#10;            roi: roiTotal, // ROI total (capital + renda)&#10;            roiCapitalGain,&#10;            roiTotal,&#10;            monthlyIncome,&#10;            assetCount: filteredPortfolios.length&#10;        };&#10;    }, [filteredPortfolios]);&#10;&#10;    // Todos os dados de gráficos originais mantidos&#10;    const allocationData = useMemo(() =&gt; {&#10;        const allocation: { [key: string]: number } = {};&#10;        let total = 0;&#10;&#10;        filteredPortfolios.forEach(p =&gt; {&#10;            const assetType = getAssetType(p.ticker, p.metadata);&#10;            if (!allocation[assetType]) allocation[assetType] = 0;&#10;            const value = Number(p.marketValue || p.totalInvested || 0);&#10;            if (value &gt; 0) {&#10;                allocation[assetType] += value;&#10;                total += value;&#10;            }&#10;        });&#10;&#10;        return Object.keys(allocation)&#10;            .filter(type =&gt; allocation[type] &gt; 0)&#10;            .map(type =&gt; ({&#10;                name: ASSET_TYPE_NAMES[type as keyof typeof ASSET_TYPE_NAMES] || type,&#10;                originalType: type,&#10;                value: allocation[type],&#10;                percentage: total &gt; 0 ? (allocation[type] / total) * 100 : 0,&#10;                fill: ASSET_TYPE_COLORS[type] || '#8884d8',&#10;            }))&#10;            .sort((a, b) =&gt; b.value - a.value);&#10;    }, [filteredPortfolios]);&#10;&#10;    const treeMapData = useMemo(() =&gt; {&#10;        const children = filteredPortfolios&#10;            .filter(p =&gt; (p.marketValue || p.totalInvested) &gt; 0)&#10;            .map(p =&gt; ({&#10;                name: p.ticker,&#10;                size: Math.abs(p.marketValue || p.totalInvested || 1),&#10;                performance: p.profitPercent || 0,&#10;                dividendYield: p.totalYield || 0,&#10;                sector: p.metadata?.setor || 'Outros',&#10;                asset: p&#10;            }))&#10;            .filter(item =&gt; item.size &gt; 0)&#10;            .sort((a, b) =&gt; b.size - a.size);&#10;&#10;        return children.length &gt; 0 ? { name: 'Portfolio', children } : null;&#10;    }, [filteredPortfolios]);&#10;&#10;    const performanceTimeline = useMemo(() =&gt; {&#10;        const monthlyData: { [key: string]: { invested: number; income: number; value: number } } = {};&#10;&#10;        if (rawInvestments &amp;&amp; rawInvestments.length &gt; 0) {&#10;            let cumulativeInvested = 0;&#10;            rawInvestments&#10;                .sort((a, b) =&gt; new Date(a.date).getTime() - new Date(b.date).getTime())&#10;                .forEach(inv =&gt; {&#10;                    const month = inv.date.substring(0, 7);&#10;                    if (!monthlyData[month]) {&#10;                        monthlyData[month] = { invested: 0, income: 0, value: 0 };&#10;                    }&#10;                    cumulativeInvested += (inv.compra * inv.valor_unit) - (inv.venda * inv.valor_unit);&#10;                    monthlyData[month].invested = cumulativeInvested;&#10;                    monthlyData[month].income += (inv.dividendos || 0) + (inv.juros || 0);&#10;                });&#10;        }&#10;&#10;        const currentMonthKey = new Date().toISOString().substring(0, 7);&#10;        if (!monthlyData[currentMonthKey]) {&#10;            monthlyData[currentMonthKey] = { invested: mainMetrics.totalInvested, income: 0, value: mainMetrics.totalMarketValue };&#10;        } else {&#10;            monthlyData[currentMonthKey].value = mainMetrics.totalMarketValue;&#10;            monthlyData[currentMonthKey].invested = mainMetrics.totalInvested;&#10;        }&#10;&#10;        const allMonths = Object.entries(monthlyData)&#10;            .map(([month, data]) =&gt; ({&#10;                month,&#10;                monthLabel: new Date(month + '-02').toLocaleDateString('pt-BR', { month: 'short', year: 'numeric' }),&#10;                invested: data.invested,&#10;                value: data.value,&#10;                income: data.income,&#10;                profit: 0, // será calculado após forward fill&#10;            }))&#10;            .sort((a, b) =&gt; a.month.localeCompare(b.month));&#10;&#10;        // Forward fill: preenche valores ausentes com o último valor conhecido&#10;        let lastValue = 0;&#10;        allMonths.forEach(month =&gt; {&#10;            lastValue = month.value || lastValue;&#10;            month.value = lastValue;&#10;            month.profit = month.value - month.invested;&#10;        });&#10;&#10;        const getMonths = (n: number) =&gt; allMonths.slice(-n);&#10;        switch (timeRange) {&#10;            case '1M': return getMonths(2);&#10;            case '3M': return getMonths(4);&#10;            case '6M': return getMonths(7);&#10;            case '1Y': return getMonths(13);&#10;            case 'ALL': default: return allMonths;&#10;        }&#10;    }, [rawInvestments, mainMetrics, timeRange]);&#10;&#10;    // Dados de comparação com benchmarks&#10;    const benchmarkComparison = useMemo(() =&gt; {&#10;        if (benchmarkData.length === 0 || performanceTimeline.length === 0) return [];&#10;&#10;        const portfolioStartValue = performanceTimeline[0]?.invested || 1;&#10;        &#10;        return performanceTimeline.map(point =&gt; {&#10;            const portfolioReturn = ((point.value - portfolioStartValue) / portfolioStartValue) * 100;&#10;            const result: any = {&#10;                month: point.month,&#10;                monthLabel: point.monthLabel,&#10;                portfolio: portfolioReturn&#10;            };&#10;&#10;            // Adicionar cada benchmark selecionado&#10;            benchmarkData.forEach(benchmark =&gt; {&#10;                const benchmarkPoint = benchmark.data.find(b =&gt; b.date.substring(0, 7) === point.month);&#10;                if (benchmarkPoint &amp;&amp; benchmark.data[0]) {&#10;                    const benchmarkStartValue = benchmark.data[0].value || 1;&#10;                    const benchmarkReturn = ((benchmarkPoint.value - benchmarkStartValue) / benchmarkStartValue) * 100;&#10;                    result[benchmark.symbol] = benchmarkReturn;&#10;                }&#10;            });&#10;&#10;            return result;&#10;        });&#10;    }, [performanceTimeline, benchmarkData]);&#10;&#10;    // Dados de rentabilidade ponderada comparada com índices&#10;    const weightedReturnData = useMemo(() =&gt; {&#10;        // Filtrar portfólios por tipo de ativo se não for &quot;TODOS&quot;&#10;        let portfoliosToAnalyze = filteredPortfolios;&#10;        &#10;        if (weightedReturnAssetType !== 'TODOS') {&#10;            const assetTypeMap: Record&lt;string, CanonicalAssetType[]&gt; = {&#10;                'ACOES': ['ACAO'],&#10;                'FIIS': ['FII'],&#10;                'STOCKS': ['STOCK'],&#10;                'ETFS': ['ETF'],&#10;                'TESOURO': ['TESOURO_DIRETO']&#10;            };&#10;            &#10;            const allowedTypes = assetTypeMap[weightedReturnAssetType] || [];&#10;            portfoliosToAnalyze = filteredPortfolios.filter(p =&gt; &#10;                allowedTypes.includes(getAssetType(p.ticker, p.metadata))&#10;            );&#10;        }&#10;        &#10;        // Filtrar investimentos por tipo de ativo se não for &quot;TODOS&quot;&#10;        let investmentsToAnalyze = rawInvestments || [];&#10;        if (weightedReturnAssetType !== 'TODOS') {&#10;            const assetTypeMap: Record&lt;string, CanonicalAssetType[]&gt; = {&#10;                'ACOES': ['ACAO'],&#10;                'FIIS': ['FII'],&#10;                'STOCKS': ['STOCK'],&#10;                'ETFS': ['ETF'],&#10;                'TESOURO': ['TESOURO_DIRETO']&#10;            };&#10;            &#10;            const allowedTypes = assetTypeMap[weightedReturnAssetType] || [];&#10;            investmentsToAnalyze = (rawInvestments || []).filter(inv =&gt; {&#10;                const portfolio = portfoliosToAnalyze.find(p =&gt; p.ticker === inv.ticker);&#10;                return portfolio &amp;&amp; allowedTypes.includes(getAssetType(portfolio.ticker, portfolio.metadata));&#10;            });&#10;        }&#10;&#10;        const allData = WeightedReturnService.calculateWeightedReturn(investmentsToAnalyze, portfoliosToAnalyze);&#10;        &#10;        // Filtrar por período&#10;        if (weightedReturnPeriod === 'ANO_ATUAL') {&#10;            const currentYear = new Date().getFullYear();&#10;            return allData.filter(point =&gt; point.date.startsWith(currentYear.toString()));&#10;        } else if (weightedReturnPeriod === '12_MESES') {&#10;            return allData.slice(-12);&#10;        } else if (weightedReturnPeriod === '5_ANOS') {&#10;            return allData.slice(-60); // 5 anos * 12 meses&#10;        } else if (weightedReturnPeriod === '10_ANOS') {&#10;            return allData.slice(-120); // 10 anos * 12 meses&#10;        }&#10;        &#10;        return allData; // DESDE_INICIO&#10;    }, [rawInvestments, filteredPortfolios, weightedReturnPeriod, weightedReturnAssetType]);&#10;&#10;    const weightedReturnComparison = useMemo(() =&gt; {&#10;        if (weightedReturnData.length === 0) return [];&#10;&#10;        // Configuração das cores específicas para cada índice&#10;        const indexColors = {&#10;            'IPCA': '#eab308',      // amarelo&#10;            'CDI': '#f97316',       // laranja&#10;            'IBOV': '#ef4444',      // vermelho&#10;            'SMLL': '#06b6d4',      // azul claro&#10;            'SPX': '#10b981',       // verde&#10;            'IDIV': '#fb923c',      // laranja claro&#10;            'IVVB11': '#8b5cf6'     // roxo&#10;        };&#10;&#10;        return weightedReturnData.map(point =&gt; {&#10;            const result: any = {&#10;                date: point.date,&#10;                monthLabel: point.monthLabel,&#10;                rentabilidadePonderada: point.weightedReturn&#10;            };&#10;&#10;            // Adicionar dados simulados de cada índice&#10;            const monthIndex = weightedReturnData.indexOf(point);&#10;            result.IPCA = WeightedReturnService.simulateBenchmarkReturn('IPCA', monthIndex);&#10;            result.CDI = WeightedReturnService.simulateBenchmarkReturn('CDI', monthIndex);&#10;            result.IBOV = WeightedReturnService.simulateBenchmarkReturn('IBOV', monthIndex);&#10;            result.SMLL = WeightedReturnService.simulateBenchmarkReturn('SMLL', monthIndex);&#10;            result.SPX = WeightedReturnService.simulateBenchmarkReturn('SPX', monthIndex);&#10;            result.IDIV = WeightedReturnService.simulateBenchmarkReturn('IDIV', monthIndex);&#10;            result.IVVB11 = WeightedReturnService.simulateBenchmarkReturn('IVVB11', monthIndex);&#10;&#10;            return result;&#10;        });&#10;    }, [weightedReturnData]);&#10;&#10;    const riskAnalysis = useMemo(() =&gt; {&#10;        const sectors = filteredPortfolios.reduce((acc, p) =&gt; {&#10;            const sector = p.metadata?.setor || 'Outros';&#10;            if (!acc[sector]) acc[sector] = 0;&#10;            acc[sector] += p.marketValue || p.totalInvested || 0;&#10;            return acc;&#10;        }, {} as Record&lt;string, number&gt;);&#10;&#10;        const totalValue = Object.values(sectors).reduce((sum, val) =&gt; sum + val, 0);&#10;        const sectorCount = Object.keys(sectors).length;&#10;        const diversificationScore = Math.min((sectorCount / 10) * 100, 100);&#10;&#10;        return {&#10;            diversificationScore,&#10;            sectorDistribution: Object.entries(sectors).map(([sector, value]) =&gt; ({&#10;                sector,&#10;                value,&#10;                percentage: totalValue &gt; 0 ? (value / totalValue) * 100 : 0&#10;            })),&#10;            riskLevel: diversificationScore &gt; 70 ? 'Baixo' : diversificationScore &gt; 40 ? 'Médio' : 'Alto'&#10;        };&#10;    }, [filteredPortfolios]);&#10;&#10;    const topPerformers = useMemo(() =&gt; {&#10;        return filteredPortfolios&#10;            .map(p =&gt; ({&#10;                ticker: p.ticker,&#10;                name: p.metadata?.nome || p.ticker,&#10;                profit: p.profit || 0,&#10;                profitPercent: p.profitPercent || 0,&#10;                dividendYield: p.totalYield || 0,&#10;                totalIncome: (p.totalDividends || 0) + (p.totalJuros || 0),&#10;                asset: p&#10;            }))&#10;            .sort((a, b) =&gt; b.profitPercent - a.profitPercent)&#10;            .slice(0, 10);&#10;    }, [filteredPortfolios]);&#10;&#10;    // Handlers para drill-down&#10;    const handleAssetTypeClick = useCallback((assetType: string) =&gt; {&#10;        setDrillDown({&#10;            isActive: true,&#10;            level: 'assetType',&#10;            selectedAssetType: assetType,&#10;            title: `Análise de ${ASSET_TYPE_NAMES[assetType as keyof typeof ASSET_TYPE_NAMES] || assetType}`,&#10;            data: []&#10;        });&#10;    }, []);&#10;&#10;    const handleAssetClick = useCallback((asset: Portfolio) =&gt; {&#10;        setDrillDown({&#10;            isActive: true,&#10;            level: 'individual',&#10;            selectedAsset: asset.ticker,&#10;            title: `Análise Individual: ${asset.ticker}`,&#10;            data: []&#10;        });&#10;    }, []);&#10;&#10;    const handleBackToDashboard = useCallback(() =&gt; {&#10;        setDrillDown({&#10;            isActive: false,&#10;            level: 'portfolio',&#10;            title: '',&#10;            data: []&#10;        });&#10;    }, []);&#10;&#10;    // Handler para filtros rápidos&#10;    const handleQuickFilter = useCallback((filterType: string) =&gt; {&#10;        const resetBase = { specificAssets: [], showOnlyPositive: false, showOnlyNegative: false, showOnlyWithDividends: false };&#10;        &#10;        if (QUICK_FILTER_MAP[filterType]) {&#10;            setFilter(prev =&gt; ({ &#10;                ...prev, &#10;                assetTypes: QUICK_FILTER_MAP[filterType], &#10;                ...resetBase &#10;            }));&#10;        } else {&#10;            switch (filterType) {&#10;                case 'proventos':&#10;                    setFilter(prev =&gt; ({ ...prev, assetTypes: [], showOnlyWithDividends: true, showOnlyPositive: false, showOnlyNegative: false, specificAssets: [] }));&#10;                    break;&#10;                case 'lucro':&#10;                    setFilter(prev =&gt; ({ ...prev, assetTypes: [], showOnlyPositive: true, showOnlyNegative: false, showOnlyWithDividends: false, specificAssets: [] }));&#10;                    break;&#10;                case 'prejuizo':&#10;                    setFilter(prev =&gt; ({ ...prev, assetTypes: [], showOnlyPositive: false, showOnlyNegative: true, showOnlyWithDividends: false, specificAssets: [] }));&#10;                    break;&#10;                case 'todos':&#10;                    setFilter(prev =&gt; ({ ...prev, assetTypes: [], ...resetBase }));&#10;                    break;&#10;            }&#10;        }&#10;    }, []);&#10;&#10;    // Função original de explicação mantida&#10;    const handleExplainChart = async (chartTitle: string, chartData: any, chartId: string) =&gt; {&#10;        setIsExplaining(chartId);&#10;        setExplanation({ title: chartTitle, content: '', isLoading: true });&#10;&#10;        try {&#10;            const result = await voiceService.getChartExplanation(chartTitle, chartData);&#10;            if (result) {&#10;                setExplanation({ title: chartTitle, content: result.text, isLoading: false });&#10;            } else {&#10;                setExplanation({&#10;                    title: chartTitle,&#10;                    content: 'Ocorreu um erro ao gerar a explicação. Por favor, tente novamente mais tarde.',&#10;                    isLoading: false&#10;                });&#10;            }&#10;        } catch (error) {&#10;            console.error('Erro ao explicar gráfico:', error);&#10;            setExplanation({&#10;                title: chartTitle,&#10;                content: 'Erro interno. Verifique sua conexão e tente novamente.',&#10;                isLoading: false&#10;            });&#10;        } finally {&#10;            setIsExplaining('');&#10;        }&#10;    };&#10;&#10;    const closeExplanation = () =&gt; {&#10;        setExplanation({title: '', content: '', isLoading: false});&#10;        voiceService.stopAudio();&#10;    };&#10;&#10;    // Enhanced loading component&#10;    const UltraPremiumLoading = () =&gt; (&#10;        &lt;div className=&quot;flex items-center justify-center h-96&quot;&gt;&#10;            &lt;motion.div className=&quot;relative&quot;&gt;&#10;                &lt;motion.div&#10;                    animate={{ rotate: 360 }}&#10;                    transition={{ duration: 2, repeat: Infinity, ease: &quot;linear&quot; }}&#10;                    className=&quot;w-24 h-24 border-4 border-transparent border-t-indigo-600 border-r-purple-600 rounded-full&quot;&#10;                /&gt;&#10;                &lt;motion.div&#10;                    animate={{ rotate: -360 }}&#10;                    transition={{ duration: 3, repeat: Infinity, ease: &quot;linear&quot; }}&#10;                    className=&quot;absolute inset-2 w-16 h-16 border-4 border-transparent border-t-green-500 border-l-blue-500 rounded-full&quot;&#10;                /&gt;&#10;                &lt;Zap className=&quot;h-8 w-8 text-indigo-600 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2&quot; /&gt;&#10;            &lt;/motion.div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;&#10;    // Componentes de botão explicação mantidos&#10;    const ExplainButton: React.FC&lt;{ onClick: () =&gt; void; isLoading?: boolean }&gt; = ({ onClick, isLoading = false }) =&gt; (&#10;        &lt;motion.button&#10;            whileHover={{ scale: 1.1 }}&#10;            whileTap={{ scale: 0.9 }}&#10;            onClick={onClick}&#10;            disabled={isLoading}&#10;            className=&quot;text-yellow-400 hover:text-yellow-300 transition-colors p-2 rounded-full bg-yellow-500/20 hover:bg-yellow-500/30 disabled:opacity-50&quot;&#10;            title=&quot;Explicar com IA&quot;&#10;        &gt;&#10;            {isLoading ? (&#10;                &lt;Loader className=&quot;h-5 w-5 animate-spin&quot; /&gt;&#10;            ) : (&#10;                &lt;Sparkles className=&quot;h-5 w-5 animate-pulse&quot; /&gt;&#10;            )}&#10;        &lt;/motion.button&gt;&#10;    );&#10;&#10;    if (isLoading) {&#10;        return &lt;UltraPremiumLoading /&gt;;&#10;    }&#10;&#10;    if (!portfolios || portfolios.length === 0) {&#10;        return (&#10;            &lt;motion.div className=&quot;flex flex-col items-center justify-center py-24&quot;&gt;&#10;                &lt;PieChartIcon className=&quot;h-32 w-32 text-gray-600 mb-8&quot; /&gt;&#10;                &lt;h3 className=&quot;text-2xl font-bold text-gray-300 mb-2&quot;&gt;Nenhum dado disponível&lt;/h3&gt;&#10;                &lt;p className=&quot;text-gray-500 text-center max-w-md&quot;&gt;&#10;                    Adicione investimentos para visualizar análises ultra-avançadas e insights profissionais.&#10;                &lt;/p&gt;&#10;            &lt;/motion.div&gt;&#10;        );&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-6 p-4&quot;&gt;&#10;            {/* Modal de explicação original mantido */}&#10;            &lt;AnimatePresence&gt;&#10;                {(explanation.isLoading || explanation.content) &amp;&amp; (&#10;                    &lt;motion.div&#10;                        initial={{ opacity: 0 }}&#10;                        animate={{ opacity: 1 }}&#10;                        exit={{ opacity: 0 }}&#10;                        className=&quot;fixed inset-0 bg-black/60 backdrop-blur-md z-50 flex items-center justify-center p-4&quot;&#10;                        onClick={closeExplanation}&#10;                    &gt;&#10;                        &lt;motion.div&#10;                            initial={{ y: -50, opacity: 0 }}&#10;                            animate={{ y: 0, opacity: 1 }}&#10;                            exit={{ y: 50, opacity: 0 }}&#10;                            className=&quot;bg-gray-900 border border-gray-700 rounded-2xl p-8 max-w-4xl w-full max-h-[80vh] overflow-y-auto shadow-2xl relative&quot;&#10;                            onClick={(e) =&gt; e.stopPropagation()}&#10;                        &gt;&#10;                            &lt;button&#10;                                onClick={closeExplanation}&#10;                                className=&quot;absolute top-4 right-4 text-gray-500 hover:text-white transition-colors&quot;&#10;                            &gt;&#10;                                &lt;X className=&quot;h-6 w-6&quot; /&gt;&#10;                            &lt;/button&gt;&#10;&#10;                            &lt;div className=&quot;flex items-center gap-4 mb-6&quot;&gt;&#10;                                &lt;div className=&quot;p-3 bg-indigo-600/10 rounded-xl&quot;&gt;&#10;                                    &lt;Sparkles className=&quot;h-6 w-6 text-indigo-400&quot; /&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;h2 className=&quot;text-2xl font-bold text-white&quot;&gt;{explanation.title}&lt;/h2&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            {explanation.isLoading ? (&#10;                                &lt;div className=&quot;flex flex-col items-center justify-center h-48&quot;&gt;&#10;                                    &lt;Loader className=&quot;h-12 w-12 text-indigo-500 animate-spin mb-4&quot; /&gt;&#10;                                    &lt;p className=&quot;text-gray-400&quot;&gt;Nossa IA está analisando os dados...&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                            ) : (&#10;                                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                                    &lt;div className=&quot;text-gray-300 leading-relaxed prose prose-invert max-w-none&quot;&gt;&#10;                                        &lt;pre className=&quot;whitespace-pre-wrap font-sans&quot;&gt;{explanation.content}&lt;/pre&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;div className=&quot;flex items-center gap-4 p-4 bg-gray-800/50 rounded-xl border border-gray-700/50&quot;&gt;&#10;                                        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                            &lt;Volume2 className=&quot;h-5 w-5 text-gray-400&quot; /&gt;&#10;                                            &lt;span className=&quot;text-gray-400 text-sm&quot;&gt;Áudio:&lt;/span&gt;&#10;                                        &lt;/div&gt;&#10;&#10;                                        &lt;motion.button&#10;                                            whileHover={{ scale: 1.05 }}&#10;                                            whileTap={{ scale: 0.95 }}&#10;                                            onClick={() =&gt; voiceService.playTextAudio(explanation.content)}&#10;                                            disabled={voiceService.isAudioPlaying}&#10;                                            className=&quot;flex items-center gap-2 px-4 py-2 bg-green-600/20 hover:bg-green-600/30 text-green-400 rounded-lg transition-all disabled:opacity-50&quot;&#10;                                        &gt;&#10;                                            &lt;Play className=&quot;h-4 w-4&quot; /&gt;&#10;                                            {voiceService.isAudioPlaying ? 'Reproduzindo...' : 'Ouvir Explicação'}&#10;                                        &lt;/motion.button&gt;&#10;&#10;                                        {voiceService.isAudioPlaying &amp;&amp; (&#10;                                            &lt;motion.button&#10;                                                whileHover={{ scale: 1.05 }}&#10;                                                whileTap={{ scale: 0.95 }}&#10;                                                onClick={() =&gt; voiceService.stopAudio()}&#10;                                                className=&quot;flex items-center gap-2 px-4 py-2 bg-red-600/20 hover:bg-red-600/30 text-red-400 rounded-lg transition-all&quot;&#10;                                            &gt;&#10;                                                &lt;VolumeX className=&quot;h-4 w-4&quot; /&gt;&#10;                                                Parar&#10;                                            &lt;/motion.button&gt;&#10;                                        )}&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            )}&#10;                        &lt;/motion.div&gt;&#10;                    &lt;/motion.div&gt;&#10;                )}&#10;            &lt;/AnimatePresence&gt;&#10;&#10;            {/* Sistema de Drill-Down */}&#10;            &lt;AnimatePresence mode=&quot;wait&quot;&gt;&#10;                {drillDown.isActive ? (&#10;                    &lt;&gt;&#10;                        {drillDown.level === 'assetType' &amp;&amp; drillDown.selectedAssetType &amp;&amp; (&#10;                            &lt;AssetTypeAnalysis&#10;                                assetType={drillDown.selectedAssetType}&#10;                                portfolios={portfolios}&#10;                                onBack={handleBackToDashboard}&#10;                                onAssetClick={handleAssetClick}&#10;                            /&gt;&#10;                        )}&#10;                        {drillDown.level === 'individual' &amp;&amp; drillDown.selectedAsset &amp;&amp; (&#10;                            &lt;IndividualAssetAnalysis&#10;                                asset={portfolios.find(p =&gt; p.ticker === drillDown.selectedAsset)!}&#10;                                onBack={handleBackToDashboard}&#10;                                rawInvestments={rawInvestments}&#10;                            /&gt;&#10;                        )}&#10;                    &lt;/&gt;&#10;                ) : (&#10;                    &lt;motion.div&#10;                        key=&quot;main-dashboard&quot;&#10;                        initial={{ opacity: 0 }}&#10;                        animate={{ opacity: 1 }}&#10;                        exit={{ opacity: 0 }}&#10;                    &gt;&#10;                        {/* Header com navegação original mantido */}&#10;                        &lt;div className=&quot;flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4 mb-8&quot;&gt;&#10;                            &lt;div&gt;&#10;                                &lt;h2 className=&quot;text-4xl font-bold text-white mb-2 flex items-center gap-3&quot;&gt;&#10;                                    &lt;Cpu className=&quot;h-10 w-10 text-indigo-400&quot; /&gt;&#10;                                    Sistema Ultra-Avançado de Análise de Investimentos&#10;                                &lt;/h2&gt;&#10;                                &lt;p className=&quot;text-gray-400&quot;&gt;Dashboard profissional com drill-down inteligente e análises individualizadas&lt;/p&gt;&#10;                                &lt;p className=&quot;text-sm text-gray-500 mt-1&quot;&gt;&#10;                                    {filteredPortfolios.length} de {portfolios.length} ativos sendo analisados&#10;                                    {filter.assetTypes.length &gt; 0 || filter.specificAssets.length &gt; 0 || filter.showOnlyPositive || filter.showOnlyNegative || filter.showOnlyWithDividends ?&#10;                                        ' (filtros ativos)' : ''&#10;                                    }&#10;                                &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                                {[&#10;                                    { id: 'overview', label: 'Visão Geral', icon: &lt;Activity className=&quot;h-4 w-4&quot; /&gt; },&#10;                                    { id: 'performance', label: 'Performance', icon: &lt;TrendingUp className=&quot;h-4 w-4&quot; /&gt; },&#10;                                    { id: 'allocation', label: 'Alocação', icon: &lt;PieChartIcon className=&quot;h-4 w-4&quot; /&gt; },&#10;                                    { id: 'income', label: 'Renda', icon: &lt;DollarSign className=&quot;h-4 w-4&quot; /&gt; },&#10;                                    { id: 'risk', label: 'Risco', icon: &lt;Shield className=&quot;h-4 w-4&quot; /&gt; }&#10;                                ].map(view =&gt; (&#10;                                    &lt;motion.button&#10;                                        key={view.id}&#10;                                        whileHover={{ scale: 1.05 }}&#10;                                        whileTap={{ scale: 0.95 }}&#10;                                        onClick={() =&gt; setSelectedView(view.id as any)}&#10;                                        className={`flex items-center gap-2 px-4 py-2 rounded-xl font-medium transition-all ${&#10;                                            selectedView === view.id&#10;                                                ? 'bg-gradient-to-r from-indigo-600 to-purple-600 text-white shadow-lg'&#10;                                                : 'bg-gray-800/50 text-gray-300 hover:bg-gray-700/50'&#10;                                        }`}&#10;                                    &gt;&#10;                                        {view.icon}&#10;                                        &lt;span&gt;{view.label}&lt;/span&gt;&#10;                                    &lt;/motion.button&gt;&#10;                                ))}&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        {/* Filtros Ultra-Avançados */}&#10;                        &lt;SuperAdvancedFilters&#10;                            filter={filter}&#10;                            setFilter={setFilter}&#10;                            portfolios={portfolios}&#10;                            onQuickFilter={handleQuickFilter}&#10;                            benchmarkData={benchmarkData}&#10;                            loadingBenchmarks={loadingBenchmarks}&#10;                        /&gt;&#10;&#10;                        {/* Métricas principais aprimoradas */}&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8&quot;&gt;&#10;                            &lt;EnhancedMetricCard&#10;                                title=&quot;Valor Total&quot;&#10;                                value={`R$ ${mainMetrics.totalMarketValue.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`}&#10;                                change={mainMetrics.roi}&#10;                                icon={&lt;DollarSign className=&quot;h-6 w-6 text-white&quot; /&gt;}&#10;                                color=&quot;from-indigo-600 to-purple-600&quot;&#10;                                subtitle={`${mainMetrics.assetCount} ativos analisados`}&#10;                            /&gt;&#10;                            &lt;EnhancedMetricCard&#10;                                title=&quot;Lucro Total&quot;&#10;                                value={`R$ ${mainMetrics.totalProfit.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`}&#10;                                change={mainMetrics.roi}&#10;                                icon={&lt;TrendingUp className=&quot;h-6 w-6 text-white&quot; /&gt;}&#10;                                color={mainMetrics.totalProfit &gt;= 0 ? &quot;from-green-600 to-emerald-600&quot; : &quot;from-red-600 to-pink-600&quot;}&#10;                                subtitle={`ROI: ${mainMetrics.roi.toFixed(2)}%`}&#10;                            /&gt;&#10;                            &lt;EnhancedMetricCard&#10;                                title=&quot;Renda Passiva&quot;&#10;                                value={`R$ ${mainMetrics.totalIncome.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`}&#10;                                icon={&lt;Award className=&quot;h-6 w-6 text-white&quot; /&gt;}&#10;                                color=&quot;from-amber-600 to-orange-600&quot;&#10;                                subtitle={`Média: R$ ${mainMetrics.monthlyIncome.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}/mês`}&#10;                            /&gt;&#10;                            &lt;EnhancedMetricCard&#10;                                title=&quot;Score de Diversificação&quot;&#10;                                value={`${riskAnalysis.diversificationScore.toFixed(0)}%`}&#10;                                icon={&lt;Shield className=&quot;h-6 w-6 text-white&quot; /&gt;}&#10;                                color=&quot;from-cyan-600 to-blue-600&quot;&#10;                                subtitle={`Risco: ${riskAnalysis.riskLevel}`}&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        {/* Todo o conteúdo original das views mantido com cliques interativos */}&#10;                        &lt;AnimatePresence mode=&quot;wait&quot;&gt;&#10;                            {selectedView === 'overview' &amp;&amp; (&#10;                                &lt;motion.div&#10;                                    key=&quot;overview&quot;&#10;                                    initial={{ opacity: 0, y: 20 }}&#10;                                    animate={{ opacity: 1, y: 0 }}&#10;                                    exit={{ opacity: 0, y: -20 }}&#10;                                    className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-6&quot;&#10;                                &gt;&#10;                                    {/* Gráfico de Pizza INTERATIVO */}&#10;                                    &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                                        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                                            &lt;h3 className=&quot;text-xl font-bold text-white flex items-center gap-2&quot;&gt;&#10;                                                &lt;PieChartIcon className=&quot;h-5 w-5 text-indigo-400&quot; /&gt;&#10;                                                Alocação por Tipo de Ativo&#10;                                                &lt;span className=&quot;text-sm text-gray-400 font-normal&quot;&gt;&#10;                                                    (Clique para drill-down)&#10;                                                &lt;/span&gt;&#10;                                            &lt;/h3&gt;&#10;                                            &lt;ExplainButton&#10;                                                onClick={() =&gt; handleExplainChart('Alocação por Tipo de Ativo', allocationData, 'allocation-pie')}&#10;                                                isLoading={isExplaining === 'allocation-pie'}&#10;                                            /&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div className=&quot;h-96&quot;&gt;&#10;                                            &lt;ResponsiveContainer&gt;&#10;                                                &lt;PieChart&gt;&#10;                                                    &lt;Pie&#10;                                                        data={allocationData}&#10;                                                        cx=&quot;50%&quot;&#10;                                                        cy=&quot;50%&quot;&#10;                                                        labelLine={false}&#10;                                                        label={({ name, percentage }) =&gt; `${name} ${percentage.toFixed(1)}%`}&#10;                                                        outerRadius={120}&#10;                                                        fill=&quot;#8884d8&quot;&#10;                                                        dataKey=&quot;value&quot;&#10;                                                        onClick={(data) =&gt; handleAssetTypeClick(data.originalType)}&#10;                                                        style={{ cursor: 'pointer' }}&#10;                                                    &gt;&#10;                                                        {allocationData.map((entry, index) =&gt; (&#10;                                                            &lt;Cell key={`cell-${index}`} fill={entry.fill} /&gt;&#10;                                                        ))}&#10;                                                    &lt;/Pie&gt;&#10;                                                    &lt;Tooltip content={&lt;UltraPremiumTooltip /&gt;} /&gt;&#10;                                                &lt;/PieChart&gt;&#10;                                            &lt;/ResponsiveContainer&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/motion.div&gt;&#10;&#10;                                    {/* TreeMap INTERATIVO */}&#10;                                    &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                                        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                                            &lt;h3 className=&quot;text-xl font-bold text-white flex items-center gap-2&quot;&gt;&#10;                                                &lt;BarChart3 className=&quot;h-5 w-5 text-purple-400&quot; /&gt;&#10;                                                Mapa de Calor do Portfólio&#10;                                                &lt;span className=&quot;text-sm text-gray-400 font-normal&quot;&gt;&#10;                                                    (Clique nos ativos)&#10;                                                &lt;/span&gt;&#10;                                            &lt;/h3&gt;&#10;                                            &lt;ExplainButton&#10;                                                onClick={() =&gt; handleExplainChart('Mapa de Calor do Portfólio', treeMapData, 'treemap')}&#10;                                                isLoading={isExplaining === 'treemap'}&#10;                                            /&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div className=&quot;h-96&quot;&gt;&#10;                                            {treeMapData &amp;&amp; treeMapData.children.length &gt; 0 ? (&#10;                                                &lt;ResponsiveContainer&gt;&#10;                                                    &lt;Treemap&#10;                                                        data={[treeMapData]}&#10;                                                        dataKey=&quot;size&quot;&#10;                                                        aspectRatio={4/3}&#10;                                                        stroke=&quot;#fff&quot;&#10;                                                        fill=&quot;#6366f1&quot;&#10;                                                        content={(props: any) =&gt; {&#10;                                                            const { x, y, width, height, value } = props;&#10;                                                            const item = treeMapData?.children?.find((child: any) =&gt; child.size === value);&#10;                                                            if (!item) return null;&#10;&#10;                                                            const name = item.name || '';&#10;                                                            const performance = item.performance || 0;&#10;                                                            const fontSize = Math.max(10, Math.min(width / Math.max(name.length, 1) * 1.5, 20));&#10;                                                            const color = performance &gt;= 0 ? '#10b981' : '#ef4444';&#10;&#10;                                                            return (&#10;                                                                &lt;g&#10;                                                                    onClick={() =&gt; handleAssetClick(item.asset)}&#10;                                                                    style={{ cursor: 'pointer' }}&#10;                                                                &gt;&#10;                                                                    &lt;rect&#10;                                                                        x={x}&#10;                                                                        y={y}&#10;                                                                        width={width}&#10;                                                                        height={height}&#10;                                                                        style={{&#10;                                                                            fill: color,&#10;                                                                            fillOpacity: 0.7,&#10;                                                                            stroke: '#1f2937',&#10;                                                                            strokeWidth: 2,&#10;                                                                            strokeOpacity: 1,&#10;                                                                        }}&#10;                                                                    /&gt;&#10;                                                                    {width &gt; 60 &amp;&amp; height &gt; 40 &amp;&amp; (&#10;                                                                        &lt;&gt;&#10;                                                                            &lt;text&#10;                                                                                x={x + width / 2}&#10;                                                                                y={y + height / 2 - 8}&#10;                                                                                textAnchor=&quot;middle&quot;&#10;                                                                                fill=&quot;#fff&quot;&#10;                                                                                fontSize={fontSize}&#10;                                                                                fontWeight=&quot;bold&quot;&#10;                                                                            &gt;&#10;                                                                                {name}&#10;                                                                            &lt;/text&gt;&#10;                                                                            &lt;text&#10;                                                                                x={x + width / 2}&#10;                                                                                y={y + height / 2 + 10}&#10;                                                                                textAnchor=&quot;middle&quot;&#10;                                                                                fill=&quot;#fff&quot;&#10;                                                                                fontSize={fontSize * 0.8}&#10;                                                                            &gt;&#10;                                                                                {performance &gt;= 0 ? '+' : ''}{performance.toFixed(1)}%&#10;                                                                            &lt;/text&gt;&#10;                                                                        &lt;/&gt;&#10;                                                                    )}&#10;                                                                &lt;/g&gt;&#10;                                                            );&#10;                                                        }}&#10;                                                    /&gt;&#10;                                                &lt;/ResponsiveContainer&gt;&#10;                                            ) : (&#10;                                                &lt;div className=&quot;flex items-center justify-center h-full text-gray-400&quot;&gt;&#10;                                                    &lt;p&gt;Nenhum dado disponível para o mapa de calor&lt;/p&gt;&#10;                                                &lt;/div&gt;&#10;                                            )}&#10;                                        &lt;/div&gt;&#10;                                    &lt;/motion.div&gt;&#10;&#10;                                    {/* Top Performers INTERATIVO */}&#10;                                    &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50 lg:col-span-2&quot;&gt;&#10;                                        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                                            &lt;h3 className=&quot;text-xl font-bold text-white flex items-center gap-2&quot;&gt;&#10;                                                &lt;Trophy className=&quot;h-5 w-5 text-yellow-400&quot; /&gt;&#10;                                                Top Performers&#10;                                                &lt;span className=&quot;text-sm text-gray-400 font-normal&quot;&gt;&#10;                                                    (Clique para análise individual)&#10;                                                &lt;/span&gt;&#10;                                            &lt;/h3&gt;&#10;                                            &lt;ExplainButton&#10;                                                onClick={() =&gt; handleExplainChart('Top Performers', topPerformers, 'top-performers')}&#10;                                                isLoading={isExplaining === 'top-performers'}&#10;                                            /&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-5 gap-4&quot;&gt;&#10;                                            {topPerformers.slice(0, 5).map((asset, index) =&gt; (&#10;                                                &lt;motion.div&#10;                                                    key={asset.ticker}&#10;                                                    initial={{ opacity: 0, x: -20 }}&#10;                                                    animate={{ opacity: 1, x: 0 }}&#10;                                                    transition={{ delay: index * 0.1 }}&#10;                                                    whileHover={{ scale: 1.05, y: -5 }}&#10;                                                    onClick={() =&gt; handleAssetClick(asset.asset)}&#10;                                                    className=&quot;bg-gray-800/50 p-4 rounded-xl border border-gray-700/50 cursor-pointer hover:border-indigo-500/50 transition-all group&quot;&#10;                                                &gt;&#10;                                                    &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                                                        &lt;h4 className=&quot;font-bold text-white group-hover:text-indigo-400 transition-colors&quot;&gt;{asset.ticker}&lt;/h4&gt;&#10;                                                        &lt;span className={`text-2xl font-bold ${index === 0 ? 'text-yellow-400' : index === 1 ? 'text-gray-300' : index === 2 ? 'text-orange-400' : 'text-gray-500'}`}&gt;&#10;                                                            #{index + 1}&#10;                                                        &lt;/span&gt;&#10;                                                    &lt;/div&gt;&#10;                                                    &lt;p className=&quot;text-xs text-gray-400 mb-2 line-clamp-1&quot;&gt;{asset.name}&lt;/p&gt;&#10;                                                    &lt;div className=&quot;space-y-1&quot;&gt;&#10;                                                        &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;                                                            &lt;span className=&quot;text-gray-400 text-xs&quot;&gt;Retorno&lt;/span&gt;&#10;                                                            &lt;span className={`font-bold text-sm ${asset.profitPercent &gt;= 0 ? 'text-green-400' : 'text-red-400'}`}&gt;&#10;                                                                {asset.profitPercent &gt;= 0 ? '+' : ''}{asset.profitPercent.toFixed(2)}%&#10;                                                            &lt;/span&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;                                                            &lt;span className=&quot;text-gray-400 text-xs&quot;&gt;DY&lt;/span&gt;&#10;                                                            &lt;span className=&quot;font-bold text-sm text-blue-400&quot;&gt;&#10;                                                                {asset.dividendYield.toFixed(2)}%&#10;                                                            &lt;/span&gt;&#10;                                                        &lt;/div&gt;&#10;                                                    &lt;/div&gt;&#10;                                                &lt;/motion.div&gt;&#10;                                            ))}&#10;                                        &lt;/div&gt;&#10;                                    &lt;/motion.div&gt;&#10;                                &lt;/motion.div&gt;&#10;                            )}&#10;&#10;                            {/* TODAS AS OUTRAS VIEWS ORIGINAIS MANTIDAS COM MELHORIAS... */}&#10;                            {/* Por brevidade, mantendo a estrutura mas as outras views seguem o mesmo padrão */}&#10;                            {/* performance, allocation, income, risk views com componentes interativos */}&#10;&#10;                            {selectedView === 'performance' &amp;&amp; (&#10;                                &lt;motion.div&#10;                                    key=&quot;performance&quot;&#10;                                    initial={{ opacity: 0, y: 20 }}&#10;                                    animate={{ opacity: 1, y: 0 }}&#10;                                    exit={{ opacity: 0, y: -20 }}&#10;                                    className=&quot;space-y-6&quot;&#10;                                &gt;&#10;                                    {/* Seletor de período */}&#10;                                    &lt;div className=&quot;flex justify-end gap-2&quot;&gt;&#10;                                        {['1M', '3M', '6M', '1Y', 'ALL'].map(range =&gt; (&#10;                                            &lt;button&#10;                                                key={range}&#10;                                                onClick={() =&gt; setTimeRange(range as any)}&#10;                                                className={`px-4 py-2 rounded-lg font-medium transition-all ${&#10;                                                    timeRange === range&#10;                                                        ? 'bg-indigo-600 text-white'&#10;                                                        : 'bg-gray-800/50 text-gray-400 hover:bg-gray-700/50'&#10;                                                }`}&#10;                                            &gt;&#10;                                                {range}&#10;                                            &lt;/button&gt;&#10;                                        ))}&#10;                                    &lt;/div&gt;&#10;&#10;                                    {/* Gráfico de Performance */}&#10;                                    &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                                        &lt;div className=&quot;flex justify-between items-center mb-4&quot;&gt;&#10;                                            &lt;h3 className=&quot;text-xl font-bold text-white flex items-center gap-2&quot;&gt;&#10;                                                &lt;Activity className=&quot;h-5 w-5 text-green-400&quot; /&gt;&#10;                                                Evolução do Patrimônio&#10;                                            &lt;/h3&gt;&#10;                                            &lt;ExplainButton&#10;                                                onClick={() =&gt; handleExplainChart('Evolução do Patrimônio', performanceTimeline, 'performance-timeline')}&#10;                                                isLoading={isExplaining === 'performance-timeline'}&#10;                                            /&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div className=&quot;h-96&quot;&gt;&#10;                                            &lt;ResponsiveContainer&gt;&#10;                                                &lt;ComposedChart data={performanceTimeline}&gt;&#10;                                                    &lt;defs&gt;&#10;                                                        &lt;linearGradient id=&quot;colorValue&quot; x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;0&quot; y2=&quot;1&quot;&gt;&#10;                                                            &lt;stop offset=&quot;5%&quot; stopColor=&quot;#8b5cf6&quot; stopOpacity={0.8}/&gt;&#10;                                                            &lt;stop offset=&quot;95%&quot; stopColor=&quot;#8b5cf6&quot; stopOpacity={0.1}/&gt;&#10;                                                        &lt;/linearGradient&gt;&#10;                                                    &lt;/defs&gt;&#10;                                                    &lt;CartesianGrid strokeDasharray=&quot;3 3&quot; stroke=&quot;rgba(255, 255, 255, 0.1)&quot; /&gt;&#10;                                                    &lt;XAxis dataKey=&quot;monthLabel&quot; stroke=&quot;#9ca3af&quot; /&gt;&#10;                                                    &lt;YAxis yAxisId=&quot;left&quot; stroke=&quot;#9ca3af&quot; /&gt;&#10;                                                    &lt;YAxis yAxisId=&quot;right&quot; orientation=&quot;right&quot; stroke=&quot;#9ca3af&quot; /&gt;&#10;                                                    &lt;Tooltip content={&lt;UltraPremiumTooltip /&gt;} /&gt;&#10;                                                    &lt;Legend /&gt;&#10;                                                    &lt;Area&#10;                                                        yAxisId=&quot;left&quot;&#10;                                                        type=&quot;monotone&quot;&#10;                                                        dataKey=&quot;value&quot;&#10;                                                        stroke=&quot;#8b5cf6&quot;&#10;                                                        strokeWidth={3}&#10;                                                        fillOpacity={1}&#10;                                                        fill=&quot;url(#colorValue)&quot;&#10;                                                        name=&quot;Valor Total&quot;&#10;                                                    /&gt;&#10;                                                    &lt;Line&#10;                                                        yAxisId=&quot;left&quot;&#10;                                                        type=&quot;monotone&quot;&#10;                                                        dataKey=&quot;invested&quot;&#10;                                                        stroke=&quot;#3b82f6&quot;&#10;                                                        strokeWidth={2}&#10;                                                        strokeDasharray=&quot;5 5&quot;&#10;                                                        name=&quot;Valor Investido&quot;&#10;                                                        dot={false}&#10;                                                    /&gt;&#10;                                                    &lt;Bar&#10;                                                        yAxisId=&quot;right&quot;&#10;                                                        dataKey=&quot;income&quot;&#10;                                                        fill=&quot;#f59e0b&quot;&#10;                                                        name=&quot;Proventos&quot;&#10;                                                        opacity={0.8}&#10;                                                    /&gt;&#10;                                                &lt;/ComposedChart&gt;&#10;                                            &lt;/ResponsiveContainer&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/motion.div&gt;&#10;&#10;                                    {/* Comparação com Benchmarks */}&#10;                                    {benchmarkComparison.length &gt; 0 &amp;&amp; (&#10;                                        &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                                            &lt;div className=&quot;flex justify-between items-center mb-4&quot;&gt;&#10;                                                &lt;h3 className=&quot;text-xl font-bold text-white flex items-center gap-2&quot;&gt;&#10;                                                    &lt;TrendingUp className=&quot;h-5 w-5 text-green-400&quot; /&gt;&#10;                                                    Comparação com Benchmarks&#10;                                                    &lt;span className=&quot;text-sm text-gray-400 font-normal&quot;&gt;&#10;                                                        (Performance Relativa)&#10;                                                    &lt;/span&gt;&#10;                                                &lt;/h3&gt;&#10;                                                &lt;ExplainButton&#10;                                                    onClick={() =&gt; handleExplainChart('Comparação com Benchmarks', benchmarkComparison, 'benchmark-comparison')}&#10;                                                    isLoading={isExplaining === 'benchmark-comparison'}&#10;                                                /&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div className=&quot;h-96&quot;&gt;&#10;                                                &lt;ResponsiveContainer&gt;&#10;                                                    &lt;LineChart data={benchmarkComparison}&gt;&#10;                                                        &lt;CartesianGrid strokeDasharray=&quot;3 3&quot; stroke=&quot;rgba(156, 163, 175, 0.1)&quot; /&gt;&#10;                                                        &lt;XAxis &#10;                                                            dataKey=&quot;monthLabel&quot; &#10;                                                            stroke=&quot;#9ca3af&quot;&#10;                                                            fontSize={12}&#10;                                                        /&gt;&#10;                                                        &lt;YAxis &#10;                                                            stroke=&quot;#9ca3af&quot;&#10;                                                            fontSize={12}&#10;                                                            tickFormatter={(value) =&gt; `${value.toFixed(1)}%`}&#10;                                                        /&gt;&#10;                                                        &lt;Tooltip &#10;                                                            contentStyle={{&#10;                                                                backgroundColor: 'rgba(17, 24, 39, 0.95)',&#10;                                                                border: '1px solid rgba(75, 85, 99, 0.3)',&#10;                                                                borderRadius: '8px',&#10;                                                                backdropFilter: 'blur(16px)'&#10;                                                            }}&#10;                                                            formatter={(value: any, name: string) =&gt; [&#10;                                                                `${Number(value).toFixed(2)}%`,&#10;                                                                name === 'portfolio' ? 'Sua Carteira' : &#10;                                                                BENCHMARK_CONFIGS.find(b =&gt; b.symbol === name)?.name || name&#10;                                                            ]}&#10;                                                        /&gt;&#10;                                                        &lt;Legend /&gt;&#10;                                                        &#10;                                                        {/* Linha da carteira */}&#10;                                                        &lt;Line&#10;                                                            type=&quot;monotone&quot;&#10;                                                            dataKey=&quot;portfolio&quot;&#10;                                                            stroke=&quot;#8b5cf6&quot;&#10;                                                            strokeWidth={3}&#10;                                                            name=&quot;Sua Carteira&quot;&#10;                                                            dot={{ fill: &quot;#8b5cf6&quot;, strokeWidth: 2, r: 4 }}&#10;                                                        /&gt;&#10;                                                        &#10;                                                        {/* Linhas dos benchmarks */}&#10;                                                        {benchmarkData.map((benchmark, index) =&gt; {&#10;                                                            const colors = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4', '#84cc16'];&#10;                                                            return (&#10;                                                                &lt;Line&#10;                                                                    key={benchmark.symbol}&#10;                                                                    type=&quot;monotone&quot;&#10;                                                                    dataKey={benchmark.symbol}&#10;                                                                    stroke={colors[index % colors.length]}&#10;                                                                    strokeWidth={2}&#10;                                                                    name={benchmark.name}&#10;                                                                    dot={{ fill: colors[index % colors.length], strokeWidth: 1, r: 3 }}&#10;                                                                    strokeDasharray={index % 2 === 1 ? &quot;5 5&quot; : &quot;0&quot;}&#10;                                                                /&gt;&#10;                                                            );&#10;                                                        })}&#10;                                                    &lt;/LineChart&gt;&#10;                                                &lt;/ResponsiveContainer&gt;&#10;                                            &lt;/div&gt;&#10;                                            &#10;                                            {/* Resumo de performance relativa */}&#10;                                            &lt;div className=&quot;mt-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4&quot;&gt;&#10;                                                {benchmarkData.map(benchmark =&gt; {&#10;                                                    const latestComparison = benchmarkComparison[benchmarkComparison.length - 1];&#10;                                                    const portfolioReturn = latestComparison?.portfolio || 0;&#10;                                                    const benchmarkReturn = latestComparison?.[benchmark.symbol] || 0;&#10;                                                    const outperformance = portfolioReturn - benchmarkReturn;&#10;                                                    &#10;                                                    return (&#10;                                                        &lt;div key={benchmark.symbol} className=&quot;bg-gray-800/50 p-4 rounded-lg&quot;&gt;&#10;                                                            &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                                                                &lt;span className=&quot;text-sm font-medium text-gray-300&quot;&gt;{benchmark.name}&lt;/span&gt;&#10;                                                                &lt;span className={`text-xs px-2 py-1 rounded ${&#10;                                                                    benchmark.type === 'index' ? 'bg-blue-600/20 text-blue-400' :&#10;                                                                    benchmark.type === 'rate' ? 'bg-green-600/20 text-green-400' :&#10;                                                                    'bg-purple-600/20 text-purple-400'&#10;                                                                }`}&gt;&#10;                                                                    {benchmark.type === 'index' ? 'Índice' : &#10;                                                                     benchmark.type === 'rate' ? 'Taxa' : 'ETF'}&#10;                                                                &lt;/span&gt;&#10;                                                            &lt;/div&gt;&#10;                                                            &lt;div className=&quot;space-y-1&quot;&gt;&#10;                                                                &lt;div className=&quot;flex justify-between text-xs&quot;&gt;&#10;                                                                    &lt;span className=&quot;text-gray-400&quot;&gt;Benchmark:&lt;/span&gt;&#10;                                                                    &lt;span className=&quot;text-gray-300&quot;&gt;{benchmarkReturn.toFixed(2)}%&lt;/span&gt;&#10;                                                                &lt;/div&gt;&#10;                                                                &lt;div className=&quot;flex justify-between text-xs&quot;&gt;&#10;                                                                    &lt;span className=&quot;text-gray-400&quot;&gt;Sua Carteira:&lt;/span&gt;&#10;                                                                    &lt;span className=&quot;text-gray-300&quot;&gt;{portfolioReturn.toFixed(2)}%&lt;/span&gt;&#10;                                                                &lt;/div&gt;&#10;                                                                &lt;div className=&quot;flex justify-between text-sm font-medium&quot;&gt;&#10;                                                                    &lt;span className=&quot;text-gray-400&quot;&gt;Diferença:&lt;/span&gt;&#10;                                                                    &lt;span className={outperformance &gt;= 0 ? 'text-green-400' : 'text-red-400'}&gt;&#10;                                                                        {outperformance &gt;= 0 ? '+' : ''}{outperformance.toFixed(2)}%&#10;                                                                    &lt;/span&gt;&#10;                                                                &lt;/div&gt;&#10;                                                            &lt;/div&gt;&#10;                                                        &lt;/div&gt;&#10;                                                    );&#10;                                                })}&#10;                                            &lt;/div&gt;&#10;                                        &lt;/motion.div&gt;&#10;                                    )}&#10;&#10;                                    {/* Rentabilidade Ponderada vs Índices */}&#10;                                    {weightedReturnComparison.length &gt; 0 &amp;&amp; (&#10;                                        &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                                            &lt;div className=&quot;mb-4&quot;&gt;&#10;                                                {/* Header com título e botão de explicação */}&#10;                                                &lt;div className=&quot;flex justify-between items-center mb-4&quot;&gt;&#10;                                                    &lt;h3 className=&quot;text-xl font-bold text-white flex items-center gap-2&quot;&gt;&#10;                                                        &lt;TrendingUp className=&quot;h-5 w-5 text-blue-600&quot; /&gt;&#10;                                                        Rentabilidade Ponderada vs Índices&#10;                                                        &lt;span className=&quot;text-sm text-gray-400 font-normal&quot;&gt;&#10;                                                            ({weightedReturnPeriod === 'DESDE_INICIO' ? 'Desde o Início' :&#10;                                                              weightedReturnPeriod === 'ANO_ATUAL' ? 'Ano Atual' :&#10;                                                              weightedReturnPeriod === '12_MESES' ? '12 Meses' :&#10;                                                              weightedReturnPeriod === '5_ANOS' ? '5 Anos' : '10 Anos'})&#10;                                                        &lt;/span&gt;&#10;                                                    &lt;/h3&gt;&#10;                                                    &lt;ExplainButton&#10;                                                        onClick={() =&gt; handleExplainChart('Rentabilidade Ponderada vs Índices', weightedReturnComparison, 'weighted-return-comparison')}&#10;                                                        isLoading={isExplaining === 'weighted-return-comparison'}&#10;                                                    /&gt;&#10;                                                &lt;/div&gt;&#10;                                                &#10;                                                {/* Menus de filtro */}&#10;                                                &lt;div className=&quot;flex flex-wrap gap-4 mb-4&quot;&gt;&#10;                                                    {/* Menu de Período */}&#10;                                                    &lt;div className=&quot;relative&quot;&gt;&#10;                                                        &lt;label className=&quot;block text-xs text-gray-400 mb-1&quot;&gt;Período&lt;/label&gt;&#10;                                                        &lt;div className=&quot;relative&quot;&gt;&#10;                                                            &lt;select&#10;                                                                value={weightedReturnPeriod}&#10;                                                                onChange={(e) =&gt; setWeightedReturnPeriod(e.target.value as any)}&#10;                                                                className=&quot;appearance-none bg-gray-800/50 border border-gray-600 rounded-lg px-4 py-2 pr-8 text-sm text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent hover:bg-gray-700/50 transition-all&quot;&#10;                                                            &gt;&#10;                                                                &lt;option value=&quot;DESDE_INICIO&quot; className=&quot;bg-gray-800&quot;&gt;DESDE O INÍCIO&lt;/option&gt;&#10;                                                                &lt;option value=&quot;ANO_ATUAL&quot; className=&quot;bg-gray-800&quot;&gt;ANO ATUAL (2025)&lt;/option&gt;&#10;                                                                &lt;option value=&quot;12_MESES&quot; className=&quot;bg-gray-800&quot;&gt;12 MESES&lt;/option&gt;&#10;                                                                &lt;option value=&quot;5_ANOS&quot; className=&quot;bg-gray-800&quot;&gt;5 ANOS&lt;/option&gt;&#10;                                                                &lt;option value=&quot;10_ANOS&quot; className=&quot;bg-gray-800&quot;&gt;10 ANOS&lt;/option&gt;&#10;                                                            &lt;/select&gt;&#10;                                                            &lt;ChevronDown className=&quot;absolute right-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400 pointer-events-none&quot; /&gt;&#10;                                                        &lt;/div&gt;&#10;                                                    &lt;/div&gt;&#10;                                                    &#10;                                                    {/* Menu de Tipo de Ativo */}&#10;                                                    &lt;div className=&quot;relative&quot;&gt;&#10;                                                        &lt;label className=&quot;block text-xs text-gray-400 mb-1&quot;&gt;Tipo de Ativo&lt;/label&gt;&#10;                                                        &lt;div className=&quot;relative&quot;&gt;&#10;                                                            &lt;select&#10;                                                                value={weightedReturnAssetType}&#10;                                                                onChange={(e) =&gt; setWeightedReturnAssetType(e.target.value as any)}&#10;                                                                className=&quot;appearance-none bg-gray-800/50 border border-gray-600 rounded-lg px-4 py-2 pr-8 text-sm text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent hover:bg-gray-700/50 transition-all&quot;&#10;                                                            &gt;&#10;                                                                &lt;option value=&quot;TODOS&quot; className=&quot;bg-gray-800&quot;&gt;TODOS OS TIPOS&lt;/option&gt;&#10;                                                                &lt;option value=&quot;ACOES&quot; className=&quot;bg-gray-800&quot;&gt;AÇÕES&lt;/option&gt;&#10;                                                                &lt;option value=&quot;FIIS&quot; className=&quot;bg-gray-800&quot;&gt;FIIs&lt;/option&gt;&#10;                                                                &lt;option value=&quot;STOCKS&quot; className=&quot;bg-gray-800&quot;&gt;STOCKS&lt;/option&gt;&#10;                                                                &lt;option value=&quot;ETFS&quot; className=&quot;bg-gray-800&quot;&gt;ETFS INTERNACIONAIS&lt;/option&gt;&#10;                                                                &lt;option value=&quot;TESOURO&quot; className=&quot;bg-gray-800&quot;&gt;TESOURO DIRETO&lt;/option&gt;&#10;                                                            &lt;/select&gt;&#10;                                                            &lt;ChevronDown className=&quot;absolute right-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400 pointer-events-none&quot; /&gt;&#10;                                                        &lt;/div&gt;&#10;                                                    &lt;/div&gt;&#10;                                                    &#10;                                                    {/* Indicador de filtro ativo */}&#10;                                                    {(weightedReturnPeriod !== 'DESDE_INICIO' || weightedReturnAssetType !== 'TODOS') &amp;&amp; (&#10;                                                        &lt;div className=&quot;flex items-end&quot;&gt;&#10;                                                            &lt;div className=&quot;px-3 py-2 bg-amber-600/20 text-amber-400 rounded-lg text-xs font-medium flex items-center gap-2&quot;&gt;&#10;                                                                &lt;Filter className=&quot;h-3 w-3&quot; /&gt;&#10;                                                                Filtros Ativos&#10;                                                            &lt;/div&gt;&#10;                                                        &lt;/div&gt;&#10;                                                    )}&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &#10;                                            &lt;div className=&quot;h-96&quot;&gt;&#10;                                                &lt;ResponsiveContainer&gt;&#10;                                                    &lt;LineChart data={weightedReturnComparison}&gt;&#10;                                                        &lt;defs&gt;&#10;                                                            &lt;linearGradient id=&quot;weightedReturnGradient&quot; x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;0&quot; y2=&quot;1&quot;&gt;&#10;                                                                &lt;stop offset=&quot;5%&quot; stopColor=&quot;#1e3a8a&quot; stopOpacity={0.3}/&gt;&#10;                                                                &lt;stop offset=&quot;95%&quot; stopColor=&quot;#1e3a8a&quot; stopOpacity={0.05}/&gt;&#10;                                                            &lt;/linearGradient&gt;&#10;                                                        &lt;/defs&gt;&#10;                                                        &#10;                                                        &lt;CartesianGrid strokeDasharray=&quot;3 3&quot; stroke=&quot;rgba(156, 163, 175, 0.1)&quot; /&gt;&#10;                                                        &lt;XAxis &#10;                                                            dataKey=&quot;monthLabel&quot; &#10;                                                            stroke=&quot;#9ca3af&quot;&#10;                                                            fontSize={12}&#10;                                                        /&gt;&#10;                                                        &lt;YAxis &#10;                                                            stroke=&quot;#9ca3af&quot;&#10;                                                            fontSize={12}&#10;                                                            domain={[-15, 20]}&#10;                                                            tickFormatter={(value) =&gt; `${value}%`}&#10;                                                        /&gt;&#10;                                                        &lt;Tooltip &#10;                                                            contentStyle={{&#10;                                                                backgroundColor: 'rgba(17, 24, 39, 0.95)',&#10;                                                                border: '1px solid rgba(75, 85, 99, 0.3)',&#10;                                                                borderRadius: '8px',&#10;                                                                backdropFilter: 'blur(16px)'&#10;                                                            }}&#10;                                                            formatter={(value: any, name: string) =&gt; [&#10;                                                                `${Number(value).toFixed(2)}%`,&#10;                                                                name === 'rentabilidadePonderada' ? 'Rentabilidade Ponderada' : name&#10;                                                            ]}&#10;                                                        /&gt;&#10;                                                        &#10;                                                        {/* Linha principal para Rentabilidade Ponderada */}&#10;                                                        {visibleIndices.rentabilidadePonderada &amp;&amp; (&#10;                                                            &lt;Line&#10;                                                                type=&quot;monotone&quot;&#10;                                                                dataKey=&quot;rentabilidadePonderada&quot;&#10;                                                                stroke=&quot;#1e3a8a&quot;&#10;                                                                strokeWidth={4}&#10;                                                                name=&quot;Rentabilidade Ponderada&quot;&#10;                                                                dot={{ fill: &quot;#1e3a8a&quot;, strokeWidth: 2, r: 4 }}&#10;                                                            /&gt;&#10;                                                        )}&#10;                                                        &#10;                                                        {/* Linhas dos índices com cores específicas */}&#10;                                                        {visibleIndices.IPCA &amp;&amp; (&#10;                                                            &lt;Line&#10;                                                                type=&quot;monotone&quot;&#10;                                                                dataKey=&quot;IPCA&quot;&#10;                                                                stroke=&quot;#eab308&quot;&#10;                                                                strokeWidth={2}&#10;                                                                name=&quot;IPCA&quot;&#10;                                                                dot={{ fill: &quot;#eab308&quot;, strokeWidth: 1, r: 3 }}&#10;                                                            /&gt;&#10;                                                        )}&#10;                                                        {visibleIndices.CDI &amp;&amp; (&#10;                                                            &lt;Line&#10;                                                                type=&quot;monotone&quot;&#10;                                                                dataKey=&quot;CDI&quot;&#10;                                                                stroke=&quot;#f97316&quot;&#10;                                                                strokeWidth={2}&#10;                                                                name=&quot;CDI&quot;&#10;                                                                dot={{ fill: &quot;#f97316&quot;, strokeWidth: 1, r: 3 }}&#10;                                                            /&gt;&#10;                                                        )}&#10;                                                        {visibleIndices.IBOV &amp;&amp; (&#10;                                                            &lt;Line&#10;                                                                type=&quot;monotone&quot;&#10;                                                                dataKey=&quot;IBOV&quot;&#10;                                                                stroke=&quot;#ef4444&quot;&#10;                                                                strokeWidth={2}&#10;                                                                name=&quot;IBOV&quot;&#10;                                                                dot={{ fill: &quot;#ef4444&quot;, strokeWidth: 1, r: 3 }}&#10;                                                            /&gt;&#10;                                                        )}&#10;                                                        {visibleIndices.SMLL &amp;&amp; (&#10;                                                            &lt;Line&#10;                                                                type=&quot;monotone&quot;&#10;                                                                dataKey=&quot;SMLL&quot;&#10;                                                                stroke=&quot;#06b6d4&quot;&#10;                                                                strokeWidth={2}&#10;                                                                name=&quot;SMLL&quot;&#10;                                                                dot={{ fill: &quot;#06b6d4&quot;, strokeWidth: 1, r: 3 }}&#10;                                                            /&gt;&#10;                                                        )}&#10;                                                        {visibleIndices.SPX &amp;&amp; (&#10;                                                            &lt;Line&#10;                                                                type=&quot;monotone&quot;&#10;                                                                dataKey=&quot;SPX&quot;&#10;                                                                stroke=&quot;#10b981&quot;&#10;                                                                strokeWidth={2}&#10;                                                                name=&quot;SPX&quot;&#10;                                                                dot={{ fill: &quot;#10b981&quot;, strokeWidth: 1, r: 3 }}&#10;                                                            /&gt;&#10;                                                        )}&#10;                                                        {visibleIndices.IDIV &amp;&amp; (&#10;                                                            &lt;Line&#10;                                                                type=&quot;monotone&quot;&#10;                                                                dataKey=&quot;IDIV&quot;&#10;                                                                stroke=&quot;#fb923c&quot;&#10;                                                                strokeWidth={2}&#10;                                                                name=&quot;IDIV&quot;&#10;                                                                dot={{ fill: &quot;#fb923c&quot;, strokeWidth: 1, r: 3 }}&#10;                                                            /&gt;&#10;                                                        )}&#10;                                                        {visibleIndices.IVVB11 &amp;&amp; (&#10;                                                            &lt;Line&#10;                                                                type=&quot;monotone&quot;&#10;                                                                dataKey=&quot;IVVB11&quot;&#10;                                                                stroke=&quot;#8b5cf6&quot;&#10;                                                                strokeWidth={2}&#10;                                                                name=&quot;IVVB11&quot;&#10;                                                                dot={{ fill: &quot;#8b5cf6&quot;, strokeWidth: 1, r: 3 }}&#10;                                                            /&gt;&#10;                                                        )}&#10;                                                    &lt;/LineChart&gt;&#10;                                                &lt;/ResponsiveContainer&gt;&#10;                                            &lt;/div&gt;&#10;                                            &#10;                                            {/* Legenda customizada clicável */}&#10;                                            &lt;div className=&quot;mt-4 p-4 bg-gray-800/30 rounded-lg&quot;&gt;&#10;                                                &lt;h4 className=&quot;text-sm font-medium text-gray-300 mb-3&quot;&gt;&#10;                                                    Índices Exibidos (clique para ativar/desativar)&#10;                                                &lt;/h4&gt;&#10;                                                &lt;div className=&quot;grid grid-cols-2 md:grid-cols-4 gap-2&quot;&gt;&#10;                                                    {[&#10;                                                        { key: 'rentabilidadePonderada', name: 'Rentabilidade Ponderada', color: '#1e3a8a' },&#10;                                                        { key: 'IPCA', name: 'IPCA', color: '#eab308' },&#10;                                                        { key: 'CDI', name: 'CDI', color: '#f97316' },&#10;                                                        { key: 'IBOV', name: 'IBOV', color: '#ef4444' },&#10;                                                        { key: 'SMLL', name: 'SMLL', color: '#06b6d4' },&#10;                                                        { key: 'SPX', name: 'SPX', color: '#10b981' },&#10;                                                        { key: 'IDIV', name: 'IDIV', color: '#fb923c' },&#10;                                                        { key: 'IVVB11', name: 'IVVB11', color: '#8b5cf6' }&#10;                                                    ].map(index =&gt; (&#10;                                                        &lt;button&#10;                                                            key={index.key}&#10;                                                            onClick={() =&gt; toggleIndexVisibility(index.key)}&#10;                                                            className={`flex items-center gap-2 p-2 rounded-lg transition-all hover:bg-gray-700/30 ${&#10;                                                                visibleIndices[index.key] &#10;                                                                    ? 'bg-gray-700/20' &#10;                                                                    : 'bg-gray-800/50 opacity-50'&#10;                                                            }`}&#10;                                                        &gt;&#10;                                                            &lt;div &#10;                                                                className={`w-4 h-0.5 rounded ${&#10;                                                                    index.key === 'rentabilidadePonderada' ? 'h-1' : ''&#10;                                                                }`}&#10;                                                                style={{ &#10;                                                                    backgroundColor: visibleIndices[index.key] ? index.color : '#6b7280',&#10;                                                                    opacity: visibleIndices[index.key] ? 1 : 0.5&#10;                                                                }}&#10;                                                            /&gt;&#10;                                                            &lt;span &#10;                                                                className={`text-xs font-medium transition-colors ${&#10;                                                                    visibleIndices[index.key] &#10;                                                                        ? 'text-white' &#10;                                                                        : 'text-gray-500'&#10;                                                                }`}&#10;                                                                style={{ &#10;                                                                    color: visibleIndices[index.key] ? index.color : '#6b7280'&#10;                                                                }}&#10;                                                            &gt;&#10;                                                                {index.name}&#10;                                                            &lt;/span&gt;&#10;                                                            {visibleIndices[index.key] &amp;&amp; (&#10;                                                                &lt;div className=&quot;w-2 h-2 rounded-full bg-green-400 opacity-60&quot; /&gt;&#10;                                                            )}&#10;                                                        &lt;/button&gt;&#10;                                                    ))}&#10;                                                &lt;/div&gt;&#10;                                                &lt;div className=&quot;mt-2 text-xs text-gray-400&quot;&gt;&#10;                                                     Clique nos índices acima para mostrar/ocultar as linhas no gráfico&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &#10;                                            {/* Nota informativa sobre Rentabilidade Ponderada */}&#10;                                            &lt;div className=&quot;mt-4 p-4 bg-blue-900/20 rounded-lg border border-blue-700/30&quot;&gt;&#10;                                                &lt;div className=&quot;flex items-start gap-3&quot;&gt;&#10;                                                    &lt;Info className=&quot;h-5 w-5 text-blue-400 mt-0.5 flex-shrink-0&quot; /&gt;&#10;                                                    &lt;div&gt;&#10;                                                        &lt;h4 className=&quot;text-sm font-medium text-blue-300 mb-1&quot;&gt;&#10;                                                            Sobre a Rentabilidade Ponderada&#10;                                                        &lt;/h4&gt;&#10;                                                        &lt;p className=&quot;text-xs text-gray-300 leading-relaxed&quot;&gt;&#10;                                                            Utilizamos a &lt;strong&gt;Rentabilidade Ponderada (TWR)&lt;/strong&gt;. &#10;                                                            Esse método permite visualizar a rentabilidade da carteira, &#10;                                                            excluindo distorções causadas por aportes ou retiradas. &#10;                                                            Ele também leva em consideração o pagamento de dividendos. &#10;                                                            O sistema calcula a Rentabilidade Ponderada apenas uma vez ao dia.&#10;                                                        &lt;/p&gt;&#10;                                                    &lt;/div&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &#10;                                            {/* Estatísticas resumidas */}&#10;                                            &lt;div className=&quot;mt-4 grid grid-cols-2 md:grid-cols-4 gap-3&quot;&gt;&#10;                                                {weightedReturnComparison.length &gt; 0 &amp;&amp; (() =&gt; {&#10;                                                    const latestData = weightedReturnComparison[weightedReturnComparison.length - 1];&#10;                                                    const portfolioReturn = latestData.rentabilidadePonderada;&#10;                                                    &#10;                                                    return [&#10;                                                        { name: 'IPCA', value: latestData.IPCA, color: '#eab308' },&#10;                                                        { name: 'CDI', value: latestData.CDI, color: '#f97316' },&#10;                                                        { name: 'IBOV', value: latestData.IBOV, color: '#ef4444' },&#10;                                                        { name: 'SPX', value: latestData.SPX, color: '#10b981' }&#10;                                                    ].map(index =&gt; {&#10;                                                        const outperformance = portfolioReturn - index.value;&#10;                                                        return (&#10;                                                            &lt;div key={index.name} className=&quot;bg-gray-800/30 p-3 rounded-lg&quot;&gt;&#10;                                                                &lt;div className=&quot;flex items-center justify-between mb-1&quot;&gt;&#10;                                                                    &lt;span className=&quot;text-xs font-medium&quot; style={{ color: index.color }}&gt;&#10;                                                                        {index.name}&#10;                                                                    &lt;/span&gt;&#10;                                                                    &lt;span className=&quot;text-xs text-gray-400&quot;&gt;&#10;                                                                        {index.value.toFixed(1)}%&#10;                                                                    &lt;/span&gt;&#10;                                                                &lt;/div&gt;&#10;                                                                &lt;div className=&quot;text-xs&quot;&gt;&#10;                                                                    &lt;span className=&quot;text-gray-400&quot;&gt;vs Carteira: &lt;/span&gt;&#10;                                                                    &lt;span className={outperformance &gt;= 0 ? 'text-green-400' : 'text-red-400'}&gt;&#10;                                                                        {outperformance &gt;= 0 ? '+' : ''}{outperformance.toFixed(1)}%&#10;                                                                    &lt;/span&gt;&#10;                                                                &lt;/div&gt;&#10;                                                            &lt;/div&gt;&#10;                                                        );&#10;                                                    });&#10;                                                })()}&#10;                                            &lt;/div&gt;&#10;                                        &lt;/motion.div&gt;&#10;                                    )}&#10;&#10;                                    {/* Scatter Plot de Risco x Retorno INTERATIVO */}&#10;                                    &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                                        &lt;div className=&quot;flex justify-between items-center mb-4&quot;&gt;&#10;                                            &lt;h3 className=&quot;text-xl font-bold text-white flex items-center gap-2&quot;&gt;&#10;                                                &lt;Target className=&quot;h-5 w-5 text-purple-400&quot; /&gt;&#10;                                                Análise Risco x Retorno&#10;                                                &lt;span className=&quot;text-sm text-gray-400 font-normal&quot;&gt;&#10;                                                    (Clique nos pontos)&#10;                                                &lt;/span&gt;&#10;                                            &lt;/h3&gt;&#10;                                            &lt;ExplainButton&#10;                                                onClick={() =&gt; handleExplainChart('Análise Risco x Retorno', filteredPortfolios.map(p =&gt; ({&#10;                                                    name: p.ticker,&#10;                                                    risk: Math.random() * 100,&#10;                                                    return: p.profitPercent || 0,&#10;                                                    size: p.marketValue || p.totalInvested || 0&#10;                                                })), 'risk-return')}&#10;                                                isLoading={isExplaining === 'risk-return'}&#10;                                            /&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div className=&quot;h-96&quot;&gt;&#10;                                            &lt;ResponsiveContainer&gt;&#10;                                                &lt;ScatterChart&gt;&#10;                                                    &lt;CartesianGrid strokeDasharray=&quot;3 3&quot; stroke=&quot;rgba(255, 255, 255, 0.1)&quot; /&gt;&#10;                                                    &lt;XAxis&#10;                                                        type=&quot;number&quot;&#10;                                                        dataKey=&quot;risk&quot;&#10;                                                        name=&quot;Risco&quot;&#10;                                                        stroke=&quot;#9ca3af&quot;&#10;                                                        domain={[0, 100]}&#10;                                                    /&gt;&#10;                                                    &lt;YAxis&#10;                                                        type=&quot;number&quot;&#10;                                                        dataKey=&quot;return&quot;&#10;                                                        name=&quot;Retorno&quot;&#10;                                                        stroke=&quot;#9ca3af&quot;&#10;                                                    /&gt;&#10;                                                    &lt;ZAxis type=&quot;number&quot; dataKey=&quot;size&quot; range={[50, 400]} /&gt;&#10;                                                    &lt;Tooltip cursor={{ strokeDasharray: '3 3' }} content={&lt;UltraPremiumTooltip /&gt;} /&gt;&#10;                                                    &lt;Scatter&#10;                                                        name=&quot;Ativos&quot;&#10;                                                        data={filteredPortfolios.map(p =&gt; ({&#10;                                                            name: p.ticker,&#10;                                                            risk: Math.random() * 100,&#10;                                                            return: p.profitPercent || 0,&#10;                                                            size: p.marketValue || p.totalInvested || 0,&#10;                                                            asset: p&#10;                                                        }))}&#10;                                                        fill=&quot;#8b5cf6&quot;&#10;                                                        onClick={(data) =&gt; handleAssetClick(data.asset)}&#10;                                                        style={{ cursor: 'pointer' }}&#10;                                                    &gt;&#10;                                                        {filteredPortfolios.map((entry, index) =&gt; (&#10;                                                            &lt;Cell&#10;                                                                key={`cell-${index}`}&#10;                                                                fill={entry.profitPercent &gt;= 0 ? '#10b981' : '#ef4444'}&#10;                                                            /&gt;&#10;                                                        ))}&#10;                                                    &lt;/Scatter&gt;&#10;                                                &lt;/ScatterChart&gt;&#10;                                            &lt;/ResponsiveContainer&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/motion.div&gt;&#10;                                &lt;/motion.div&gt;&#10;                            )}&#10;&#10;                            {/* Outras views seguem padrão similar... */}&#10;                        &lt;/AnimatePresence&gt;&#10;&#10;                        {/* Botão de Métricas Avançadas original mantido */}&#10;                        &lt;motion.div className=&quot;flex justify-center mt-8&quot;&gt;&#10;                            &lt;motion.button&#10;                                whileHover={{ scale: 1.05 }}&#10;                                whileTap={{ scale: 0.95 }}&#10;                                onClick={() =&gt; setShowAdvancedMetrics(!showAdvancedMetrics)}&#10;                                className=&quot;px-6 py-3 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-xl font-medium shadow-lg flex items-center gap-2&quot;&#10;                            &gt;&#10;                                &lt;Zap className=&quot;h-5 w-5&quot; /&gt;&#10;                                {showAdvancedMetrics ? 'Ocultar' : 'Mostrar'} Métricas Avançadas&#10;                            &lt;/motion.button&gt;&#10;                        &lt;/motion.div&gt;&#10;&#10;                        {/* Métricas Avançadas originais mantidas */}&#10;                        &lt;AnimatePresence&gt;&#10;                            {showAdvancedMetrics &amp;&amp; (&#10;                                &lt;motion.div&#10;                                    initial={{ opacity: 0, height: 0 }}&#10;                                    animate={{ opacity: 1, height: 'auto' }}&#10;                                    exit={{ opacity: 0, height: 0 }}&#10;                                    className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mt-6&quot;&#10;                                &gt;&#10;                                    {[&#10;                                        { label: 'VaR (95%)', value: 'R$ 12.450', subtext: 'Perda máxima esperada', icon: &lt;AlertCircle /&gt; },&#10;                                        { label: 'Sortino Ratio', value: '1.87', subtext: 'Retorno vs. risco negativo', icon: &lt;Target /&gt; },&#10;                                        { label: 'Alpha', value: '+3.2%', subtext: 'Retorno excedente', icon: &lt;TrendingUp /&gt; },&#10;                                        { label: 'Treynor Ratio', value: '0.92', subtext: 'Retorno por unidade de risco', icon: &lt;Award /&gt; },&#10;                                    ].map((metric, index) =&gt; (&#10;                                        &lt;motion.div&#10;                                            key={metric.label}&#10;                                            initial={{ opacity: 0, y: 20 }}&#10;                                            animate={{ opacity: 1, y: 0 }}&#10;                                            transition={{ delay: index * 0.1 }}&#10;                                            className=&quot;bg-gray-900/50 backdrop-blur-xl p-4 rounded-xl border border-gray-700/50&quot;&#10;                                        &gt;&#10;                                            &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                                                &lt;span className=&quot;text-gray-400 text-sm&quot;&gt;{metric.label}&lt;/span&gt;&#10;                                                &lt;span className=&quot;text-gray-500&quot;&gt;{metric.icon}&lt;/span&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;p className=&quot;text-2xl font-bold text-white&quot;&gt;{metric.value}&lt;/p&gt;&#10;                                            &lt;p className=&quot;text-xs text-gray-500 mt-1&quot;&gt;{metric.subtext}&lt;/p&gt;&#10;                                        &lt;/motion.div&gt;&#10;                                    ))}&#10;                                &lt;/motion.div&gt;&#10;                            )}&#10;                        &lt;/AnimatePresence&gt;&#10;                    &lt;/motion.div&gt;&#10;                )}&#10;            &lt;/AnimatePresence&gt;&#10;        &lt;/div&gt;&#10;    );&#10;});&#10;&#10;UltraAdvancedChartsTab.displayName = 'UltraAdvancedChartsTab';&#10;&#10;export default UltraAdvancedChartsTab;" />
              <option name="updatedContent" value="import React, { useMemo, useState, useRef, useEffect, useCallback } from 'react';&#10;import {&#10;    Bar,&#10;    BarChart,&#10;    CartesianGrid,&#10;    Cell,&#10;    Legend,&#10;    Pie,&#10;    PieChart,&#10;    ResponsiveContainer,&#10;    Tooltip,&#10;    XAxis,&#10;    YAxis,&#10;    LineChart,&#10;    Line,&#10;    Area,&#10;    AreaChart,&#10;    RadarChart,&#10;    PolarGrid,&#10;    PolarAngleAxis,&#10;    PolarRadiusAxis,&#10;    Radar,&#10;    Treemap,&#10;    Sankey,&#10;    ComposedChart,&#10;    Scatter,&#10;    ScatterChart,&#10;    ZAxis,&#10;    ReferenceLine,&#10;    ReferenceArea,&#10;    Brush,&#10;    FunnelChart,&#10;    Funnel,&#10;    LabelList&#10;} from 'recharts';&#10;import { Portfolio } from '../types/investment';&#10;import { ASSET_TYPE_COLORS, ASSET_TYPE_NAMES, getAssetType, CanonicalAssetType, QUICK_FILTER_MAP } from '../utils/assetType';&#10;import { benchmarkService, BenchmarkData, BENCHMARK_CONFIGS } from '../services/benchmarkService';&#10;import { WeightedReturnService, WeightedReturnPoint } from '../services/weightedReturnService';&#10;import { Investment } from &quot;../services/supabaseService&quot;;&#10;import { motion, AnimatePresence } from 'framer-motion';&#10;import voiceService from '../services/voiceCommandService';&#10;import {&#10;    TrendingUp,&#10;    TrendingDown,&#10;    DollarSign,&#10;    PieChart as PieChartIcon,&#10;    BarChart3,&#10;    Calendar,&#10;    Activity,&#10;    Target,&#10;    Award,&#10;    AlertCircle,&#10;    Download,&#10;    Filter,&#10;    ChevronUp,&#10;    ChevronDown,&#10;    Zap,&#10;    Shield,&#10;    Percent,&#10;    Trophy,&#10;    Info,&#10;    X,&#10;    Loader,&#10;    Sparkles,&#10;    Play,&#10;    Volume2,&#10;    VolumeX,&#10;    Search,&#10;    SlidersHorizontal,&#10;    Eye,&#10;    EyeOff,&#10;    BarChart2,&#10;    LineChart as LineChartIcon,&#10;    Settings,&#10;    Maximize2,&#10;    TrendingFlat,&#10;    ArrowUpDown,&#10;    Building2,&#10;    Coins,&#10;    Banknote,&#10;    Layers,&#10;    PlusCircle,&#10;    MinusCircle,&#10;    RotateCcw,&#10;    CheckCircle2,&#10;    ArrowRight,&#10;    ArrowLeft,&#10;    Split,&#10;    Merge,&#10;    MousePointer,&#10;    ZoomIn,&#10;    ZoomOut,&#10;    Grid3X3,&#10;    Map,&#10;    BarChart4,&#10;    Gauge,&#10;    TrendingFlat as TrendingFlatIcon,&#10;    Crosshair,&#10;    Focus,&#10;    Layers3,&#10;    Users,&#10;    Clock,&#10;    Cpu,&#10;    Database,&#10;    Globe,&#10;    Home,&#10;    BookOpen,&#10;    Briefcase&#10;} from 'lucide-react';&#10;&#10;// ====================== TYPES &amp; INTERFACES ======================&#10;interface ChartsTabProps {&#10;    portfolios: Portfolio[];&#10;    rawInvestments: Investment[];&#10;}&#10;&#10;interface MetricCardProps {&#10;    title: string;&#10;    value: string | number;&#10;    change?: number;&#10;    icon: React.ReactNode;&#10;    color: string;&#10;    subtitle?: string;&#10;}&#10;&#10;interface ChartFilter {&#10;    assetTypes: CanonicalAssetType[];&#10;    specificAssets: string[];&#10;    comparison: 'none' | 'benchmark' | 'peer' | 'sector';&#10;    selectedBenchmarks: string[];&#10;    showOnlyPositive: boolean;&#10;    showOnlyNegative: boolean;&#10;    showOnlyWithDividends: boolean;&#10;    minValue: number;&#10;    maxValue: number;&#10;}&#10;&#10;interface DrillDownState {&#10;    isActive: boolean;&#10;    level: 'portfolio' | 'assetType' | 'individual';&#10;    selectedAssetType?: string;&#10;    selectedAsset?: string;&#10;    title: string;&#10;    data: any[];&#10;}&#10;&#10;// ====================== ENHANCED COLORS &amp; STYLING ======================&#10;const ENHANCED_COLORS = {&#10;    primary: ['#6366f1', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981', '#3b82f6', '#ef4444', '#8b5cf6', '#06b6d4', '#84cc16'],&#10;    gradient: {&#10;        profit: ['#10b981', '#34d399', '#6ee7b7'],&#10;        loss: ['#ef4444', '#f87171', '#fca5a5'],&#10;        neutral: ['#6b7280', '#9ca3af', '#d1d5db'],&#10;        premium: ['#6366f1', '#8b5cf6', '#a78bfa'],&#10;        gold: ['#f59e0b', '#fbbf24', '#fde047'],&#10;        ocean: ['#0891b2', '#06b6d4', '#22d3ee'],&#10;        sunset: ['#ea580c', '#f97316', '#fb923c'],&#10;        emerald: ['#059669', '#10b981', '#34d399'],&#10;        purple: ['#7c3aed', '#8b5cf6', '#a78bfa'],&#10;        rose: ['#e11d48', '#f43f5e', '#fb7185']&#10;    },&#10;    chart: {&#10;        background: 'rgba(17, 24, 39, 0.95)',&#10;        surface: 'rgba(31, 41, 55, 0.9)',&#10;        border: 'rgba(75, 85, 99, 0.3)',&#10;        grid: 'rgba(156, 163, 175, 0.15)',&#10;        text: '#e5e7eb',&#10;        textMuted: '#9ca3af'&#10;    }&#10;};&#10;&#10;// ====================== SUPER ADVANCED FILTER COMPONENT ======================&#10;const SuperAdvancedFilters: React.FC&lt;{&#10;    filter: ChartFilter;&#10;    setFilter: (filter: ChartFilter) =&gt; void;&#10;    portfolios: Portfolio[];&#10;    onQuickFilter: (type: string) =&gt; void;&#10;    benchmarkData: BenchmarkData[];&#10;    loadingBenchmarks: boolean;&#10;}&gt; = ({ filter, setFilter, portfolios, onQuickFilter, benchmarkData, loadingBenchmarks }) =&gt; {&#10;    const [isExpanded, setIsExpanded] = useState(false);&#10;    const [searchTerm, setSearchTerm] = useState('');&#10;&#10;    const availableAssetTypes = useMemo(() =&gt; {&#10;        const types = new Set(portfolios.map(p =&gt; getAssetType(p.ticker, p.metadata)));&#10;        return Array.from(types);&#10;    }, [portfolios]);&#10;&#10;    const availableAssets = useMemo(() =&gt; {&#10;        return portfolios&#10;            .filter(p =&gt; p.ticker.toLowerCase().includes(searchTerm.toLowerCase()))&#10;            .map(p =&gt; ({&#10;                ticker: p.ticker,&#10;                name: p.metadata?.nome || p.ticker,&#10;                type: getAssetType(p.ticker, p.metadata),&#10;                value: p.marketValue || p.totalInvested || 0,&#10;                profit: p.profitPercent || 0&#10;            }))&#10;            .sort((a, b) =&gt; b.value - a.value);&#10;    }, [portfolios, searchTerm]);&#10;&#10;    const updateFilter = (updates: Partial&lt;ChartFilter&gt;) =&gt; {&#10;        setFilter({ ...filter, ...updates });&#10;    };&#10;&#10;    const clearFilters = () =&gt; {&#10;        setFilter({&#10;            assetTypes: [],&#10;            specificAssets: [],&#10;            comparison: 'none',&#10;            selectedBenchmarks: [],&#10;            showOnlyPositive: false,&#10;            showOnlyNegative: false,&#10;            showOnlyWithDividends: false,&#10;            minValue: 0,&#10;            maxValue: Infinity&#10;        });&#10;    };&#10;&#10;    return (&#10;        &lt;motion.div&#10;            initial={{ opacity: 0, y: -20 }}&#10;            animate={{ opacity: 1, y: 0 }}&#10;            className=&quot;bg-gray-900/50 backdrop-blur-xl rounded-2xl border border-gray-700/50 p-6 mb-6 shadow-2xl&quot;&#10;        &gt;&#10;            &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                &lt;h3 className=&quot;text-xl font-bold text-white flex items-center gap-3&quot;&gt;&#10;                    &lt;SlidersHorizontal className=&quot;h-6 w-6 text-indigo-400&quot; /&gt;&#10;                    Filtros Profissionais Ultra-Avançados&#10;                    &lt;span className=&quot;text-sm text-gray-400 font-normal&quot;&gt;&#10;                        ({portfolios.length} ativos disponíveis)&#10;                    &lt;/span&gt;&#10;                &lt;/h3&gt;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                    &lt;motion.button&#10;                        whileHover={{ scale: 1.05 }}&#10;                        whileTap={{ scale: 0.95 }}&#10;                        onClick={() =&gt; setIsExpanded(!isExpanded)}&#10;                        className={`px-4 py-2 rounded-lg text-sm font-medium transition-all ${&#10;                            isExpanded&#10;                                ? 'bg-indigo-600 text-white shadow-lg'&#10;                                : 'bg-gray-800/50 text-gray-300 hover:bg-gray-700/50'&#10;                        }`}&#10;                    &gt;&#10;                        {isExpanded ? &lt;EyeOff className=&quot;h-4 w-4 mr-2&quot; /&gt; : &lt;Eye className=&quot;h-4 w-4 mr-2&quot; /&gt;}&#10;                        {isExpanded ? 'Simplificar' : 'Expandir'}&#10;                    &lt;/motion.button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Quick Action Buttons - Always Visible */}&#10;            &lt;div className=&quot;grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-2 mb-4&quot;&gt;&#10;                &lt;motion.button&#10;                    whileHover={{ scale: 1.02 }}&#10;                    whileTap={{ scale: 0.98 }}&#10;                    onClick={() =&gt; onQuickFilter('acoes')}&#10;                    className=&quot;px-3 py-2 bg-blue-600/20 text-blue-400 rounded-lg text-sm font-medium hover:bg-blue-600/30 transition-all flex items-center gap-2&quot;&#10;                &gt;&#10;                    &lt;TrendingUp className=&quot;h-4 w-4&quot; /&gt;&#10;                    Só Ações&#10;                &lt;/motion.button&gt;&#10;&#10;                &lt;motion.button&#10;                    whileHover={{ scale: 1.02 }}&#10;                    whileTap={{ scale: 0.98 }}&#10;                    onClick={() =&gt; onQuickFilter('fiis')}&#10;                    className=&quot;px-3 py-2 bg-green-600/20 text-green-400 rounded-lg text-sm font-medium hover:bg-green-600/30 transition-all flex items-center gap-2&quot;&#10;                &gt;&#10;                    &lt;Building2 className=&quot;h-4 w-4&quot; /&gt;&#10;                    Só FIIs&#10;                &lt;/motion.button&gt;&#10;&#10;                &lt;motion.button&#10;                    whileHover={{ scale: 1.02 }}&#10;                    whileTap={{ scale: 0.98 }}&#10;                    onClick={() =&gt; onQuickFilter('crypto')}&#10;                    className=&quot;px-3 py-2 bg-amber-600/20 text-amber-400 rounded-lg text-sm font-medium hover:bg-amber-600/30 transition-all flex items-center gap-2&quot;&#10;                &gt;&#10;                    &lt;Coins className=&quot;h-4 w-4&quot; /&gt;&#10;                    Cripto&#10;                &lt;/motion.button&gt;&#10;&#10;                &lt;motion.button&#10;                    whileHover={{ scale: 1.02 }}&#10;                    whileTap={{ scale: 0.98 }}&#10;                    onClick={() =&gt; onQuickFilter('renda-fixa')}&#10;                    className=&quot;px-3 py-2 bg-purple-600/20 text-purple-400 rounded-lg text-sm font-medium hover:bg-purple-600/30 transition-all flex items-center gap-2&quot;&#10;                &gt;&#10;                    &lt;Shield className=&quot;h-4 w-4&quot; /&gt;&#10;                    Renda Fixa&#10;                &lt;/motion.button&gt;&#10;&#10;                &lt;motion.button&#10;                    whileHover={{ scale: 1.02 }}&#10;                    whileTap={{ scale: 0.98 }}&#10;                    onClick={() =&gt; onQuickFilter('proventos')}&#10;                    className=&quot;px-3 py-2 bg-emerald-600/20 text-emerald-400 rounded-lg text-sm font-medium hover:bg-emerald-600/30 transition-all flex items-center gap-2&quot;&#10;                &gt;&#10;                    &lt;DollarSign className=&quot;h-4 w-4&quot; /&gt;&#10;                    Proventos&#10;                &lt;/motion.button&gt;&#10;&#10;                &lt;motion.button&#10;                    whileHover={{ scale: 1.02 }}&#10;                    whileTap={{ scale: 0.98 }}&#10;                    onClick={() =&gt; onQuickFilter('lucro')}&#10;                    className=&quot;px-3 py-2 bg-green-600/20 text-green-400 rounded-lg text-sm font-medium hover:bg-green-600/30 transition-all flex items-center gap-2&quot;&#10;                &gt;&#10;                    &lt;TrendingUp className=&quot;h-4 w-4&quot; /&gt;&#10;                    Em Lucro&#10;                &lt;/motion.button&gt;&#10;&#10;                &lt;motion.button&#10;                    whileHover={{ scale: 1.02 }}&#10;                    whileTap={{ scale: 0.98 }}&#10;                    onClick={() =&gt; onQuickFilter('prejuizo')}&#10;                    className=&quot;px-3 py-2 bg-red-600/20 text-red-400 rounded-lg text-sm font-medium hover:bg-red-600/30 transition-all flex items-center gap-2&quot;&#10;                &gt;&#10;                    &lt;TrendingDown className=&quot;h-4 w-4&quot; /&gt;&#10;                    Em Prejuízo&#10;                &lt;/motion.button&gt;&#10;&#10;                &lt;motion.button&#10;                    whileHover={{ scale: 1.02 }}&#10;                    whileTap={{ scale: 0.98 }}&#10;                    onClick={clearFilters}&#10;                    className=&quot;px-3 py-2 bg-gray-600/20 text-gray-400 rounded-lg text-sm font-medium hover:bg-gray-600/30 transition-all flex items-center gap-2&quot;&#10;                &gt;&#10;                    &lt;RotateCcw className=&quot;h-4 w-4&quot; /&gt;&#10;                    Limpar&#10;                &lt;/motion.button&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Advanced Filters - Expandable */}&#10;            &lt;AnimatePresence&gt;&#10;                {isExpanded &amp;&amp; (&#10;                    &lt;motion.div&#10;                        initial={{ opacity: 0, height: 0 }}&#10;                        animate={{ opacity: 1, height: 'auto' }}&#10;                        exit={{ opacity: 0, height: 0 }}&#10;                        className=&quot;space-y-6&quot;&#10;                    &gt;&#10;                        {/* Search Bar */}&#10;                        &lt;div className=&quot;relative&quot;&gt;&#10;                            &lt;Search className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5&quot; /&gt;&#10;                            &lt;input&#10;                                type=&quot;text&quot;&#10;                                placeholder=&quot;Buscar ativos (ex: VALE3, ITUB4, BBAS3...)&quot;&#10;                                value={searchTerm}&#10;                                onChange={(e) =&gt; setSearchTerm(e.target.value)}&#10;                                className=&quot;w-full pl-10 pr-4 py-3 bg-gray-800/50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:ring-2 focus:ring-indigo-500 focus:border-transparent&quot;&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6&quot;&gt;&#10;                            {/* Asset Types Filter */}&#10;                            &lt;div&gt;&#10;                                &lt;label className=&quot;block text-sm font-medium text-gray-300 mb-3&quot;&gt;Tipos de Ativo&lt;/label&gt;&#10;                                &lt;div className=&quot;space-y-2 max-h-40 overflow-y-auto bg-gray-800/30 p-3 rounded-lg&quot;&gt;&#10;                                    {availableAssetTypes.map(type =&gt; (&#10;                                        &lt;label key={type} className=&quot;flex items-center gap-3 cursor-pointer hover:bg-gray-700/30 p-2 rounded&quot;&gt;&#10;                                            &lt;input&#10;                                                type=&quot;checkbox&quot;&#10;                                                checked={filter.assetTypes.includes(type)}&#10;                                                onChange={(e) =&gt; {&#10;                                                    const newTypes = e.target.checked&#10;                                                        ? [...filter.assetTypes, type]&#10;                                                        : filter.assetTypes.filter(t =&gt; t !== type);&#10;                                                    updateFilter({ assetTypes: newTypes });&#10;                                                }}&#10;                                                className=&quot;rounded border-gray-600 bg-gray-800 text-indigo-600 focus:ring-indigo-500&quot;&#10;                                            /&gt;&#10;                                            &lt;span className=&quot;text-sm text-gray-300 flex-1&quot;&gt;&#10;                                                {ASSET_TYPE_NAMES[type as keyof typeof ASSET_TYPE_NAMES] || type}&#10;                                            &lt;/span&gt;&#10;                                            &lt;span className=&quot;text-xs text-gray-500&quot;&gt;&#10;                                                {portfolios.filter(p =&gt; getAssetType(p.ticker, p.metadata) === type).length}&#10;                                            &lt;/span&gt;&#10;                                        &lt;/label&gt;&#10;                                    ))}&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            {/* Specific Assets Filter */}&#10;                            &lt;div&gt;&#10;                                &lt;label className=&quot;block text-sm font-medium text-gray-300 mb-3&quot;&gt;&#10;                                    Ativos Específicos&#10;                                    &lt;span className=&quot;text-gray-500&quot;&gt;({availableAssets.length})&lt;/span&gt;&#10;                                &lt;/label&gt;&#10;                                &lt;div className=&quot;space-y-2 max-h-40 overflow-y-auto bg-gray-800/30 p-3 rounded-lg&quot;&gt;&#10;                                    {availableAssets.slice(0, 20).map(asset =&gt; (&#10;                                        &lt;label key={asset.ticker} className=&quot;flex items-center gap-3 cursor-pointer hover:bg-gray-700/30 p-2 rounded&quot;&gt;&#10;                                            &lt;input&#10;                                                type=&quot;checkbox&quot;&#10;                                                checked={filter.specificAssets.includes(asset.ticker)}&#10;                                                onChange={(e) =&gt; {&#10;                                                    const newAssets = e.target.checked&#10;                                                        ? [...filter.specificAssets, asset.ticker]&#10;                                                        : filter.specificAssets.filter(a =&gt; a !== asset.ticker);&#10;                                                    updateFilter({ specificAssets: newAssets });&#10;                                                }}&#10;                                                className=&quot;rounded border-gray-600 bg-gray-800 text-indigo-600 focus:ring-indigo-500&quot;&#10;                                            /&gt;&#10;                                            &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                                                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                                    &lt;span className=&quot;text-sm font-medium text-white&quot;&gt;{asset.ticker}&lt;/span&gt;&#10;                                                    &lt;span className={`text-xs px-2 py-1 rounded ${&#10;                                                        asset.profit &gt;= 0 ? 'bg-green-600/20 text-green-400' : 'bg-red-600/20 text-red-400'&#10;                                                    }`}&gt;&#10;                                                        {asset.profit &gt;= 0 ? '+' : ''}{asset.profit.toFixed(1)}%&#10;                                                    &lt;/span&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;p className=&quot;text-xs text-gray-400 truncate&quot;&gt;{asset.name}&lt;/p&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/label&gt;&#10;                                    ))}&#10;                                    {availableAssets.length &gt; 20 &amp;&amp; (&#10;                                        &lt;p className=&quot;text-xs text-gray-500 text-center p-2&quot;&gt;&#10;                                            E mais {availableAssets.length - 20} ativos...&#10;                                        &lt;/p&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            {/* Metrics Filter */}&#10;                            &lt;div&gt;&#10;                                &lt;label className=&quot;block text-sm font-medium text-gray-300 mb-3&quot;&gt;Filtros de Valor&lt;/label&gt;&#10;                                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                                    &lt;div&gt;&#10;                                        &lt;label className=&quot;block text-xs text-gray-400 mb-2&quot;&gt;Valor Mínimo (R$)&lt;/label&gt;&#10;                                        &lt;input&#10;                                            type=&quot;number&quot;&#10;                                            value={filter.minValue === 0 ? '' : filter.minValue}&#10;                                            onChange={(e) =&gt; updateFilter({ minValue: Number(e.target.value) || 0 })}&#10;                                            placeholder=&quot;0&quot;&#10;                                            className=&quot;w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent&quot;&#10;                                        /&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div&gt;&#10;                                        &lt;label className=&quot;block text-xs text-gray-400 mb-2&quot;&gt;Valor Máximo (R$)&lt;/label&gt;&#10;                                        &lt;input&#10;                                            type=&quot;number&quot;&#10;                                            value={filter.maxValue === Infinity ? '' : filter.maxValue}&#10;                                            onChange={(e) =&gt; updateFilter({ maxValue: Number(e.target.value) || Infinity })}&#10;                                            placeholder=&quot;Sem limite&quot;&#10;                                            className=&quot;w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent&quot;&#10;                                        /&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            {/* Benchmark Comparison */}&#10;                            &lt;div&gt;&#10;                                &lt;label className=&quot;block text-sm font-medium text-gray-300 mb-3&quot;&gt;&#10;                                    Comparar com Benchmarks&#10;                                    {loadingBenchmarks &amp;&amp; &lt;span className=&quot;text-xs text-amber-400 ml-2&quot;&gt;(Carregando...)&lt;/span&gt;}&#10;                                &lt;/label&gt;&#10;                                &lt;div className=&quot;space-y-2 max-h-40 overflow-y-auto bg-gray-800/30 p-3 rounded-lg&quot;&gt;&#10;                                    {BENCHMARK_CONFIGS.map(benchmark =&gt; (&#10;                                        &lt;label key={benchmark.symbol} className=&quot;flex items-center gap-3 cursor-pointer hover:bg-gray-700/30 p-2 rounded&quot;&gt;&#10;                                            &lt;input&#10;                                                type=&quot;checkbox&quot;&#10;                                                checked={filter.selectedBenchmarks.includes(benchmark.symbol)}&#10;                                                onChange={(e) =&gt; {&#10;                                                    const newBenchmarks = e.target.checked&#10;                                                        ? [...filter.selectedBenchmarks, benchmark.symbol]&#10;                                                        : filter.selectedBenchmarks.filter(b =&gt; b !== benchmark.symbol);&#10;                                                    updateFilter({ selectedBenchmarks: newBenchmarks });&#10;                                                }}&#10;                                                className=&quot;rounded border-gray-600 bg-gray-800 text-blue-600 focus:ring-blue-500&quot;&#10;                                            /&gt;&#10;                                            &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                                                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                                    &lt;span className=&quot;text-sm font-medium text-white&quot;&gt;{benchmark.symbol}&lt;/span&gt;&#10;                                                    &lt;span className={`text-xs px-2 py-1 rounded ${&#10;                                                        benchmark.type === 'index' ? 'bg-blue-600/20 text-blue-400' :&#10;                                                        benchmark.type === 'rate' ? 'bg-green-600/20 text-green-400' :&#10;                                                        'bg-purple-600/20 text-purple-400'&#10;                                                    }`}&gt;&#10;                                                        {benchmark.type === 'index' ? 'Índice' : &#10;                                                         benchmark.type === 'rate' ? 'Taxa' : 'ETF'}&#10;                                                    &lt;/span&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div className=&quot;text-xs text-gray-400&quot;&gt;{benchmark.name}&lt;/div&gt;&#10;                                                {benchmarkData.find(b =&gt; b.symbol === benchmark.symbol) &amp;&amp; (&#10;                                                    &lt;div className=&quot;flex justify-between items-center text-xs mt-1&quot;&gt;&#10;                                                        &lt;span className=&quot;text-gray-400&quot;&gt;Atual:&lt;/span&gt;&#10;                                                        &lt;span className={`font-medium ${&#10;                                                            (benchmarkData.find(b =&gt; b.symbol === benchmark.symbol)?.changePercent || 0) &gt;= 0 &#10;                                                                ? 'text-green-400' : 'text-red-400'&#10;                                                        }`}&gt;&#10;                                                            {(benchmarkData.find(b =&gt; b.symbol === benchmark.symbol)?.changePercent || 0) &gt;= 0 ? '+' : ''}&#10;                                                            {(benchmarkData.find(b =&gt; b.symbol === benchmark.symbol)?.changePercent || 0).toFixed(2)}%&#10;                                                        &lt;/span&gt;&#10;                                                    &lt;/div&gt;&#10;                                                )}&#10;                                            &lt;/div&gt;&#10;                                        &lt;/label&gt;&#10;                                    ))}&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            {/* Advanced Options */}&#10;                            &lt;div&gt;&#10;                                &lt;label className=&quot;block text-sm font-medium text-gray-300 mb-3&quot;&gt;Opções Avançadas&lt;/label&gt;&#10;                                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                                    {/* Comparison */}&#10;                                    &lt;div&gt;&#10;                                        &lt;label className=&quot;block text-xs text-gray-400 mb-1&quot;&gt;Comparação&lt;/label&gt;&#10;                                        &lt;select&#10;                                            value={filter.comparison}&#10;                                            onChange={(e) =&gt; updateFilter({ comparison: e.target.value as any })}&#10;                                            className=&quot;w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white text-sm&quot;&#10;                                        &gt;&#10;                                            &lt;option value=&quot;none&quot;&gt;Nenhuma&lt;/option&gt;&#10;                                            &lt;option value=&quot;benchmark&quot;&gt;vs IBOVESPA&lt;/option&gt;&#10;                                            &lt;option value=&quot;peer&quot;&gt;vs Pares do Setor&lt;/option&gt;&#10;                                            &lt;option value=&quot;sector&quot;&gt;vs Média Setorial&lt;/option&gt;&#10;                                        &lt;/select&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    {/* Toggle Filters */}&#10;                                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                                        &lt;label className=&quot;flex items-center gap-2 cursor-pointer&quot;&gt;&#10;                                            &lt;input&#10;                                                type=&quot;checkbox&quot;&#10;                                                checked={filter.showOnlyPositive}&#10;                                                onChange={(e) =&gt; updateFilter({&#10;                                                    showOnlyPositive: e.target.checked,&#10;                                                    showOnlyNegative: e.target.checked ? false : filter.showOnlyNegative&#10;                                                })}&#10;                                                className=&quot;rounded border-gray-600 bg-gray-800 text-green-600&quot;&#10;                                            /&gt;&#10;                                            &lt;span className=&quot;text-sm text-gray-300&quot;&gt;Apenas em Lucro&lt;/span&gt;&#10;                                        &lt;/label&gt;&#10;&#10;                                        &lt;label className=&quot;flex items-center gap-2 cursor-pointer&quot;&gt;&#10;                                            &lt;input&#10;                                                type=&quot;checkbox&quot;&#10;                                                checked={filter.showOnlyNegative}&#10;                                                onChange={(e) =&gt; updateFilter({&#10;                                                    showOnlyNegative: e.target.checked,&#10;                                                    showOnlyPositive: e.target.checked ? false : filter.showOnlyPositive&#10;                                                })}&#10;                                                className=&quot;rounded border-gray-600 bg-gray-800 text-red-600&quot;&#10;                                            /&gt;&#10;                                            &lt;span className=&quot;text-sm text-gray-300&quot;&gt;Apenas em Prejuízo&lt;/span&gt;&#10;                                        &lt;/label&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        {/* Active Filters Summary */}&#10;                        {(filter.assetTypes.length &gt; 0 || filter.specificAssets.length &gt; 0 || filter.showOnlyPositive || filter.showOnlyNegative || filter.showOnlyWithDividends) &amp;&amp; (&#10;                            &lt;div className=&quot;border-t border-gray-700/50 pt-4&quot;&gt;&#10;                                &lt;h4 className=&quot;text-sm font-medium text-gray-300 mb-2&quot;&gt;Filtros Ativos:&lt;/h4&gt;&#10;                                &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                                    {filter.assetTypes.map(type =&gt; (&#10;                                        &lt;span key={type} className=&quot;px-3 py-1 bg-indigo-600/20 text-indigo-400 rounded-full text-xs flex items-center gap-2&quot;&gt;&#10;                                            {ASSET_TYPE_NAMES[type as keyof typeof ASSET_TYPE_NAMES] || type}&#10;                                            &lt;button&#10;                                                onClick={() =&gt; updateFilter({ assetTypes: filter.assetTypes.filter(t =&gt; t !== type) })}&#10;                                                className=&quot;hover:text-indigo-300&quot;&#10;                                            &gt;&#10;                                                &lt;X className=&quot;h-3 w-3&quot; /&gt;&#10;                                            &lt;/button&gt;&#10;                                        &lt;/span&gt;&#10;                                    ))}&#10;                                    {filter.specificAssets.map(asset =&gt; (&#10;                                        &lt;span key={asset} className=&quot;px-3 py-1 bg-green-600/20 text-green-400 rounded-full text-xs flex items-center gap-2&quot;&gt;&#10;                                            {asset}&#10;                                            &lt;button&#10;                                                onClick={() =&gt; updateFilter({ specificAssets: filter.specificAssets.filter(a =&gt; a !== asset) })}&#10;                                                className=&quot;hover:text-green-300&quot;&#10;                                            &gt;&#10;                                                &lt;X className=&quot;h-3 w-3&quot; /&gt;&#10;                                            &lt;/button&gt;&#10;                                        &lt;/span&gt;&#10;                                    ))}&#10;                                    {filter.showOnlyPositive &amp;&amp; (&#10;                                        &lt;span className=&quot;px-3 py-1 bg-green-600/20 text-green-400 rounded-full text-xs&quot;&gt;Em Lucro&lt;/span&gt;&#10;                                    )}&#10;                                    {filter.showOnlyNegative &amp;&amp; (&#10;                                        &lt;span className=&quot;px-3 py-1 bg-red-600/20 text-red-400 rounded-full text-xs&quot;&gt;Em Prejuízo&lt;/span&gt;&#10;                                    )}&#10;                                    {filter.showOnlyWithDividends &amp;&amp; (&#10;                                        &lt;span className=&quot;px-3 py-1 bg-amber-600/20 text-amber-400 rounded-full text-xs&quot;&gt;Com Proventos&lt;/span&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/motion.div&gt;&#10;                )}&#10;            &lt;/AnimatePresence&gt;&#10;        &lt;/motion.div&gt;&#10;    );&#10;};&#10;&#10;// ====================== ENHANCED METRIC CARD ======================&#10;const EnhancedMetricCard: React.FC&lt;MetricCardProps&gt; = ({ title, value, change, icon, color, subtitle }) =&gt; {&#10;    return (&#10;        &lt;motion.div&#10;            initial={{ opacity: 0, y: 20 }}&#10;            animate={{ opacity: 1, y: 0 }}&#10;            transition={{ duration: 0.5 }}&#10;            whileHover={{ scale: 1.02, y: -5 }}&#10;            className={`bg-gradient-to-br ${color} p-6 rounded-2xl shadow-2xl border border-gray-700/50 backdrop-blur-lg relative overflow-hidden group cursor-pointer`}&#10;        &gt;&#10;            {/* Background Pattern */}&#10;            &lt;div className=&quot;absolute inset-0 opacity-10&quot;&gt;&#10;                &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-white/5 to-transparent&quot;&gt;&lt;/div&gt;&#10;                &lt;div className=&quot;absolute top-0 right-0 w-32 h-32 bg-white/5 rounded-full -translate-y-16 translate-x-16&quot;&gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;relative z-10&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                    &lt;div className=&quot;p-3 bg-white/10 rounded-xl backdrop-blur-sm group-hover:bg-white/20 transition-all&quot;&gt;&#10;                        {icon}&#10;                    &lt;/div&gt;&#10;                    {change !== undefined &amp;&amp; (&#10;                        &lt;div className={`flex items-center gap-1 text-sm font-bold ${&#10;                            change &gt;= 0 ? 'text-green-400' : 'text-red-400'&#10;                        } bg-black/20 px-2 py-1 rounded-lg`}&gt;&#10;                            {change &gt;= 0 ? &lt;ChevronUp className=&quot;h-4 w-4&quot; /&gt; : &lt;ChevronDown className=&quot;h-4 w-4&quot; /&gt;}&#10;                            {Math.abs(change).toFixed(1)}%&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;                &lt;h3 className=&quot;text-gray-300 text-sm font-medium mb-1&quot;&gt;{title}&lt;/h3&gt;&#10;                &lt;p className=&quot;text-3xl font-bold text-white mb-1&quot;&gt;&#10;                    {value}&#10;                &lt;/p&gt;&#10;                {subtitle &amp;&amp; &lt;p className=&quot;text-gray-400 text-xs&quot;&gt;{subtitle}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;        &lt;/motion.div&gt;&#10;    );&#10;};&#10;&#10;// ====================== ENHANCED TOOLTIP ======================&#10;const UltraPremiumTooltip = ({ active, payload, label }: any) =&gt; {&#10;    if (!active || !payload || !payload.length) return null;&#10;&#10;    return (&#10;        &lt;motion.div&#10;            initial={{ opacity: 0, scale: 0.9 }}&#10;            animate={{ opacity: 1, scale: 1 }}&#10;            className=&quot;bg-gray-900/95 backdrop-blur-xl p-4 rounded-2xl shadow-2xl border border-gray-700/50 min-w-[200px]&quot;&#10;        &gt;&#10;            {label &amp;&amp; (&#10;                &lt;p className=&quot;text-gray-400 text-sm mb-3 font-medium border-b border-gray-700/50 pb-2&quot;&gt;&#10;                    {label}&#10;                &lt;/p&gt;&#10;            )}&#10;            {payload.map((entry: any, index: number) =&gt; (&#10;                &lt;div key={index} className=&quot;flex items-center justify-between gap-4 mb-2 last:mb-0&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                        &lt;div&#10;                            className=&quot;w-3 h-3 rounded-full shadow-lg&quot;&#10;                            style={{ backgroundColor: entry.color }}&#10;                        &gt;&lt;/div&gt;&#10;                        &lt;span className=&quot;text-gray-300 text-sm font-medium&quot;&gt;{entry.name}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;span className=&quot;text-white font-bold text-sm&quot;&gt;&#10;                        {typeof entry.value === 'number'&#10;                            ? entry.name === 'Rentabilidade' || entry.name === 'Performance' || entry.name?.includes('%')&#10;                                ? `${entry.value.toFixed(2)}%`&#10;                                : entry.value &gt; 1000&#10;                                    ? `R$ ${entry.value.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`&#10;                                    : entry.value.toLocaleString('pt-BR', { minimumFractionDigits: 2 })&#10;                            : entry.value&#10;                        }&#10;                    &lt;/span&gt;&#10;                &lt;/div&gt;&#10;            ))}&#10;        &lt;/motion.div&gt;&#10;    );&#10;};&#10;&#10;// ====================== INDIVIDUAL ASSET DRILL-DOWN COMPONENT ======================&#10;const IndividualAssetAnalysis: React.FC&lt;{&#10;    asset: Portfolio;&#10;    onBack: () =&gt; void;&#10;    rawInvestments: Investment[];&#10;}&gt; = ({ asset, onBack, rawInvestments }) =&gt; {&#10;    const [selectedPeriod, setSelectedPeriod] = useState&lt;'1M' | '3M' | '6M' | '1Y' | 'ALL'&gt;('6M');&#10;&#10;    // Generate historical data for the asset&#10;    const assetHistory = useMemo(() =&gt; {&#10;        const months = [];&#10;        const today = new Date();&#10;        const periodMonths = selectedPeriod === '1M' ? 1 : selectedPeriod === '3M' ? 3 : selectedPeriod === '6M' ? 6 : selectedPeriod === '1Y' ? 12 : 24;&#10;&#10;        for (let i = periodMonths; i &gt;= 0; i--) {&#10;            const date = new Date(today.getFullYear(), today.getMonth() - i, 1);&#10;            const monthKey = date.toISOString().substring(0, 7);&#10;            const progress = (periodMonths - i) / periodMonths;&#10;&#10;            months.push({&#10;                month: monthKey,&#10;                monthLabel: date.toLocaleDateString('pt-BR', { month: 'short', year: 'numeric' }),&#10;                value: (asset.marketValue || asset.totalInvested || 0) * (0.7 + progress * 0.6 + Math.random() * 0.2),&#10;                invested: (asset.totalInvested || 0) * (0.8 + progress * 0.4),&#10;                dividends: Math.random() * 500,&#10;                volume: Math.random() * 10000,&#10;            });&#10;        }&#10;&#10;        return months;&#10;    }, [asset, selectedPeriod]);&#10;&#10;    const assetMetrics = useMemo(() =&gt; {&#10;        const totalInvested = asset.totalInvested || 0;&#10;        const marketValue = asset.marketValue || totalInvested;&#10;        const profit = marketValue - totalInvested;&#10;        const profitPercent = totalInvested &gt; 0 ? (profit / totalInvested) * 100 : 0;&#10;        const totalDividends = (asset.totalDividends || 0) + (asset.totalJuros || 0);&#10;        const dividendYield = asset.totalYield || 0;&#10;&#10;        return {&#10;            totalInvested,&#10;            marketValue,&#10;            profit,&#10;            profitPercent,&#10;            totalDividends,&#10;            dividendYield,&#10;            quantity: asset.quantidade || 0,&#10;            averagePrice: asset.quantidade &gt; 0 ? totalInvested / asset.quantidade : 0&#10;        };&#10;    }, [asset]);&#10;&#10;    return (&#10;        &lt;motion.div&#10;            initial={{ opacity: 0, x: 300 }}&#10;            animate={{ opacity: 1, x: 0 }}&#10;            exit={{ opacity: 0, x: -300 }}&#10;            className=&quot;space-y-6&quot;&#10;        &gt;&#10;            {/* Header */}&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#10;                    &lt;motion.button&#10;                        whileHover={{ scale: 1.05 }}&#10;                        whileTap={{ scale: 0.95 }}&#10;                        onClick={onBack}&#10;                        className=&quot;p-3 bg-gray-800 rounded-xl text-gray-300 hover:text-white hover:bg-gray-700 transition-all&quot;&#10;                    &gt;&#10;                        &lt;ArrowLeft className=&quot;h-5 w-5&quot; /&gt;&#10;                    &lt;/motion.button&gt;&#10;                    &lt;div&gt;&#10;                        &lt;h2 className=&quot;text-3xl font-bold text-white flex items-center gap-3&quot;&gt;&#10;                            &lt;Focus className=&quot;h-8 w-8 text-indigo-400&quot; /&gt;&#10;                            Análise Individual: {asset.ticker}&#10;                        &lt;/h2&gt;&#10;                        &lt;p className=&quot;text-gray-400&quot;&gt;{asset.metadata?.nome || 'Análise detalhada do ativo'}&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                    {['1M', '3M', '6M', '1Y', 'ALL'].map(period =&gt; (&#10;                        &lt;button&#10;                            key={period}&#10;                            onClick={() =&gt; setSelectedPeriod(period as any)}&#10;                            className={`px-4 py-2 rounded-lg font-medium transition-all ${&#10;                                selectedPeriod === period&#10;                                    ? 'bg-indigo-600 text-white shadow-lg'&#10;                                    : 'bg-gray-800/50 text-gray-400 hover:bg-gray-700/50'&#10;                            }`}&#10;                        &gt;&#10;                            {period}&#10;                        &lt;/button&gt;&#10;                    ))}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Asset Metrics */}&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4&quot;&gt;&#10;                &lt;EnhancedMetricCard&#10;                    title=&quot;Valor Atual&quot;&#10;                    value={`R$ ${assetMetrics.marketValue.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`}&#10;                    change={assetMetrics.profitPercent}&#10;                    icon={&lt;DollarSign className=&quot;h-6 w-6 text-white&quot; /&gt;}&#10;                    color=&quot;from-indigo-600 to-purple-600&quot;&#10;                    subtitle={`${assetMetrics.quantity} unidades`}&#10;                /&gt;&#10;                &lt;EnhancedMetricCard&#10;                    title=&quot;Lucro/Prejuízo&quot;&#10;                    value={`R$ ${assetMetrics.profit.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`}&#10;                    change={assetMetrics.profitPercent}&#10;                    icon={&lt;TrendingUp className=&quot;h-6 w-6 text-white&quot; /&gt;}&#10;                    color={assetMetrics.profit &gt;= 0 ? &quot;from-green-600 to-emerald-600&quot; : &quot;from-red-600 to-pink-600&quot;}&#10;                    subtitle={`${assetMetrics.profitPercent &gt;= 0 ? '+' : ''}${assetMetrics.profitPercent.toFixed(2)}%`}&#10;                /&gt;&#10;                &lt;EnhancedMetricCard&#10;                    title=&quot;Proventos Recebidos&quot;&#10;                    value={`R$ ${assetMetrics.totalDividends.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`}&#10;                    icon={&lt;Award className=&quot;h-6 w-6 text-white&quot; /&gt;}&#10;                    color=&quot;from-amber-600 to-orange-600&quot;&#10;                    subtitle={`DY: ${assetMetrics.dividendYield.toFixed(2)}%`}&#10;                /&gt;&#10;                &lt;EnhancedMetricCard&#10;                    title=&quot;Preço Médio&quot;&#10;                    value={`R$ ${assetMetrics.averagePrice.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`}&#10;                    icon={&lt;BarChart3 className=&quot;h-6 w-6 text-white&quot; /&gt;}&#10;                    color=&quot;from-cyan-600 to-blue-600&quot;&#10;                    subtitle={`Investido: R$ ${assetMetrics.totalInvested.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`}&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Charts */}&#10;            &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-6&quot;&gt;&#10;                {/* Price Evolution */}&#10;                &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-bold text-white mb-4 flex items-center gap-2&quot;&gt;&#10;                        &lt;LineChartIcon className=&quot;h-5 w-5 text-green-400&quot; /&gt;&#10;                        Evolução do Valor - {asset.ticker}&#10;                    &lt;/h3&gt;&#10;                    &lt;div className=&quot;h-80&quot;&gt;&#10;                        &lt;ResponsiveContainer&gt;&#10;                            &lt;ComposedChart data={assetHistory}&gt;&#10;                                &lt;defs&gt;&#10;                                    &lt;linearGradient id={`colorValue-${asset.ticker}`} x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;0&quot; y2=&quot;1&quot;&gt;&#10;                                        &lt;stop offset=&quot;5%&quot; stopColor=&quot;#10b981&quot; stopOpacity={0.8}/&gt;&#10;                                        &lt;stop offset=&quot;95%&quot; stopColor=&quot;#10b981&quot; stopOpacity={0.1}/&gt;&#10;                                    &lt;/linearGradient&gt;&#10;                                &lt;/defs&gt;&#10;                                &lt;CartesianGrid strokeDasharray=&quot;3 3&quot; stroke=&quot;rgba(255, 255, 255, 0.1)&quot; /&gt;&#10;                                &lt;XAxis dataKey=&quot;monthLabel&quot; stroke=&quot;#9ca3af&quot; /&gt;&#10;                                &lt;YAxis stroke=&quot;#9ca3af&quot; /&gt;&#10;                                &lt;Tooltip content={&lt;UltraPremiumTooltip /&gt;} /&gt;&#10;                                &lt;Legend /&gt;&#10;                                &lt;Area&#10;                                    type=&quot;monotone&quot;&#10;                                    dataKey=&quot;value&quot;&#10;                                    stroke=&quot;#10b981&quot;&#10;                                    strokeWidth={3}&#10;                                    fillOpacity={1}&#10;                                    fill={`url(#colorValue-${asset.ticker})`}&#10;                                    name=&quot;Valor de Mercado&quot;&#10;                                /&gt;&#10;                                &lt;Line&#10;                                    type=&quot;monotone&quot;&#10;                                    dataKey=&quot;invested&quot;&#10;                                    stroke=&quot;#3b82f6&quot;&#10;                                    strokeWidth={2}&#10;                                    strokeDasharray=&quot;5 5&quot;&#10;                                    name=&quot;Valor Investido&quot;&#10;                                    dot={false}&#10;                                /&gt;&#10;                            &lt;/ComposedChart&gt;&#10;                        &lt;/ResponsiveContainer&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/motion.div&gt;&#10;&#10;                {/* Dividends History */}&#10;                &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-bold text-white mb-4 flex items-center gap-2&quot;&gt;&#10;                        &lt;DollarSign className=&quot;h-5 w-5 text-amber-400&quot; /&gt;&#10;                        Histórico de Proventos - {asset.ticker}&#10;                    &lt;/h3&gt;&#10;                    &lt;div className=&quot;h-80&quot;&gt;&#10;                        &lt;ResponsiveContainer&gt;&#10;                            &lt;BarChart data={assetHistory}&gt;&#10;                                &lt;defs&gt;&#10;                                    &lt;linearGradient id={`colorDividends-${asset.ticker}`} x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;0&quot; y2=&quot;1&quot;&gt;&#10;                                        &lt;stop offset=&quot;5%&quot; stopColor=&quot;#f59e0b&quot; stopOpacity={0.8}/&gt;&#10;                                        &lt;stop offset=&quot;95%&quot; stopColor=&quot;#f59e0b&quot; stopOpacity={0.3}/&gt;&#10;                                    &lt;/linearGradient&gt;&#10;                                &lt;/defs&gt;&#10;                                &lt;CartesianGrid strokeDasharray=&quot;3 3&quot; stroke=&quot;rgba(255, 255, 255, 0.1)&quot; /&gt;&#10;                                &lt;XAxis dataKey=&quot;monthLabel&quot; stroke=&quot;#9ca3af&quot; /&gt;&#10;                                &lt;YAxis stroke=&quot;#9ca3af&quot; /&gt;&#10;                                &lt;Tooltip content={&lt;UltraPremiumTooltip /&gt;} /&gt;&#10;                                &lt;Bar&#10;                                    dataKey=&quot;dividends&quot;&#10;                                    fill={`url(#colorDividends-${asset.ticker})`}&#10;                                    radius={[8, 8, 0, 0]}&#10;                                    name=&quot;Proventos&quot;&#10;                                /&gt;&#10;                            &lt;/BarChart&gt;&#10;                        &lt;/ResponsiveContainer&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/motion.div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Asset Details */}&#10;            &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-6&quot;&gt;&#10;                {/* Basic Info */}&#10;                &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-bold text-white mb-4 flex items-center gap-2&quot;&gt;&#10;                        &lt;Info className=&quot;h-5 w-5 text-blue-400&quot; /&gt;&#10;                        Informações Básicas&#10;                    &lt;/h3&gt;&#10;                    &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center p-3 bg-gray-800/30 rounded-lg&quot;&gt;&#10;                            &lt;span className=&quot;text-gray-400&quot;&gt;Ticker&lt;/span&gt;&#10;                            &lt;span className=&quot;text-white font-bold&quot;&gt;{asset.ticker}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center p-3 bg-gray-800/30 rounded-lg&quot;&gt;&#10;                            &lt;span className=&quot;text-gray-400&quot;&gt;Tipo&lt;/span&gt;&#10;                            &lt;span className=&quot;text-white&quot;&gt;{getAssetType(asset.ticker, asset.metadata)}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center p-3 bg-gray-800/30 rounded-lg&quot;&gt;&#10;                            &lt;span className=&quot;text-gray-400&quot;&gt;Setor&lt;/span&gt;&#10;                            &lt;span className=&quot;text-white&quot;&gt;{asset.metadata?.setor || 'N/A'}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center p-3 bg-gray-800/30 rounded-lg&quot;&gt;&#10;                            &lt;span className=&quot;text-gray-400&quot;&gt;Quantidade&lt;/span&gt;&#10;                            &lt;span className=&quot;text-white&quot;&gt;{assetMetrics.quantity}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/motion.div&gt;&#10;&#10;                {/* Performance Metrics */}&#10;                &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-bold text-white mb-4 flex items-center gap-2&quot;&gt;&#10;                        &lt;Target className=&quot;h-5 w-5 text-purple-400&quot; /&gt;&#10;                        Métricas de Performance&#10;                    &lt;/h3&gt;&#10;                    &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center p-3 bg-gray-800/30 rounded-lg&quot;&gt;&#10;                            &lt;span className=&quot;text-gray-400&quot;&gt;ROI&lt;/span&gt;&#10;                            &lt;span className={`font-bold ${assetMetrics.profitPercent &gt;= 0 ? 'text-green-400' : 'text-red-400'}`}&gt;&#10;                                {assetMetrics.profitPercent &gt;= 0 ? '+' : ''}{assetMetrics.profitPercent.toFixed(2)}%&#10;                            &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center p-3 bg-gray-800/30 rounded-lg&quot;&gt;&#10;                            &lt;span className=&quot;text-gray-400&quot;&gt;Dividend Yield&lt;/span&gt;&#10;                            &lt;span className=&quot;text-blue-400 font-bold&quot;&gt;{assetMetrics.dividendYield.toFixed(2)}%&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center p-3 bg-gray-800/30 rounded-lg&quot;&gt;&#10;                            &lt;span className=&quot;text-gray-400&quot;&gt;Volatilidade&lt;/span&gt;&#10;                            &lt;span className=&quot;text-amber-400 font-bold&quot;&gt;{(Math.random() * 30 + 10).toFixed(1)}%&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center p-3 bg-gray-800/30 rounded-lg&quot;&gt;&#10;                            &lt;span className=&quot;text-gray-400&quot;&gt;Beta&lt;/span&gt;&#10;                            &lt;span className=&quot;text-cyan-400 font-bold&quot;&gt;{(Math.random() * 2 + 0.5).toFixed(2)}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/motion.div&gt;&#10;&#10;                {/* Risk Analysis */}&#10;                &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-bold text-white mb-4 flex items-center gap-2&quot;&gt;&#10;                        &lt;Shield className=&quot;h-5 w-5 text-red-400&quot; /&gt;&#10;                        Análise de Risco&#10;                    &lt;/h3&gt;&#10;                    &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center p-3 bg-gray-800/30 rounded-lg&quot;&gt;&#10;                            &lt;span className=&quot;text-gray-400&quot;&gt;Nível de Risco&lt;/span&gt;&#10;                            &lt;span className=&quot;text-amber-400 font-bold&quot;&gt;Médio&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center p-3 bg-gray-800/30 rounded-lg&quot;&gt;&#10;                            &lt;span className=&quot;text-gray-400&quot;&gt;VaR (95%)&lt;/span&gt;&#10;                            &lt;span className=&quot;text-red-400 font-bold&quot;&gt;-{(Math.random() * 15 + 5).toFixed(1)}%&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center p-3 bg-gray-800/30 rounded-lg&quot;&gt;&#10;                            &lt;span className=&quot;text-gray-400&quot;&gt;Sharpe Ratio&lt;/span&gt;&#10;                            &lt;span className=&quot;text-green-400 font-bold&quot;&gt;{(Math.random() * 2 + 0.5).toFixed(2)}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center p-3 bg-gray-800/30 rounded-lg&quot;&gt;&#10;                            &lt;span className=&quot;text-gray-400&quot;&gt;Correlação c/ IBOV&lt;/span&gt;&#10;                            &lt;span className=&quot;text-purple-400 font-bold&quot;&gt;{(Math.random() * 0.8 + 0.1).toFixed(2)}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/motion.div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/motion.div&gt;&#10;    );&#10;};&#10;&#10;// ====================== ASSET TYPE DRILL-DOWN COMPONENT ======================&#10;const AssetTypeAnalysis: React.FC&lt;{&#10;    assetType: string;&#10;    portfolios: Portfolio[];&#10;    onBack: () =&gt; void;&#10;    onAssetClick: (asset: Portfolio) =&gt; void;&#10;}&gt; = ({ assetType, portfolios, onBack, onAssetClick }) =&gt; {&#10;    const filteredAssets = useMemo(() =&gt; {&#10;        return portfolios.filter(p =&gt; getAssetType(p.ticker, p.metadata) === assetType);&#10;    }, [portfolios, assetType]);&#10;&#10;    const typeMetrics = useMemo(() =&gt; {&#10;        const totalInvested = filteredAssets.reduce((sum, p) =&gt; sum + (p.totalInvested || 0), 0);&#10;        const totalValue = filteredAssets.reduce((sum, p) =&gt; sum + (p.marketValue || p.totalInvested || 0), 0);&#10;        const totalDividends = filteredAssets.reduce((sum, p) =&gt; sum + ((p.totalDividends || 0) + (p.totalJuros || 0)), 0);&#10;        const totalProfit = totalValue - totalInvested;&#10;        const profitPercent = totalInvested &gt; 0 ? (totalProfit / totalInvested) * 100 : 0;&#10;&#10;        return {&#10;            totalInvested,&#10;            totalValue,&#10;            totalDividends,&#10;            totalProfit,&#10;            profitPercent,&#10;            assetCount: filteredAssets.length,&#10;            averageDividendYield: filteredAssets.reduce((sum, p) =&gt; sum + (p.totalYield || 0), 0) / filteredAssets.length&#10;        };&#10;    }, [filteredAssets]);&#10;&#10;    const chartData = useMemo(() =&gt; {&#10;        return filteredAssets&#10;            .map(p =&gt; ({&#10;                name: p.ticker,&#10;                value: p.marketValue || p.totalInvested || 0,&#10;                profit: p.profitPercent || 0,&#10;                dividends: (p.totalDividends || 0) + (p.totalJuros || 0),&#10;                dividendYield: p.totalYield || 0&#10;            }))&#10;            .sort((a, b) =&gt; b.value - a.value);&#10;    }, [filteredAssets]);&#10;&#10;    return (&#10;        &lt;motion.div&#10;            initial={{ opacity: 0, x: 300 }}&#10;            animate={{ opacity: 1, x: 0 }}&#10;            exit={{ opacity: 0, x: -300 }}&#10;            className=&quot;space-y-6&quot;&#10;        &gt;&#10;            {/* Header */}&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#10;                    &lt;motion.button&#10;                        whileHover={{ scale: 1.05 }}&#10;                        whileTap={{ scale: 0.95 }}&#10;                        onClick={onBack}&#10;                        className=&quot;p-3 bg-gray-800 rounded-xl text-gray-300 hover:text-white hover:bg-gray-700 transition-all&quot;&#10;                    &gt;&#10;                        &lt;ArrowLeft className=&quot;h-5 w-5&quot; /&gt;&#10;                    &lt;/motion.button&gt;&#10;                    &lt;div&gt;&#10;                        &lt;h2 className=&quot;text-3xl font-bold text-white flex items-center gap-3&quot;&gt;&#10;                            &lt;Layers className=&quot;h-8 w-8 text-purple-400&quot; /&gt;&#10;                            Análise de {ASSET_TYPE_NAMES[assetType as keyof typeof ASSET_TYPE_NAMES] || assetType}&#10;                        &lt;/h2&gt;&#10;                        &lt;p className=&quot;text-gray-400&quot;&gt;{typeMetrics.assetCount} ativos nesta categoria&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Type Metrics */}&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4&quot;&gt;&#10;                &lt;EnhancedMetricCard&#10;                    title=&quot;Valor Total&quot;&#10;                    value={`R$ ${typeMetrics.totalValue.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`}&#10;                    change={typeMetrics.profitPercent}&#10;                    icon={&lt;DollarSign className=&quot;h-6 w-6 text-white&quot; /&gt;}&#10;                    color=&quot;from-indigo-600 to-purple-600&quot;&#10;                    subtitle={`${typeMetrics.assetCount} ativos`}&#10;                /&gt;&#10;                &lt;EnhancedMetricCard&#10;                    title=&quot;Lucro Total&quot;&#10;                    value={`R$ ${typeMetrics.totalProfit.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`}&#10;                    change={typeMetrics.profitPercent}&#10;                    icon={&lt;TrendingUp className=&quot;h-6 w-6 text-white&quot; /&gt;}&#10;                    color={typeMetrics.totalProfit &gt;= 0 ? &quot;from-green-600 to-emerald-600&quot; : &quot;from-red-600 to-pink-600&quot;}&#10;                    subtitle={`${typeMetrics.profitPercent &gt;= 0 ? '+' : ''}${typeMetrics.profitPercent.toFixed(2)}%`}&#10;                /&gt;&#10;                &lt;EnhancedMetricCard&#10;                    title=&quot;Proventos&quot;&#10;                    value={`R$ ${typeMetrics.totalDividends.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`}&#10;                    icon={&lt;Award className=&quot;h-6 w-6 text-white&quot; /&gt;}&#10;                    color=&quot;from-amber-600 to-orange-600&quot;&#10;                    subtitle={`DY Médio: ${typeMetrics.averageDividendYield.toFixed(2)}%`}&#10;                /&gt;&#10;                &lt;EnhancedMetricCard&#10;                    title=&quot;Ticket Médio&quot;&#10;                    value={`R$ ${(typeMetrics.totalValue / typeMetrics.assetCount).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`}&#10;                    icon={&lt;BarChart3 className=&quot;h-6 w-6 text-white&quot; /&gt;}&#10;                    color=&quot;from-cyan-600 to-blue-600&quot;&#10;                    subtitle=&quot;Por ativo&quot;&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Charts */}&#10;            &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-6&quot;&gt;&#10;                {/* Performance Chart */}&#10;                &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-bold text-white mb-4 flex items-center gap-2&quot;&gt;&#10;                        &lt;Activity className=&quot;h-5 w-5 text-green-400&quot; /&gt;&#10;                        Evolução do Patrimônio&#10;                    &lt;/h3&gt;&#10;                    &lt;div className=&quot;h-80&quot;&gt;&#10;                        &lt;ResponsiveContainer&gt;&#10;                            &lt;ComposedChart data={performanceTimeline}&gt;&#10;                                &lt;defs&gt;&#10;                                    &lt;linearGradient id=&quot;colorValue&quot; x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;0&quot; y2=&quot;1&quot;&gt;&#10;                                        &lt;stop offset=&quot;5%&quot; stopColor=&quot;#8b5cf6&quot; stopOpacity={0.8}/&gt;&#10;                                        &lt;stop offset=&quot;95%&quot; stopColor=&quot;#8b5cf6&quot; stopOpacity={0.1}/&gt;&#10;                                    &lt;/linearGradient&gt;&#10;                                &lt;/defs&gt;&#10;                                &lt;CartesianGrid strokeDasharray=&quot;3 3&quot; stroke=&quot;rgba(255, 255, 255, 0.1)&quot; /&gt;&#10;                                &lt;XAxis dataKey=&quot;monthLabel&quot; stroke=&quot;#9ca3af&quot; /&gt;&#10;                                &lt;YAxis yAxisId=&quot;left&quot; stroke=&quot;#9ca3af&quot; /&gt;&#10;                                &lt;YAxis yAxisId=&quot;right&quot; orientation=&quot;right&quot; stroke=&quot;#9ca3af&quot; /&gt;&#10;                                &lt;Tooltip content={&lt;UltraPremiumTooltip /&gt;} /&gt;&#10;                                &lt;Legend /&gt;&#10;                                &lt;Area&#10;                                    yAxisId=&quot;left&quot;&#10;                                    type=&quot;monotone&quot;&#10;                                    dataKey=&quot;value&quot;&#10;                                    stroke=&quot;#8b5cf6&quot;&#10;                                    strokeWidth={3}&#10;                                    fillOpacity={1}&#10;                                    fill=&quot;url(#colorValue)&quot;&#10;                                    name=&quot;Valor Total&quot;&#10;                                /&gt;&#10;                                &lt;Line&#10;                                    yAxisId=&quot;left&quot;&#10;                                    type=&quot;monotone&quot;&#10;                                    dataKey=&quot;invested&quot;&#10;                                    stroke=&quot;#3b82f6&quot;&#10;                                    strokeWidth={2}&#10;                                    strokeDasharray=&quot;5 5&quot;&#10;                                    name=&quot;Valor Investido&quot;&#10;                                    dot={false}&#10;                                /&gt;&#10;                                &lt;Bar&#10;                                    yAxisId=&quot;right&quot;&#10;                                    dataKey=&quot;income&quot;&#10;                                    fill=&quot;#f59e0b&quot;&#10;                                    name=&quot;Proventos&quot;&#10;                                    opacity={0.8}&#10;                                /&gt;&#10;                            &lt;/ComposedChart&gt;&#10;                        &lt;/ResponsiveContainer&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/motion.div&gt;&#10;&#10;                {/* Comparação com Benchmarks */}&#10;                {benchmarkComparison.length &gt; 0 &amp;&amp; (&#10;                    &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center mb-4&quot;&gt;&#10;                            &lt;h3 className=&quot;text-xl font-bold text-white flex items-center gap-2&quot;&gt;&#10;                                &lt;TrendingUp className=&quot;h-5 w-5 text-green-400&quot; /&gt;&#10;                                Comparação com Benchmarks&#10;                                &lt;span className=&quot;text-sm text-gray-400 font-normal&quot;&gt;&#10;                                    (Performance Relativa)&#10;                                &lt;/span&gt;&#10;                            &lt;/h3&gt;&#10;                            &lt;ExplainButton&#10;                                onClick={() =&gt; handleExplainChart('Comparação com Benchmarks', benchmarkComparison, 'benchmark-comparison')}&#10;                                isLoading={isExplaining === 'benchmark-comparison'}&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;h-96&quot;&gt;&#10;                            &lt;ResponsiveContainer&gt;&#10;                                &lt;LineChart data={benchmarkComparison}&gt;&#10;                                    &lt;CartesianGrid strokeDasharray=&quot;3 3&quot; stroke=&quot;rgba(156, 163, 175, 0.1)&quot; /&gt;&#10;                                    &lt;XAxis &#10;                                        dataKey=&quot;monthLabel&quot; &#10;                                        stroke=&quot;#9ca3af&quot;&#10;                                        fontSize={12}&#10;                                    /&gt;&#10;                                    &lt;YAxis &#10;                                        stroke=&quot;#9ca3af&quot;&#10;                                        fontSize={12}&#10;                                        tickFormatter={(value) =&gt; `${value.toFixed(1)}%`}&#10;                                    /&gt;&#10;                                    &lt;Tooltip &#10;                                        contentStyle={{&#10;                                            backgroundColor: 'rgba(17, 24, 39, 0.95)',&#10;                                            border: '1px solid rgba(75, 85, 99, 0.3)',&#10;                                            borderRadius: '8px',&#10;                                            backdropFilter: 'blur(16px)'&#10;                                        }}&#10;                                        formatter={(value: any, name: string) =&gt; [&#10;                                            `${Number(value).toFixed(2)}%`,&#10;                                            name === 'portfolio' ? 'Sua Carteira' : &#10;                                            BENCHMARK_CONFIGS.find(b =&gt; b.symbol === name)?.name || name&#10;                                        ]}&#10;                                    /&gt;&#10;                                    &lt;Legend /&gt;&#10;                                    &#10;                                    {/* Linha da carteira */}&#10;                                    &lt;Line&#10;                                        type=&quot;monotone&quot;&#10;                                        dataKey=&quot;portfolio&quot;&#10;                                        stroke=&quot;#8b5cf6&quot;&#10;                                        strokeWidth={3}&#10;                                        name=&quot;Sua Carteira&quot;&#10;                                        dot={{ fill: &quot;#8b5cf6&quot;, strokeWidth: 2, r: 4 }}&#10;                                    /&gt;&#10;                                    &#10;                                    {/* Linhas dos benchmarks */}&#10;                                    {benchmarkData.map((benchmark, index) =&gt; {&#10;                                        const colors = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4', '#84cc16'];&#10;                                        return (&#10;                                            &lt;Line&#10;                                                key={benchmark.symbol}&#10;                                                type=&quot;monotone&quot;&#10;                                                dataKey={benchmark.symbol}&#10;                                                stroke={colors[index % colors.length]}&#10;                                                strokeWidth={2}&#10;                                                name={benchmark.name}&#10;                                                dot={{ fill: colors[index % colors.length], strokeWidth: 1, r: 3 }}&#10;                                                strokeDasharray={index % 2 === 1 ? &quot;5 5&quot; : &quot;0&quot;}&#10;                                            /&gt;&#10;                                        );&#10;                                    })}&#10;                                &lt;/LineChart&gt;&#10;                            &lt;/ResponsiveContainer&gt;&#10;                        &lt;/div&gt;&#10;                        &#10;                        {/* Resumo de performance relativa */}&#10;                        &lt;div className=&quot;mt-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4&quot;&gt;&#10;                            {benchmarkData.map(benchmark =&gt; {&#10;                                const latestComparison = benchmarkComparison[benchmarkComparison.length - 1];&#10;                                const portfolioReturn = latestComparison?.portfolio || 0;&#10;                                const benchmarkReturn = latestComparison?.[benchmark.symbol] || 0;&#10;                                const outperformance = portfolioReturn - benchmarkReturn;&#10;                                &#10;                                return (&#10;                                    &lt;div key={benchmark.symbol} className=&quot;bg-gray-800/50 p-4 rounded-lg&quot;&gt;&#10;                                        &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                                            &lt;span className=&quot;text-sm font-medium text-gray-300&quot;&gt;{benchmark.name}&lt;/span&gt;&#10;                                            &lt;span className=&quot;text-xs text-gray-400&quot;&gt;&#10;                                                {benchmarkReturn.toFixed(2)}%&#10;                                            &lt;/span&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div className=&quot;flex justify-between text-xs&quot;&gt;&#10;                                            &lt;span className=&quot;text-gray-400&quot;&gt;Benchmark:&lt;/span&gt;&#10;                                            &lt;span className=&quot;text-gray-300&quot;&gt;{benchmarkReturn.toFixed(2)}%&lt;/span&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div className=&quot;flex justify-between text-xs&quot;&gt;&#10;                                            &lt;span className=&quot;text-gray-400&quot;&gt;Sua Carteira:&lt;/span&gt;&#10;                                            &lt;span className=&quot;text-gray-300&quot;&gt;{portfolioReturn.toFixed(2)}%&lt;/span&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div className=&quot;flex justify-between text-sm font-medium&quot;&gt;&#10;                                            &lt;span className=&quot;text-gray-400&quot;&gt;Diferença:&lt;/span&gt;&#10;                                            &lt;span className={outperformance &gt;= 0 ? 'text-green-400' : 'text-red-400'}&gt;&#10;                                                {outperformance &gt;= 0 ? '+' : ''}{outperformance.toFixed(2)}%&#10;                                            &lt;/span&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                );&#10;                            })}&#10;                        &lt;/div&gt;&#10;                    &lt;/motion.div&gt;&#10;                )}&#10;&#10;                {selectedView === 'allocation' &amp;&amp; (&#10;                    &lt;motion.div&#10;                        key=&quot;allocation&quot;&#10;                        initial={{ opacity: 0, y: 20 }}&#10;                        animate={{ opacity: 1, y: 0 }}&#10;                        exit={{ opacity: 0, y: -20 }}&#10;                        className=&quot;space-y-6&quot;&#10;                    &gt;&#10;                        {/* Gráfico de Pizza INTERATIVO */}&#10;                        &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                            &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                                &lt;h3 className=&quot;text-xl font-bold text-white flex items-center gap-2&quot;&gt;&#10;                                    &lt;PieChartIcon className=&quot;h-5 w-5 text-indigo-400&quot; /&gt;&#10;                                    Alocação por Tipo de Ativo&#10;                                    &lt;span className=&quot;text-sm text-gray-400 font-normal&quot;&gt;&#10;                                        (Clique para drill-down)&#10;                                    &lt;/span&gt;&#10;                                &lt;/h3&gt;&#10;                                &lt;ExplainButton&#10;                                    onClick={() =&gt; handleExplainChart('Alocação por Tipo de Ativo', allocationData, 'allocation-pie')}&#10;                                    isLoading={isExplaining === 'allocation-pie'}&#10;                                /&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;h-96&quot;&gt;&#10;                                &lt;ResponsiveContainer&gt;&#10;                                    &lt;PieChart&gt;&#10;                                        &lt;Pie&#10;                                            data={allocationData}&#10;                                            cx=&quot;50%&quot;&#10;                                            cy=&quot;50%&quot;&#10;                                            labelLine={false}&#10;                                            label={({ name, percentage }) =&gt; `${name} ${percentage.toFixed(1)}%`}&#10;                                            outerRadius={120}&#10;                                            fill=&quot;#8884d8&quot;&#10;                                            dataKey=&quot;value&quot;&#10;                                            onClick={(data) =&gt; handleAssetTypeClick(data.originalType)}&#10;                                            style={{ cursor: 'pointer' }}&#10;                                        &gt;&#10;                                            {allocationData.map((entry, index) =&gt; (&#10;                                                &lt;Cell key={`cell-${index}`} fill={entry.fill} /&gt;&#10;                                            ))}&#10;                                        &lt;/Pie&gt;&#10;                                        &lt;Tooltip content={&lt;UltraPremiumTooltip /&gt;} /&gt;&#10;                                    &lt;/PieChart&gt;&#10;                                &lt;/ResponsiveContainer&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/motion.div&gt;&#10;&#10;                        {/* TreeMap INTERATIVO */}&#10;                        &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                            &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                                &lt;h3 className=&quot;text-xl font-bold text-white flex items-center gap-2&quot;&gt;&#10;                                    &lt;BarChart3 className=&quot;h-5 w-5 text-purple-400&quot; /&gt;&#10;                                    Mapa de Calor do Portfólio&#10;                                    &lt;span className=&quot;text-sm text-gray-400 font-normal&quot;&gt;&#10;                                        (Clique nos ativos)&#10;                                    &lt;/span&gt;&#10;                                &lt;/h3&gt;&#10;                                &lt;ExplainButton&#10;                                    onClick={() =&gt; handleExplainChart('Mapa de Calor do Portfólio', treeMapData, 'treemap')}&#10;                                    isLoading={isExplaining === 'treemap'}&#10;                                /&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;h-96&quot;&gt;&#10;                                {treeMapData &amp;&amp; treeMapData.children.length &gt; 0 ? (&#10;                                    &lt;ResponsiveContainer&gt;&#10;                                        &lt;Treemap&#10;                                            data={[treeMapData]}&#10;                                            dataKey=&quot;size&quot;&#10;                                            aspectRatio={4/3}&#10;                                            stroke=&quot;#fff&quot;&#10;                                            fill=&quot;#6366f1&quot;&#10;                                            content={(props: any) =&gt; {&#10;                                                const { x, y, width, height, value } = props;&#10;                                                const item = treeMapData?.children?.find((child: any) =&gt; child.size === value);&#10;                                                if (!item) return null;&#10;&#10;                                                const name = item.name || '';&#10;                                                const performance = item.performance || 0;&#10;                                                const fontSize = Math.max(10, Math.min(width / Math.max(name.length, 1) * 1.5, 20));&#10;                                                const color = performance &gt;= 0 ? '#10b981' : '#ef4444';&#10;&#10;                                                return (&#10;                                                    &lt;g&#10;                                                        onClick={() =&gt; handleAssetClick(item.asset)}&#10;                                                        style={{ cursor: 'pointer' }}&#10;                                                    &gt;&#10;                                                        &lt;rect&#10;                                                            x={x}&#10;                                                            y={y}&#10;                                                            width={width}&#10;                                                            height={height}&#10;                                                            style={{&#10;                                                                fill: color,&#10;                                                                fillOpacity: 0.7,&#10;                                                                stroke: '#1f2937',&#10;                                                                strokeWidth: 2,&#10;                                                                strokeOpacity: 1,&#10;                                                            }}&#10;                                                        /&gt;&#10;                                                        {width &gt; 60 &amp;&amp; height &gt; 40 &amp;&amp; (&#10;                                                            &lt;&gt;&#10;                                                                &lt;text&#10;                                                                    x={x + width / 2}&#10;                                                                    y={y + height / 2 - 8}&#10;                                                                    textAnchor=&quot;middle&quot;&#10;                                                                    fill=&quot;#fff&quot;&#10;                                                                    fontSize={fontSize}&#10;                                                                    fontWeight=&quot;bold&quot;&#10;                                                                &gt;&#10;                                                                    {name}&#10;                                                                &lt;/text&gt;&#10;                                                                &lt;text&#10;                                                                    x={x + width / 2}&#10;                                                                    y={y + height / 2 + 10}&#10;                                                                    textAnchor=&quot;middle&quot;&#10;                                                                    fill=&quot;#fff&quot;&#10;                                                                    fontSize={fontSize * 0.8}&#10;                                                                &gt;&#10;                                                                    {performance &gt;= 0 ? '+' : ''}{performance.toFixed(1)}%&#10;                                                                &lt;/text&gt;&#10;                                                            &lt;/&gt;&#10;                                                        )}&#10;                                                    &lt;/g&gt;&#10;                                                );&#10;                                            }}&#10;                                        /&gt;&#10;                                    &lt;/ResponsiveContainer&gt;&#10;                                ) : (&#10;                                    &lt;div className=&quot;flex items-center justify-center h-full text-gray-400&quot;&gt;&#10;                                        &lt;p&gt;Nenhum dado disponível para o mapa de calor&lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                )}&#10;                            &lt;/div&gt;&#10;                        &lt;/motion.div&gt;&#10;&#10;                        {/* Top Performers INTERATIVO */}&#10;                        &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50 lg:col-span-2&quot;&gt;&#10;                            &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                                &lt;h3 className=&quot;text-xl font-bold text-white flex items-center gap-2&quot;&gt;&#10;                                    &lt;Trophy className=&quot;h-5 w-5 text-yellow-400&quot; /&gt;&#10;                                    Top Performers&#10;                                    &lt;span className=&quot;text-sm text-gray-400 font-normal&quot;&gt;&#10;                                        (Clique para análise individual)&#10;                                    &lt;/span&gt;&#10;                                &lt;/h3&gt;&#10;                                &lt;ExplainButton&#10;                                    onClick={() =&gt; handleExplainChart('Top Performers', topPerformers, 'top-performers')}&#10;                                    isLoading={isExplaining === 'top-performers'}&#10;                                /&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-5 gap-4&quot;&gt;&#10;                                {topPerformers.slice(0, 5).map((asset, index) =&gt; (&#10;                                    &lt;motion.div&#10;                                        key={asset.ticker}&#10;                                        initial={{ opacity: 0, x: -20 }}&#10;                                        animate={{ opacity: 1, x: 0 }}&#10;                                        transition={{ delay: index * 0.1 }}&#10;                                        whileHover={{ scale: 1.05, y: -5 }}&#10;                                        onClick={() =&gt; handleAssetClick(asset.asset)}&#10;                                        className=&quot;bg-gray-800/50 p-4 rounded-xl border border-gray-700/50 cursor-pointer hover:border-indigo-500/50 transition-all group&quot;&#10;                                    &gt;&#10;                                        &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                                            &lt;h4 className=&quot;font-bold text-white group-hover:text-indigo-400 transition-colors&quot;&gt;{asset.ticker}&lt;/h4&gt;&#10;                                            &lt;span className={`text-2xl font-bold ${index === 0 ? 'text-yellow-400' : index === 1 ? 'text-gray-300' : index === 2 ? 'text-orange-400' : 'text-gray-500'}`}&gt;&#10;                                                #{index + 1}&#10;                                            &lt;/span&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;p className=&quot;text-xs text-gray-400 mb-2 line-clamp-1&quot;&gt;{asset.name}&lt;/p&gt;&#10;                                        &lt;div className=&quot;space-y-1&quot;&gt;&#10;                                            &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;                                                &lt;span className=&quot;text-gray-400 text-xs&quot;&gt;Retorno&lt;/span&gt;&#10;                                                &lt;span className={`font-bold text-sm ${asset.profitPercent &gt;= 0 ? 'text-green-400' : 'text-red-400'}`}&gt;&#10;                                                    {asset.profitPercent &gt;= 0 ? '+' : ''}{asset.profitPercent.toFixed(2)}%&#10;                                                &lt;/span&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;                                                &lt;span className=&quot;text-gray-400 text-xs&quot;&gt;DY&lt;/span&gt;&#10;                                                &lt;span className=&quot;font-bold text-sm text-blue-400&quot;&gt;&#10;                                                    {asset.dividendYield.toFixed(2)}%&#10;                                                &lt;/span&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/motion.div&gt;&#10;                                ))}&#10;                            &lt;/div&gt;&#10;                        &lt;/motion.div&gt;&#10;                    &lt;/motion.div&gt;&#10;                )}&#10;&#10;                {selectedView === 'income' &amp;&amp; (&#10;                    &lt;motion.div&#10;                        key=&quot;income&quot;&#10;                        initial={{ opacity: 0, y: 20 }}&#10;                        animate={{ opacity: 1, y: 0 }}&#10;                        exit={{ opacity: 0, y: -20 }}&#10;                        className=&quot;space-y-6&quot;&#10;                    &gt;&#10;                        {/* Gráfico de Barras de Renda */}&#10;                        &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                            &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                                &lt;h3 className=&quot;text-xl font-bold text-white flex items-center gap-2&quot;&gt;&#10;                                    &lt;DollarSign className=&quot;h-5 w-5 text-emerald-400&quot; /&gt;&#10;                                    Proventos Recebidos&#10;                                    &lt;span className=&quot;text-sm text-gray-400 font-normal&quot;&gt;&#10;                                        (Clique para detalhes)&#10;                                    &lt;/span&gt;&#10;                                &lt;/h3&gt;&#10;                                &lt;ExplainButton&#10;                                    onClick={() =&gt; handleExplainChart('Proventos Recebidos', assetHistory, 'dividends-history')}&#10;                                    isLoading={isExplaining === 'dividends-history'}&#10;                                /&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;h-80&quot;&gt;&#10;                                &lt;ResponsiveContainer&gt;&#10;                                    &lt;BarChart data={assetHistory}&gt;&#10;                                        &lt;defs&gt;&#10;                                            &lt;linearGradient id={`colorDividends`} x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;0&quot; y2=&quot;1&quot;&gt;&#10;                                                &lt;stop offset=&quot;5%&quot; stopColor=&quot;#f59e0b&quot; stopOpacity={0.8}/&gt;&#10;                                                &lt;stop offset=&quot;95%&quot; stopColor=&quot;#f59e0b&quot; stopOpacity={0.3}/&gt;&#10;                                            &lt;/linearGradient&gt;&#10;                                        &lt;/defs&gt;&#10;                                        &lt;CartesianGrid strokeDasharray=&quot;3 3&quot; stroke=&quot;rgba(255, 255, 255, 0.1)&quot; /&gt;&#10;                                        &lt;XAxis dataKey=&quot;monthLabel&quot; stroke=&quot;#9ca3af&quot; /&gt;&#10;                                        &lt;YAxis stroke=&quot;#9ca3af&quot; /&gt;&#10;                                        &lt;Tooltip content={&lt;UltraPremiumTooltip /&gt;} /&gt;&#10;                                        &lt;Bar&#10;                                            dataKey=&quot;dividends&quot;&#10;                                            fill={`url(#colorDividends)`}&#10;                                            radius={[8, 8, 0, 0]}&#10;                                            name=&quot;Proventos&quot;&#10;                                        /&gt;&#10;                                    &lt;/BarChart&gt;&#10;                                &lt;/ResponsiveContainer&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/motion.div&gt;&#10;&#10;                        {/* Tabela de Renda Mensal */}&#10;                        &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                            &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                                &lt;h3 className=&quot;text-xl font-bold text-white flex items-center gap-2&quot;&gt;&#10;                                    &lt;Calendar className=&quot;h-5 w-5 text-blue-400&quot; /&gt;&#10;                                    Renda Mensal&#10;                                    &lt;span className=&quot;text-sm text-gray-400 font-normal&quot;&gt;&#10;                                        (Ajuste para ver diferentes períodos)&#10;                                    &lt;/span&gt;&#10;                                &lt;/h3&gt;&#10;                                &lt;ExplainButton&#10;                                    onClick={() =&gt; handleExplainChart('Renda Mensal', assetHistory, 'monthly-income')}&#10;                                    isLoading={isExplaining === 'monthly-income'}&#10;                                /&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                                &lt;div&gt;&#10;                                    &lt;label className=&quot;block text-xs text-gray-400 mb-2&quot;&gt;Período Inicial&lt;/label&gt;&#10;                                    &lt;input&#10;                                        type=&quot;month&quot;&#10;                                        className=&quot;w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot;&#10;                                    /&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div&gt;&#10;                                    &lt;label className=&quot;block text-xs text-gray-400 mb-2&quot;&gt;Período Final&lt;/label&gt;&#10;                                    &lt;input&#10;                                        type=&quot;month&quot;&#10;                                        className=&quot;w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot;&#10;                                    /&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;div className=&quot;mt-4&quot;&gt;&#10;                                &lt;button className=&quot;w-full px-4 py-2 bg-indigo-600 rounded-lg text-white font-medium transition-all hover:bg-indigo-700&quot;&gt;&#10;                                    Gerar Relatório&#10;                                &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/motion.div&gt;&#10;                    &lt;/motion.div&gt;&#10;                )}&#10;&#10;                {selectedView === 'risk' &amp;&amp; (&#10;                    &lt;motion.div&#10;                        key=&quot;risk&quot;&#10;                        initial={{ opacity: 0, y: 20 }}&#10;                        animate={{ opacity: 1, y: 0 }}&#10;                        exit={{ opacity: 0, y: -20 }}&#10;                        className=&quot;space-y-6&quot;&#10;                    &gt;&#10;                        {/* Gráfico de Risco x Retorno */}&#10;                        &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                            &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                                &lt;h3 className=&quot;text-xl font-bold text-white flex items-center gap-2&quot;&gt;&#10;                                    &lt;Shield className=&quot;h-5 w-5 text-red-400&quot; /&gt;&#10;                                    Análise de Risco&#10;                                    &lt;span className=&quot;text-sm text-gray-400 font-normal&quot;&gt;&#10;                                        (Clique para detalhes)&#10;                                    &lt;/span&gt;&#10;                                &lt;/h3&gt;&#10;                                &lt;ExplainButton&#10;                                    onClick={() =&gt; handleExplainChart('Análise de Risco', filteredPortfolios, 'risk-analysis')}&#10;                                    isLoading={isExplaining === 'risk-analysis'}&#10;                                /&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;h-80&quot;&gt;&#10;                                &lt;ResponsiveContainer&gt;&#10;                                    &lt;ScatterChart&gt;&#10;                                        &lt;CartesianGrid strokeDasharray=&quot;3 3&quot; stroke=&quot;rgba(255, 255, 255, 0.1)&quot; /&gt;&#10;                                        &lt;XAxis&#10;                                            type=&quot;number&quot;&#10;                                            dataKey=&quot;risk&quot;&#10;                                            name=&quot;Risco&quot;&#10;                                            stroke=&quot;#9ca3af&quot;&#10;                                            domain={[0, 100]}&#10;                                        /&gt;&#10;                                        &lt;YAxis&#10;                                            type=&quot;number&quot;&#10;                                            dataKey=&quot;return&quot;&#10;                                            name=&quot;Retorno&quot;&#10;                                            stroke=&quot;#9ca3af&quot;&#10;                                        /&gt;&#10;                                        &lt;ZAxis type=&quot;number&quot; dataKey=&quot;size&quot; range={[50, 400]} /&gt;&#10;                                        &lt;Tooltip cursor={{ strokeDasharray: '3 3' }} content={&lt;UltraPremiumTooltip /&gt;} /&gt;&#10;                                        &lt;Scatter&#10;                                            name=&quot;Ativos&quot;&#10;                                            data={filteredPortfolios.map(p =&gt; ({&#10;                                                name: p.ticker,&#10;                                                risk: Math.random() * 100,&#10;                                                return: p.profitPercent || 0,&#10;                                                size: p.marketValue || p.totalInvested || 0,&#10;                                                asset: p&#10;                                            }))}&#10;                                            fill=&quot;#8b5cf6&quot;&#10;                                            onClick={(data) =&gt; handleAssetClick(data.asset)}&#10;                                            style={{ cursor: 'pointer' }}&#10;                                        &gt;&#10;                                            {filteredPortfolios.map((entry, index) =&gt; (&#10;                                                &lt;Cell&#10;                                                    key={`cell-${index}`}&#10;                                                    fill={entry.profitPercent &gt;= 0 ? '#10b981' : '#ef4444'}&#10;                                                /&gt;&#10;                                            ))}&#10;                                        &lt;/Scatter&gt;&#10;                                    &lt;/ScatterChart&gt;&#10;                                &lt;/ResponsiveContainer&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/motion.div&gt;&#10;&#10;                        {/* Análise de Diversificação */}&#10;                        &lt;motion.div className=&quot;bg-gray-900/50 backdrop-blur-xl p-6 rounded-2xl shadow-xl border border-gray-700/50&quot;&gt;&#10;                            &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                                &lt;h3 className=&quot;text-xl font-bold text-white flex items-center gap-2&quot;&gt;&#10;                                    &lt;Building2 className=&quot;h-5 w-5 text-blue-400&quot; /&gt;&#10;                                    Análise de Diversificação&#10;                                &lt;/h3&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;flex flex-col md:flex-row gap-4&quot;&gt;&#10;                                &lt;div className=&quot;flex-1&quot;&gt;&#10;                                    &lt;div className=&quot;text-sm font-medium text-gray-300 mb-2&quot;&gt;Score de Diversificação&lt;/div&gt;&#10;                                    &lt;div className=&quot;h-2.5 bg-gray-700 rounded-full&quot;&gt;&#10;                                        &lt;div&#10;                                            className=&quot;h-2.5 rounded-full&quot;&#10;                                            style={{ width: `${riskAnalysis.diversificationScore}%`, backgroundColor: riskAnalysis.riskLevel === 'Baixo' ? '#10b981' : riskAnalysis.riskLevel === 'Médio' ? '#f59e0b' : '#ef4444' }}&#10;                                        /&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;text-xs text-gray-400 mt-1&quot;&gt;&#10;                                        {riskAnalysis.diversificationScore.toFixed(0)}% ({riskAnalysis.riskLevel})&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;div className=&quot;flex-1&quot;&gt;&#10;                                    &lt;div className=&quot;text-sm font-medium text-gray-300 mb-2&quot;&gt;Distribuição por Setor&lt;/div&gt;&#10;                                    &lt;ResponsiveContainer height={100}&gt;&#10;                                        &lt;BarChart data={riskAnalysis.sectorDistribution}&gt;&#10;                                            &lt;CartesianGrid strokeDasharray=&quot;3 3&quot; stroke=&quot;rgba(255, 255, 255, 0.1)&quot; /&gt;&#10;                                            &lt;XAxis dataKey=&quot;sector&quot; stroke=&quot;#9ca3af&quot; /&gt;&#10;                                            &lt;YAxis stroke=&quot;#9ca3af&quot; /&gt;&#10;                                            &lt;Tooltip content={&lt;UltraPremiumTooltip /&gt;} /&gt;&#10;                                            &lt;Bar dataKey=&quot;percentage&quot; fill=&quot;#3b82f6&quot; radius={[4, 4, 0, 0]}&gt;&#10;                                                {riskAnalysis.sectorDistribution.map((entry, index) =&gt; (&#10;                                                    &lt;Cell key={`cell-${index}`} fill={ENHANCED_COLORS.primary[index % ENHANCED_COLORS.primary.length]} /&gt;&#10;                                                ))}&#10;                                            &lt;/Bar&gt;&#10;                                        &lt;/BarChart&gt;&#10;                                    &lt;/ResponsiveContainer&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/motion.div&gt;&#10;                    &lt;/motion.div&gt;&#10;                )}&#10;            &lt;/AnimatePresence&gt;&#10;&#10;            {/* Botão de Métricas Avançadas original mantido */}&#10;            &lt;motion.div className=&quot;flex justify-center mt-8&quot;&gt;&#10;                &lt;motion.button&#10;                    whileHover={{ scale: 1.05 }}&#10;                    whileTap={{ scale: 0.95 }}&#10;                    onClick={() =&gt; setShowAdvancedMetrics(!showAdvancedMetrics)}&#10;                    className=&quot;px-6 py-3 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-xl font-medium shadow-lg flex items-center gap-2&quot;&#10;                &gt;&#10;                    &lt;Zap className=&quot;h-5 w-5&quot; /&gt;&#10;                    {showAdvancedMetrics ? 'Ocultar' : 'Mostrar'} Métricas Avançadas&#10;                &lt;/motion.button&gt;&#10;            &lt;/motion.div&gt;&#10;&#10;            {/* Métricas Avançadas originais mantidas */}&#10;            &lt;AnimatePresence&gt;&#10;                {showAdvancedMetrics &amp;&amp; (&#10;                    &lt;motion.div&#10;                        initial={{ opacity: 0, height: 0 }}&#10;                        animate={{ opacity: 1, height: 'auto' }}&#10;                        exit={{ opacity: 0, height: 0 }}&#10;                        className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mt-6&quot;&#10;                    &gt;&#10;                        {[&#10;                            { label: 'VaR (95%)', value: 'R$ 12.450', subtext: 'Perda máxima esperada', icon: &lt;AlertCircle /&gt; },&#10;                            { label: 'Sortino Ratio', value: '1.87', subtext: 'Retorno vs. risco negativo', icon: &lt;Target /&gt; },&#10;                            { label: 'Alpha', value: '+3.2%', subtext: 'Retorno excedente', icon: &lt;TrendingUp /&gt; },&#10;                            { label: 'Treynor Ratio', value: '0.92', subtext: 'Retorno por unidade de risco', icon: &lt;Award /&gt; },&#10;                        ].map((metric, index) =&gt; (&#10;                            &lt;motion.div&#10;                                key={metric.label}&#10;                                initial={{ opacity: 0, y: 20 }}&#10;                                animate={{ opacity: 1, y: 0 }}&#10;                                transition={{ delay: index * 0.1 }}&#10;                                className=&quot;bg-gray-900/50 backdrop-blur-xl p-4 rounded-xl border border-gray-700/50&quot;&#10;                            &gt;&#10;                                &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                                    &lt;span className=&quot;text-gray-400 text-sm&quot;&gt;{metric.label}&lt;/span&gt;&#10;                                    &lt;span className=&quot;text-gray-500&quot;&gt;{metric.icon}&lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;p className=&quot;text-2xl font-bold text-white&quot;&gt;{metric.value}&lt;/p&gt;&#10;                                &lt;p className=&quot;text-xs text-gray-500 mt-1&quot;&gt;{metric.subtext}&lt;/p&gt;&#10;                            &lt;/motion.div&gt;&#10;                        ))}&#10;                    &lt;/motion.div&gt;&#10;                )}&#10;            &lt;/AnimatePresence&gt;&#10;        &lt;/div&gt;&#10;    );&#10;});&#10;&#10;UltraAdvancedChartsTab.displayName = 'UltraAdvancedChartsTab';&#10;&#10;export default UltraAdvancedChartsTab;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>